
stm32L432KC_SSD1306.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a0c  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08003b98  08003b98  00013b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c68  08003c68  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003c68  08003c68  00013c68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c70  08003c70  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c70  08003c70  00013c70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c74  08003c74  00013c74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003c78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000055c  2000000c  08003c84  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000568  08003c84  00020568  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d957  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001cda  00000000  00000000  0002d993  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c40  00000000  00000000  0002f670  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b48  00000000  00000000  000302b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020293  00000000  00000000  00030df8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a071  00000000  00000000  0005108b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c1160  00000000  00000000  0005b0fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011c25c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003204  00000000  00000000  0011c2d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08003b80 	.word	0x08003b80

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08003b80 	.word	0x08003b80

080001cc <strlen>:
 80001cc:	4603      	mov	r3, r0
 80001ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d2:	2a00      	cmp	r2, #0
 80001d4:	d1fb      	bne.n	80001ce <strlen+0x2>
 80001d6:	1a18      	subs	r0, r3, r0
 80001d8:	3801      	subs	r0, #1
 80001da:	4770      	bx	lr

080001dc <__aeabi_uldivmod>:
 80001dc:	b953      	cbnz	r3, 80001f4 <__aeabi_uldivmod+0x18>
 80001de:	b94a      	cbnz	r2, 80001f4 <__aeabi_uldivmod+0x18>
 80001e0:	2900      	cmp	r1, #0
 80001e2:	bf08      	it	eq
 80001e4:	2800      	cmpeq	r0, #0
 80001e6:	bf1c      	itt	ne
 80001e8:	f04f 31ff 	movne.w	r1, #4294967295
 80001ec:	f04f 30ff 	movne.w	r0, #4294967295
 80001f0:	f000 b972 	b.w	80004d8 <__aeabi_idiv0>
 80001f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001fc:	f000 f806 	bl	800020c <__udivmoddi4>
 8000200:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000204:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000208:	b004      	add	sp, #16
 800020a:	4770      	bx	lr

0800020c <__udivmoddi4>:
 800020c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000210:	9e08      	ldr	r6, [sp, #32]
 8000212:	4604      	mov	r4, r0
 8000214:	4688      	mov	r8, r1
 8000216:	2b00      	cmp	r3, #0
 8000218:	d14b      	bne.n	80002b2 <__udivmoddi4+0xa6>
 800021a:	428a      	cmp	r2, r1
 800021c:	4615      	mov	r5, r2
 800021e:	d967      	bls.n	80002f0 <__udivmoddi4+0xe4>
 8000220:	fab2 f282 	clz	r2, r2
 8000224:	b14a      	cbz	r2, 800023a <__udivmoddi4+0x2e>
 8000226:	f1c2 0720 	rsb	r7, r2, #32
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	fa20 f707 	lsr.w	r7, r0, r7
 8000232:	4095      	lsls	r5, r2
 8000234:	ea47 0803 	orr.w	r8, r7, r3
 8000238:	4094      	lsls	r4, r2
 800023a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023e:	0c23      	lsrs	r3, r4, #16
 8000240:	fbb8 f7fe 	udiv	r7, r8, lr
 8000244:	fa1f fc85 	uxth.w	ip, r5
 8000248:	fb0e 8817 	mls	r8, lr, r7, r8
 800024c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000250:	fb07 f10c 	mul.w	r1, r7, ip
 8000254:	4299      	cmp	r1, r3
 8000256:	d909      	bls.n	800026c <__udivmoddi4+0x60>
 8000258:	18eb      	adds	r3, r5, r3
 800025a:	f107 30ff 	add.w	r0, r7, #4294967295
 800025e:	f080 811b 	bcs.w	8000498 <__udivmoddi4+0x28c>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 8118 	bls.w	8000498 <__udivmoddi4+0x28c>
 8000268:	3f02      	subs	r7, #2
 800026a:	442b      	add	r3, r5
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0fe 	udiv	r0, r3, lr
 8000274:	fb0e 3310 	mls	r3, lr, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000280:	45a4      	cmp	ip, r4
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x8c>
 8000284:	192c      	adds	r4, r5, r4
 8000286:	f100 33ff 	add.w	r3, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x290>
 800028e:	45a4      	cmp	ip, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x290>
 8000294:	3802      	subs	r0, #2
 8000296:	442c      	add	r4, r5
 8000298:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800029c:	eba4 040c 	sub.w	r4, r4, ip
 80002a0:	2700      	movs	r7, #0
 80002a2:	b11e      	cbz	r6, 80002ac <__udivmoddi4+0xa0>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c6 4300 	strd	r4, r3, [r6]
 80002ac:	4639      	mov	r1, r7
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xbe>
 80002b6:	2e00      	cmp	r6, #0
 80002b8:	f000 80eb 	beq.w	8000492 <__udivmoddi4+0x286>
 80002bc:	2700      	movs	r7, #0
 80002be:	e9c6 0100 	strd	r0, r1, [r6]
 80002c2:	4638      	mov	r0, r7
 80002c4:	4639      	mov	r1, r7
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f783 	clz	r7, r3
 80002ce:	2f00      	cmp	r7, #0
 80002d0:	d147      	bne.n	8000362 <__udivmoddi4+0x156>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd0>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80fa 	bhi.w	80004d0 <__udivmoddi4+0x2c4>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	4698      	mov	r8, r3
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa0>
 80002ea:	e9c6 4800 	strd	r4, r8, [r6]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa0>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xe8>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 808f 	bne.w	800041c <__udivmoddi4+0x210>
 80002fe:	1b49      	subs	r1, r1, r5
 8000300:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000304:	fa1f f885 	uxth.w	r8, r5
 8000308:	2701      	movs	r7, #1
 800030a:	fbb1 fcfe 	udiv	ip, r1, lr
 800030e:	0c23      	lsrs	r3, r4, #16
 8000310:	fb0e 111c 	mls	r1, lr, ip, r1
 8000314:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000318:	fb08 f10c 	mul.w	r1, r8, ip
 800031c:	4299      	cmp	r1, r3
 800031e:	d907      	bls.n	8000330 <__udivmoddi4+0x124>
 8000320:	18eb      	adds	r3, r5, r3
 8000322:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x122>
 8000328:	4299      	cmp	r1, r3
 800032a:	f200 80cd 	bhi.w	80004c8 <__udivmoddi4+0x2bc>
 800032e:	4684      	mov	ip, r0
 8000330:	1a59      	subs	r1, r3, r1
 8000332:	b2a3      	uxth	r3, r4
 8000334:	fbb1 f0fe 	udiv	r0, r1, lr
 8000338:	fb0e 1410 	mls	r4, lr, r0, r1
 800033c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000340:	fb08 f800 	mul.w	r8, r8, r0
 8000344:	45a0      	cmp	r8, r4
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x14c>
 8000348:	192c      	adds	r4, r5, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x14a>
 8000350:	45a0      	cmp	r8, r4
 8000352:	f200 80b6 	bhi.w	80004c2 <__udivmoddi4+0x2b6>
 8000356:	4618      	mov	r0, r3
 8000358:	eba4 0408 	sub.w	r4, r4, r8
 800035c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000360:	e79f      	b.n	80002a2 <__udivmoddi4+0x96>
 8000362:	f1c7 0c20 	rsb	ip, r7, #32
 8000366:	40bb      	lsls	r3, r7
 8000368:	fa22 fe0c 	lsr.w	lr, r2, ip
 800036c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000370:	fa01 f407 	lsl.w	r4, r1, r7
 8000374:	fa20 f50c 	lsr.w	r5, r0, ip
 8000378:	fa21 f30c 	lsr.w	r3, r1, ip
 800037c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000380:	4325      	orrs	r5, r4
 8000382:	fbb3 f9f8 	udiv	r9, r3, r8
 8000386:	0c2c      	lsrs	r4, r5, #16
 8000388:	fb08 3319 	mls	r3, r8, r9, r3
 800038c:	fa1f fa8e 	uxth.w	sl, lr
 8000390:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000394:	fb09 f40a 	mul.w	r4, r9, sl
 8000398:	429c      	cmp	r4, r3
 800039a:	fa02 f207 	lsl.w	r2, r2, r7
 800039e:	fa00 f107 	lsl.w	r1, r0, r7
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b0>
 80003a4:	eb1e 0303 	adds.w	r3, lr, r3
 80003a8:	f109 30ff 	add.w	r0, r9, #4294967295
 80003ac:	f080 8087 	bcs.w	80004be <__udivmoddi4+0x2b2>
 80003b0:	429c      	cmp	r4, r3
 80003b2:	f240 8084 	bls.w	80004be <__udivmoddi4+0x2b2>
 80003b6:	f1a9 0902 	sub.w	r9, r9, #2
 80003ba:	4473      	add	r3, lr
 80003bc:	1b1b      	subs	r3, r3, r4
 80003be:	b2ad      	uxth	r5, r5
 80003c0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c4:	fb08 3310 	mls	r3, r8, r0, r3
 80003c8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003cc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d0:	45a2      	cmp	sl, r4
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1da>
 80003d4:	eb1e 0404 	adds.w	r4, lr, r4
 80003d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003dc:	d26b      	bcs.n	80004b6 <__udivmoddi4+0x2aa>
 80003de:	45a2      	cmp	sl, r4
 80003e0:	d969      	bls.n	80004b6 <__udivmoddi4+0x2aa>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4474      	add	r4, lr
 80003e6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ea:	fba0 8902 	umull	r8, r9, r0, r2
 80003ee:	eba4 040a 	sub.w	r4, r4, sl
 80003f2:	454c      	cmp	r4, r9
 80003f4:	46c2      	mov	sl, r8
 80003f6:	464b      	mov	r3, r9
 80003f8:	d354      	bcc.n	80004a4 <__udivmoddi4+0x298>
 80003fa:	d051      	beq.n	80004a0 <__udivmoddi4+0x294>
 80003fc:	2e00      	cmp	r6, #0
 80003fe:	d069      	beq.n	80004d4 <__udivmoddi4+0x2c8>
 8000400:	ebb1 050a 	subs.w	r5, r1, sl
 8000404:	eb64 0403 	sbc.w	r4, r4, r3
 8000408:	fa04 fc0c 	lsl.w	ip, r4, ip
 800040c:	40fd      	lsrs	r5, r7
 800040e:	40fc      	lsrs	r4, r7
 8000410:	ea4c 0505 	orr.w	r5, ip, r5
 8000414:	e9c6 5400 	strd	r5, r4, [r6]
 8000418:	2700      	movs	r7, #0
 800041a:	e747      	b.n	80002ac <__udivmoddi4+0xa0>
 800041c:	f1c2 0320 	rsb	r3, r2, #32
 8000420:	fa20 f703 	lsr.w	r7, r0, r3
 8000424:	4095      	lsls	r5, r2
 8000426:	fa01 f002 	lsl.w	r0, r1, r2
 800042a:	fa21 f303 	lsr.w	r3, r1, r3
 800042e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000432:	4338      	orrs	r0, r7
 8000434:	0c01      	lsrs	r1, r0, #16
 8000436:	fbb3 f7fe 	udiv	r7, r3, lr
 800043a:	fa1f f885 	uxth.w	r8, r5
 800043e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000442:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000446:	fb07 f308 	mul.w	r3, r7, r8
 800044a:	428b      	cmp	r3, r1
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d907      	bls.n	8000462 <__udivmoddi4+0x256>
 8000452:	1869      	adds	r1, r5, r1
 8000454:	f107 3cff 	add.w	ip, r7, #4294967295
 8000458:	d22f      	bcs.n	80004ba <__udivmoddi4+0x2ae>
 800045a:	428b      	cmp	r3, r1
 800045c:	d92d      	bls.n	80004ba <__udivmoddi4+0x2ae>
 800045e:	3f02      	subs	r7, #2
 8000460:	4429      	add	r1, r5
 8000462:	1acb      	subs	r3, r1, r3
 8000464:	b281      	uxth	r1, r0
 8000466:	fbb3 f0fe 	udiv	r0, r3, lr
 800046a:	fb0e 3310 	mls	r3, lr, r0, r3
 800046e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000472:	fb00 f308 	mul.w	r3, r0, r8
 8000476:	428b      	cmp	r3, r1
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x27e>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000480:	d217      	bcs.n	80004b2 <__udivmoddi4+0x2a6>
 8000482:	428b      	cmp	r3, r1
 8000484:	d915      	bls.n	80004b2 <__udivmoddi4+0x2a6>
 8000486:	3802      	subs	r0, #2
 8000488:	4429      	add	r1, r5
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000490:	e73b      	b.n	800030a <__udivmoddi4+0xfe>
 8000492:	4637      	mov	r7, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e709      	b.n	80002ac <__udivmoddi4+0xa0>
 8000498:	4607      	mov	r7, r0
 800049a:	e6e7      	b.n	800026c <__udivmoddi4+0x60>
 800049c:	4618      	mov	r0, r3
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x8c>
 80004a0:	4541      	cmp	r1, r8
 80004a2:	d2ab      	bcs.n	80003fc <__udivmoddi4+0x1f0>
 80004a4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a8:	eb69 020e 	sbc.w	r2, r9, lr
 80004ac:	3801      	subs	r0, #1
 80004ae:	4613      	mov	r3, r2
 80004b0:	e7a4      	b.n	80003fc <__udivmoddi4+0x1f0>
 80004b2:	4660      	mov	r0, ip
 80004b4:	e7e9      	b.n	800048a <__udivmoddi4+0x27e>
 80004b6:	4618      	mov	r0, r3
 80004b8:	e795      	b.n	80003e6 <__udivmoddi4+0x1da>
 80004ba:	4667      	mov	r7, ip
 80004bc:	e7d1      	b.n	8000462 <__udivmoddi4+0x256>
 80004be:	4681      	mov	r9, r0
 80004c0:	e77c      	b.n	80003bc <__udivmoddi4+0x1b0>
 80004c2:	3802      	subs	r0, #2
 80004c4:	442c      	add	r4, r5
 80004c6:	e747      	b.n	8000358 <__udivmoddi4+0x14c>
 80004c8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004cc:	442b      	add	r3, r5
 80004ce:	e72f      	b.n	8000330 <__udivmoddi4+0x124>
 80004d0:	4638      	mov	r0, r7
 80004d2:	e708      	b.n	80002e6 <__udivmoddi4+0xda>
 80004d4:	4637      	mov	r7, r6
 80004d6:	e6e9      	b.n	80002ac <__udivmoddi4+0xa0>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <init>:
//Deze twee werken in conjunctie samen
void dropblock(tetrisgame *t, int ycoord,int randomvar);
void placeblock(tetrisgame *t,int yCoord);
void newblock(tetrisgame *t, int ycoordinate,int randomvar);
void ssd1306_Init();
void init() {
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0

		  HAL_Delay(250);
		  // blockcounter++;

	}*/
}
 80004e0:	bf00      	nop
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr
	...

080004ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004ec:	b5b0      	push	{r4, r5, r7, lr}
 80004ee:	b0e4      	sub	sp, #400	; 0x190
 80004f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */
	  tetrisgame tgame;
	  tgame.bufferheight =0;
 80004f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004f6:	2200      	movs	r2, #0
 80004f8:	601a      	str	r2, [r3, #0]
	  tgame.height =20;
 80004fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004fe:	2214      	movs	r2, #20
 8000500:	615a      	str	r2, [r3, #20]
	  tgame.width =8;
 8000502:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000506:	2208      	movs	r2, #8
 8000508:	619a      	str	r2, [r3, #24]
	  tgame.yCoordUnderBrick =3;
 800050a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800050e:	2203      	movs	r2, #3
 8000510:	60da      	str	r2, [r3, #12]
	  tgame.XCoordLeftBrick =2;
 8000512:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000516:	2202      	movs	r2, #2
 8000518:	611a      	str	r2, [r3, #16]
	  tgame.randomcounter = 0;
 800051a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800051e:	2200      	movs	r2, #0
 8000520:	621a      	str	r2, [r3, #32]

int randomvararr[9] ={4,1,3,2,3,3,1,0,0 };
 8000522:	1d3b      	adds	r3, r7, #4
 8000524:	4a2d      	ldr	r2, [pc, #180]	; (80005dc <main+0xf0>)
 8000526:	461c      	mov	r4, r3
 8000528:	4615      	mov	r5, r2
 800052a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800052c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800052e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000530:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000532:	682b      	ldr	r3, [r5, #0]
 8000534:	6023      	str	r3, [r4, #0]
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000536:	f000 fdc4 	bl	80010c2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800053a:	f000 f857 	bl	80005ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800053e:	f000 f949 	bl	80007d4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000542:	f000 f917 	bl	8000774 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000546:	f000 f8d5 	bl	80006f4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  FillArr(&tgame);
 800054a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800054e:	4618      	mov	r0, r3
 8000550:	f000 faba 	bl	8000ac8 <FillArr>
int ycoordinate = 3;
 8000554:	2303      	movs	r3, #3
 8000556:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  debug_print("Hello from STM32L432KC dev board\r\n");
 800055a:	4a21      	ldr	r2, [pc, #132]	; (80005e0 <main+0xf4>)
 800055c:	4b21      	ldr	r3, [pc, #132]	; (80005e4 <main+0xf8>)
 800055e:	4614      	mov	r4, r2
 8000560:	461d      	mov	r5, r3
 8000562:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000564:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000566:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000568:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800056a:	682b      	ldr	r3, [r5, #0]
 800056c:	461a      	mov	r2, r3
 800056e:	8022      	strh	r2, [r4, #0]
 8000570:	3402      	adds	r4, #2
 8000572:	0c1b      	lsrs	r3, r3, #16
 8000574:	7023      	strb	r3, [r4, #0]
 8000576:	481a      	ldr	r0, [pc, #104]	; (80005e0 <main+0xf4>)
 8000578:	f7ff fe28 	bl	80001cc <strlen>
 800057c:	4603      	mov	r3, r0
 800057e:	b29a      	uxth	r2, r3
 8000580:	f04f 33ff 	mov.w	r3, #4294967295
 8000584:	4916      	ldr	r1, [pc, #88]	; (80005e0 <main+0xf4>)
 8000586:	4818      	ldr	r0, [pc, #96]	; (80005e8 <main+0xfc>)
 8000588:	f002 fe40 	bl	800320c <HAL_UART_Transmit>

  init();
 800058c:	f7ff ffa6 	bl	80004dc <init>
  newblock(&tgame,ycoordinate, randomvararr[tgame.randomcounter]);
 8000590:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000594:	6a1a      	ldr	r2, [r3, #32]
 8000596:	1d3b      	adds	r3, r7, #4
 8000598:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800059c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005a0:	f8d7 118c 	ldr.w	r1, [r7, #396]	; 0x18c
 80005a4:	4618      	mov	r0, r3
 80005a6:	f000 fabd 	bl	8000b24 <newblock>
  {

    /* USER CODE END WHILE */


	  dropblock(&tgame, ycoordinate,randomvararr[tgame.randomcounter]);
 80005aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005ae:	6a1a      	ldr	r2, [r3, #32]
 80005b0:	1d3b      	adds	r3, r7, #4
 80005b2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80005b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005ba:	f8d7 118c 	ldr.w	r1, [r7, #396]	; 0x18c
 80005be:	4618      	mov	r0, r3
 80005c0:	f000 f952 	bl	8000868 <dropblock>
		// placeblock(&tgame,ycoordinate);

		  printLCD(&tgame);
 80005c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005c8:	4618      	mov	r0, r3
 80005ca:	f000 f9fe 	bl	80009ca <printLCD>
		  ssd1306_UpdateScreen();
 80005ce:	f000 fba9 	bl	8000d24 <ssd1306_UpdateScreen>

			HAL_Delay(500);
 80005d2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005d6:	f000 fde5 	bl	80011a4 <HAL_Delay>
	  dropblock(&tgame, ycoordinate,randomvararr[tgame.randomcounter]);
 80005da:	e7e6      	b.n	80005aa <main+0xbe>
 80005dc:	08003bbc 	.word	0x08003bbc
 80005e0:	20000028 	.word	0x20000028
 80005e4:	08003b98 	.word	0x08003b98
 80005e8:	200004e4 	.word	0x200004e4

080005ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b0ac      	sub	sp, #176	; 0xb0
 80005f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80005f6:	2244      	movs	r2, #68	; 0x44
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f003 fab8 	bl	8003b70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000600:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
 800060e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000610:	1d3b      	adds	r3, r7, #4
 8000612:	2254      	movs	r2, #84	; 0x54
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f003 faaa 	bl	8003b70 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 800061c:	f001 fc50 	bl	8001ec0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000620:	4b33      	ldr	r3, [pc, #204]	; (80006f0 <SystemClock_Config+0x104>)
 8000622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000626:	4a32      	ldr	r2, [pc, #200]	; (80006f0 <SystemClock_Config+0x104>)
 8000628:	f023 0318 	bic.w	r3, r3, #24
 800062c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000630:	2314      	movs	r3, #20
 8000632:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000634:	2301      	movs	r3, #1
 8000636:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000638:	2301      	movs	r3, #1
 800063a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800063e:	2300      	movs	r3, #0
 8000640:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000644:	2360      	movs	r3, #96	; 0x60
 8000646:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064a:	2302      	movs	r3, #2
 800064c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000650:	2301      	movs	r3, #1
 8000652:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000656:	2301      	movs	r3, #1
 8000658:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 16;
 800065c:	2310      	movs	r3, #16
 800065e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000662:	2307      	movs	r3, #7
 8000664:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000668:	2302      	movs	r3, #2
 800066a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800066e:	2302      	movs	r3, #2
 8000670:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000674:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000678:	4618      	mov	r0, r3
 800067a:	f001 fc95 	bl	8001fa8 <HAL_RCC_OscConfig>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000684:	f000 faf2 	bl	8000c6c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000688:	230f      	movs	r3, #15
 800068a:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068c:	2303      	movs	r3, #3
 800068e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000694:	2300      	movs	r3, #0
 8000696:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000698:	2300      	movs	r3, #0
 800069a:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800069c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80006a0:	2101      	movs	r1, #1
 80006a2:	4618      	mov	r0, r3
 80006a4:	f002 f86e 	bl	8002784 <HAL_RCC_ClockConfig>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006ae:	f000 fadd 	bl	8000c6c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 80006b2:	2342      	movs	r3, #66	; 0x42
 80006b4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80006b6:	2300      	movs	r3, #0
 80006b8:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80006ba:	2300      	movs	r3, #0
 80006bc:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006be:	1d3b      	adds	r3, r7, #4
 80006c0:	4618      	mov	r0, r3
 80006c2:	f002 fa63 	bl	8002b8c <HAL_RCCEx_PeriphCLKConfig>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80006cc:	f000 face 	bl	8000c6c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006d0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006d4:	f001 fc12 	bl	8001efc <HAL_PWREx_ControlVoltageScaling>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80006de:	f000 fac5 	bl	8000c6c <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80006e2:	f002 fc45 	bl	8002f70 <HAL_RCCEx_EnableMSIPLLMode>
}
 80006e6:	bf00      	nop
 80006e8:	37b0      	adds	r7, #176	; 0xb0
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40021000 	.word	0x40021000

080006f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006f8:	4b1b      	ldr	r3, [pc, #108]	; (8000768 <MX_I2C1_Init+0x74>)
 80006fa:	4a1c      	ldr	r2, [pc, #112]	; (800076c <MX_I2C1_Init+0x78>)
 80006fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80006fe:	4b1a      	ldr	r3, [pc, #104]	; (8000768 <MX_I2C1_Init+0x74>)
 8000700:	4a1b      	ldr	r2, [pc, #108]	; (8000770 <MX_I2C1_Init+0x7c>)
 8000702:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000704:	4b18      	ldr	r3, [pc, #96]	; (8000768 <MX_I2C1_Init+0x74>)
 8000706:	2200      	movs	r2, #0
 8000708:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800070a:	4b17      	ldr	r3, [pc, #92]	; (8000768 <MX_I2C1_Init+0x74>)
 800070c:	2201      	movs	r2, #1
 800070e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000710:	4b15      	ldr	r3, [pc, #84]	; (8000768 <MX_I2C1_Init+0x74>)
 8000712:	2200      	movs	r2, #0
 8000714:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000716:	4b14      	ldr	r3, [pc, #80]	; (8000768 <MX_I2C1_Init+0x74>)
 8000718:	2200      	movs	r2, #0
 800071a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800071c:	4b12      	ldr	r3, [pc, #72]	; (8000768 <MX_I2C1_Init+0x74>)
 800071e:	2200      	movs	r2, #0
 8000720:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000722:	4b11      	ldr	r3, [pc, #68]	; (8000768 <MX_I2C1_Init+0x74>)
 8000724:	2200      	movs	r2, #0
 8000726:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000728:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <MX_I2C1_Init+0x74>)
 800072a:	2200      	movs	r2, #0
 800072c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800072e:	480e      	ldr	r0, [pc, #56]	; (8000768 <MX_I2C1_Init+0x74>)
 8000730:	f000 ffc2 	bl	80016b8 <HAL_I2C_Init>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800073a:	f000 fa97 	bl	8000c6c <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800073e:	2100      	movs	r1, #0
 8000740:	4809      	ldr	r0, [pc, #36]	; (8000768 <MX_I2C1_Init+0x74>)
 8000742:	f001 fb25 	bl	8001d90 <HAL_I2CEx_ConfigAnalogFilter>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800074c:	f000 fa8e 	bl	8000c6c <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000750:	2100      	movs	r1, #0
 8000752:	4805      	ldr	r0, [pc, #20]	; (8000768 <MX_I2C1_Init+0x74>)
 8000754:	f001 fb67 	bl	8001e26 <HAL_I2CEx_ConfigDigitalFilter>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800075e:	f000 fa85 	bl	8000c6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	20000498 	.word	0x20000498
 800076c:	40005400 	.word	0x40005400
 8000770:	00707cbb 	.word	0x00707cbb

08000774 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000778:	4b14      	ldr	r3, [pc, #80]	; (80007cc <MX_USART2_UART_Init+0x58>)
 800077a:	4a15      	ldr	r2, [pc, #84]	; (80007d0 <MX_USART2_UART_Init+0x5c>)
 800077c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800077e:	4b13      	ldr	r3, [pc, #76]	; (80007cc <MX_USART2_UART_Init+0x58>)
 8000780:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000784:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000786:	4b11      	ldr	r3, [pc, #68]	; (80007cc <MX_USART2_UART_Init+0x58>)
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800078c:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <MX_USART2_UART_Init+0x58>)
 800078e:	2200      	movs	r2, #0
 8000790:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000792:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <MX_USART2_UART_Init+0x58>)
 8000794:	2200      	movs	r2, #0
 8000796:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000798:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <MX_USART2_UART_Init+0x58>)
 800079a:	220c      	movs	r2, #12
 800079c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800079e:	4b0b      	ldr	r3, [pc, #44]	; (80007cc <MX_USART2_UART_Init+0x58>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a4:	4b09      	ldr	r3, [pc, #36]	; (80007cc <MX_USART2_UART_Init+0x58>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007aa:	4b08      	ldr	r3, [pc, #32]	; (80007cc <MX_USART2_UART_Init+0x58>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007b0:	4b06      	ldr	r3, [pc, #24]	; (80007cc <MX_USART2_UART_Init+0x58>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007b6:	4805      	ldr	r0, [pc, #20]	; (80007cc <MX_USART2_UART_Init+0x58>)
 80007b8:	f002 fcda 	bl	8003170 <HAL_UART_Init>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007c2:	f000 fa53 	bl	8000c6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	200004e4 	.word	0x200004e4
 80007d0:	40004400 	.word	0x40004400

080007d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b088      	sub	sp, #32
 80007d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007da:	f107 030c 	add.w	r3, r7, #12
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]
 80007e6:	60da      	str	r2, [r3, #12]
 80007e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ea:	4b1d      	ldr	r3, [pc, #116]	; (8000860 <MX_GPIO_Init+0x8c>)
 80007ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ee:	4a1c      	ldr	r2, [pc, #112]	; (8000860 <MX_GPIO_Init+0x8c>)
 80007f0:	f043 0304 	orr.w	r3, r3, #4
 80007f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007f6:	4b1a      	ldr	r3, [pc, #104]	; (8000860 <MX_GPIO_Init+0x8c>)
 80007f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fa:	f003 0304 	and.w	r3, r3, #4
 80007fe:	60bb      	str	r3, [r7, #8]
 8000800:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000802:	4b17      	ldr	r3, [pc, #92]	; (8000860 <MX_GPIO_Init+0x8c>)
 8000804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000806:	4a16      	ldr	r2, [pc, #88]	; (8000860 <MX_GPIO_Init+0x8c>)
 8000808:	f043 0301 	orr.w	r3, r3, #1
 800080c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800080e:	4b14      	ldr	r3, [pc, #80]	; (8000860 <MX_GPIO_Init+0x8c>)
 8000810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000812:	f003 0301 	and.w	r3, r3, #1
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800081a:	4b11      	ldr	r3, [pc, #68]	; (8000860 <MX_GPIO_Init+0x8c>)
 800081c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081e:	4a10      	ldr	r2, [pc, #64]	; (8000860 <MX_GPIO_Init+0x8c>)
 8000820:	f043 0302 	orr.w	r3, r3, #2
 8000824:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000826:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <MX_GPIO_Init+0x8c>)
 8000828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082a:	f003 0302 	and.w	r3, r3, #2
 800082e:	603b      	str	r3, [r7, #0]
 8000830:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000832:	2200      	movs	r2, #0
 8000834:	2108      	movs	r1, #8
 8000836:	480b      	ldr	r0, [pc, #44]	; (8000864 <MX_GPIO_Init+0x90>)
 8000838:	f000 ff26 	bl	8001688 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800083c:	2308      	movs	r3, #8
 800083e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000840:	2301      	movs	r3, #1
 8000842:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000848:	2300      	movs	r3, #0
 800084a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800084c:	f107 030c 	add.w	r3, r7, #12
 8000850:	4619      	mov	r1, r3
 8000852:	4804      	ldr	r0, [pc, #16]	; (8000864 <MX_GPIO_Init+0x90>)
 8000854:	f000 fdae 	bl	80013b4 <HAL_GPIO_Init>

}
 8000858:	bf00      	nop
 800085a:	3720      	adds	r7, #32
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	40021000 	.word	0x40021000
 8000864:	48000400 	.word	0x48000400

08000868 <dropblock>:
		        blockhit = 1;
		      }
	}*/

void dropblock(tetrisgame *t, int ycoord,int randomvar)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b088      	sub	sp, #32
 800086c:	af00      	add	r7, sp, #0
 800086e:	60f8      	str	r0, [r7, #12]
 8000870:	60b9      	str	r1, [r7, #8]
 8000872:	607a      	str	r2, [r7, #4]
    bool blockhit = 0;
 8000874:	2300      	movs	r3, #0
 8000876:	77fb      	strb	r3, [r7, #31]
    for(int a = t->yCoordUnderBrick; a >= t->yCoordUnderBrick - 3; a--){
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	68db      	ldr	r3, [r3, #12]
 800087c:	61bb      	str	r3, [r7, #24]
 800087e:	e047      	b.n	8000910 <dropblock+0xa8>
        for(int i = 0; i < 8;i++){
 8000880:	2300      	movs	r3, #0
 8000882:	617b      	str	r3, [r7, #20]
 8000884:	e03e      	b.n	8000904 <dropblock+0x9c>
            t->ghostBlockField[a+1][i] =t->ghostBlockField[a][i];
 8000886:	69bb      	ldr	r3, [r7, #24]
 8000888:	3301      	adds	r3, #1
 800088a:	68f9      	ldr	r1, [r7, #12]
 800088c:	69ba      	ldr	r2, [r7, #24]
 800088e:	00d2      	lsls	r2, r2, #3
 8000890:	4411      	add	r1, r2
 8000892:	697a      	ldr	r2, [r7, #20]
 8000894:	440a      	add	r2, r1
 8000896:	32c4      	adds	r2, #196	; 0xc4
 8000898:	7811      	ldrb	r1, [r2, #0]
 800089a:	68fa      	ldr	r2, [r7, #12]
 800089c:	00db      	lsls	r3, r3, #3
 800089e:	441a      	add	r2, r3
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	4413      	add	r3, r2
 80008a4:	33c4      	adds	r3, #196	; 0xc4
 80008a6:	460a      	mov	r2, r1
 80008a8:	701a      	strb	r2, [r3, #0]
            t->ghostBlockField[a][i] = 0;
 80008aa:	68fa      	ldr	r2, [r7, #12]
 80008ac:	69bb      	ldr	r3, [r7, #24]
 80008ae:	00db      	lsls	r3, r3, #3
 80008b0:	441a      	add	r2, r3
 80008b2:	697b      	ldr	r3, [r7, #20]
 80008b4:	4413      	add	r3, r2
 80008b6:	33c4      	adds	r3, #196	; 0xc4
 80008b8:	2200      	movs	r2, #0
 80008ba:	701a      	strb	r2, [r3, #0]
            if(((t->playingfield[a+2][i] == 1 && t->ghostBlockField[a+1][i]) == 1) ||t->yCoordUnderBrick > 13 ){
 80008bc:	69bb      	ldr	r3, [r7, #24]
 80008be:	3302      	adds	r3, #2
 80008c0:	68fa      	ldr	r2, [r7, #12]
 80008c2:	00db      	lsls	r3, r3, #3
 80008c4:	441a      	add	r2, r3
 80008c6:	697b      	ldr	r3, [r7, #20]
 80008c8:	4413      	add	r3, r2
 80008ca:	3324      	adds	r3, #36	; 0x24
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d00c      	beq.n	80008ec <dropblock+0x84>
 80008d2:	69bb      	ldr	r3, [r7, #24]
 80008d4:	3301      	adds	r3, #1
 80008d6:	68fa      	ldr	r2, [r7, #12]
 80008d8:	00db      	lsls	r3, r3, #3
 80008da:	441a      	add	r2, r3
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	4413      	add	r3, r2
 80008e0:	33c4      	adds	r3, #196	; 0xc4
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <dropblock+0x84>
 80008e8:	2301      	movs	r3, #1
 80008ea:	e000      	b.n	80008ee <dropblock+0x86>
 80008ec:	2300      	movs	r3, #0
 80008ee:	2b01      	cmp	r3, #1
 80008f0:	d003      	beq.n	80008fa <dropblock+0x92>
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	68db      	ldr	r3, [r3, #12]
 80008f6:	2b0d      	cmp	r3, #13
 80008f8:	dd01      	ble.n	80008fe <dropblock+0x96>
            blockhit = 1;
 80008fa:	2301      	movs	r3, #1
 80008fc:	77fb      	strb	r3, [r7, #31]
        for(int i = 0; i < 8;i++){
 80008fe:	697b      	ldr	r3, [r7, #20]
 8000900:	3301      	adds	r3, #1
 8000902:	617b      	str	r3, [r7, #20]
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	2b07      	cmp	r3, #7
 8000908:	ddbd      	ble.n	8000886 <dropblock+0x1e>
    for(int a = t->yCoordUnderBrick; a >= t->yCoordUnderBrick - 3; a--){
 800090a:	69bb      	ldr	r3, [r7, #24]
 800090c:	3b01      	subs	r3, #1
 800090e:	61bb      	str	r3, [r7, #24]
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	68db      	ldr	r3, [r3, #12]
 8000914:	3b03      	subs	r3, #3
 8000916:	69ba      	ldr	r2, [r7, #24]
 8000918:	429a      	cmp	r2, r3
 800091a:	dab1      	bge.n	8000880 <dropblock+0x18>
         }
      }
    }
if(blockhit==1)
 800091c:	7ffb      	ldrb	r3, [r7, #31]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d00d      	beq.n	800093e <dropblock+0xd6>
{
	placeblock(t,t->yCoordUnderBrick);
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	68db      	ldr	r3, [r3, #12]
 8000926:	4619      	mov	r1, r3
 8000928:	68f8      	ldr	r0, [r7, #12]
 800092a:	f000 f811 	bl	8000950 <placeblock>
		//t->yCoordUnderBrick =3;
		newblock(t,t->yCoordUnderBrick,randomvar );
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	68db      	ldr	r3, [r3, #12]
 8000932:	687a      	ldr	r2, [r7, #4]
 8000934:	4619      	mov	r1, r3
 8000936:	68f8      	ldr	r0, [r7, #12]
 8000938:	f000 f8f4 	bl	8000b24 <newblock>
{
	 t->yCoordUnderBrick= t->yCoordUnderBrick+1;


}
}
 800093c:	e004      	b.n	8000948 <dropblock+0xe0>
	 t->yCoordUnderBrick= t->yCoordUnderBrick+1;
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	68db      	ldr	r3, [r3, #12]
 8000942:	1c5a      	adds	r2, r3, #1
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	60da      	str	r2, [r3, #12]
}
 8000948:	bf00      	nop
 800094a:	3720      	adds	r7, #32
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}

08000950 <placeblock>:

void placeblock(tetrisgame *t,int yCoord)
{
 8000950:	b480      	push	{r7}
 8000952:	b085      	sub	sp, #20
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
 8000958:	6039      	str	r1, [r7, #0]
for(int y = 0;y<=15; y++)
 800095a:	2300      	movs	r3, #0
 800095c:	60fb      	str	r3, [r7, #12]
 800095e:	e02b      	b.n	80009b8 <placeblock+0x68>
{
		for(int x = 0 ;x<8; x++)
 8000960:	2300      	movs	r3, #0
 8000962:	60bb      	str	r3, [r7, #8]
 8000964:	e022      	b.n	80009ac <placeblock+0x5c>
		{
			t->playingfield[y][x] = t->playingfield[y][x] | t->ghostBlockField[y][x];
 8000966:	687a      	ldr	r2, [r7, #4]
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	00db      	lsls	r3, r3, #3
 800096c:	441a      	add	r2, r3
 800096e:	68bb      	ldr	r3, [r7, #8]
 8000970:	4413      	add	r3, r2
 8000972:	3324      	adds	r3, #36	; 0x24
 8000974:	781a      	ldrb	r2, [r3, #0]
 8000976:	6879      	ldr	r1, [r7, #4]
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	00db      	lsls	r3, r3, #3
 800097c:	4419      	add	r1, r3
 800097e:	68bb      	ldr	r3, [r7, #8]
 8000980:	440b      	add	r3, r1
 8000982:	33c4      	adds	r3, #196	; 0xc4
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	4313      	orrs	r3, r2
 8000988:	b2db      	uxtb	r3, r3
 800098a:	2b00      	cmp	r3, #0
 800098c:	bf14      	ite	ne
 800098e:	2301      	movne	r3, #1
 8000990:	2300      	moveq	r3, #0
 8000992:	b2d9      	uxtb	r1, r3
 8000994:	687a      	ldr	r2, [r7, #4]
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	00db      	lsls	r3, r3, #3
 800099a:	441a      	add	r2, r3
 800099c:	68bb      	ldr	r3, [r7, #8]
 800099e:	4413      	add	r3, r2
 80009a0:	3324      	adds	r3, #36	; 0x24
 80009a2:	460a      	mov	r2, r1
 80009a4:	701a      	strb	r2, [r3, #0]
		for(int x = 0 ;x<8; x++)
 80009a6:	68bb      	ldr	r3, [r7, #8]
 80009a8:	3301      	adds	r3, #1
 80009aa:	60bb      	str	r3, [r7, #8]
 80009ac:	68bb      	ldr	r3, [r7, #8]
 80009ae:	2b07      	cmp	r3, #7
 80009b0:	ddd9      	ble.n	8000966 <placeblock+0x16>
for(int y = 0;y<=15; y++)
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	3301      	adds	r3, #1
 80009b6:	60fb      	str	r3, [r7, #12]
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	2b0f      	cmp	r3, #15
 80009bc:	ddd0      	ble.n	8000960 <placeblock+0x10>
		}
}
}
 80009be:	bf00      	nop
 80009c0:	3714      	adds	r7, #20
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr

080009ca <printLCD>:

*/



void printLCD(tetrisgame *t) {
 80009ca:	b580      	push	{r7, lr}
 80009cc:	b088      	sub	sp, #32
 80009ce:	af00      	add	r7, sp, #0
 80009d0:	6078      	str	r0, [r7, #4]
        ssd1306_Fill(Black);
 80009d2:	2000      	movs	r0, #0
 80009d4:	f000 f984 	bl	8000ce0 <ssd1306_Fill>
        ssd1306_UpdateScreen();
 80009d8:	f000 f9a4 	bl	8000d24 <ssd1306_UpdateScreen>
        for(int x = 0; x < t->width; x++) {
 80009dc:	2300      	movs	r3, #0
 80009de:	61fb      	str	r3, [r7, #28]
 80009e0:	e067      	b.n	8000ab2 <printLCD+0xe8>
            for(int y = t->bufferheight-1; y < (int)t->height; y++) {
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	3b01      	subs	r3, #1
 80009e8:	61bb      	str	r3, [r7, #24]
 80009ea:	e05a      	b.n	8000aa2 <printLCD+0xd8>
                if(t->playingfield[y][x] == 1) {
 80009ec:	687a      	ldr	r2, [r7, #4]
 80009ee:	69bb      	ldr	r3, [r7, #24]
 80009f0:	00db      	lsls	r3, r3, #3
 80009f2:	441a      	add	r2, r3
 80009f4:	69fb      	ldr	r3, [r7, #28]
 80009f6:	4413      	add	r3, r2
 80009f8:	3324      	adds	r3, #36	; 0x24
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d021      	beq.n	8000a44 <printLCD+0x7a>
                    for(int a = (x * 8); a < (x * 8)+7; a++)
 8000a00:	69fb      	ldr	r3, [r7, #28]
 8000a02:	00db      	lsls	r3, r3, #3
 8000a04:	617b      	str	r3, [r7, #20]
 8000a06:	e017      	b.n	8000a38 <printLCD+0x6e>
                    {
                    	for(int b = (y * 8); b < (y*8)+7; b++)
 8000a08:	69bb      	ldr	r3, [r7, #24]
 8000a0a:	00db      	lsls	r3, r3, #3
 8000a0c:	613b      	str	r3, [r7, #16]
 8000a0e:	e00a      	b.n	8000a26 <printLCD+0x5c>
                    	{
                    		ssd1306_DrawPixel(b,a,White);
 8000a10:	693b      	ldr	r3, [r7, #16]
 8000a12:	b2db      	uxtb	r3, r3
 8000a14:	697a      	ldr	r2, [r7, #20]
 8000a16:	b2d1      	uxtb	r1, r2
 8000a18:	2201      	movs	r2, #1
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f000 f9a8 	bl	8000d70 <ssd1306_DrawPixel>
                    	for(int b = (y * 8); b < (y*8)+7; b++)
 8000a20:	693b      	ldr	r3, [r7, #16]
 8000a22:	3301      	adds	r3, #1
 8000a24:	613b      	str	r3, [r7, #16]
 8000a26:	69bb      	ldr	r3, [r7, #24]
 8000a28:	00db      	lsls	r3, r3, #3
 8000a2a:	3307      	adds	r3, #7
 8000a2c:	693a      	ldr	r2, [r7, #16]
 8000a2e:	429a      	cmp	r2, r3
 8000a30:	dbee      	blt.n	8000a10 <printLCD+0x46>
                    for(int a = (x * 8); a < (x * 8)+7; a++)
 8000a32:	697b      	ldr	r3, [r7, #20]
 8000a34:	3301      	adds	r3, #1
 8000a36:	617b      	str	r3, [r7, #20]
 8000a38:	69fb      	ldr	r3, [r7, #28]
 8000a3a:	00db      	lsls	r3, r3, #3
 8000a3c:	3307      	adds	r3, #7
 8000a3e:	697a      	ldr	r2, [r7, #20]
 8000a40:	429a      	cmp	r2, r3
 8000a42:	dbe1      	blt.n	8000a08 <printLCD+0x3e>
                    	}
                    }
                }
                if(t->ghostBlockField[y][x] == 1) {
 8000a44:	687a      	ldr	r2, [r7, #4]
 8000a46:	69bb      	ldr	r3, [r7, #24]
 8000a48:	00db      	lsls	r3, r3, #3
 8000a4a:	441a      	add	r2, r3
 8000a4c:	69fb      	ldr	r3, [r7, #28]
 8000a4e:	4413      	add	r3, r2
 8000a50:	33c4      	adds	r3, #196	; 0xc4
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d021      	beq.n	8000a9c <printLCD+0xd2>
                    for(int a = (x * 8); a < (x * 8)+7; a++)
 8000a58:	69fb      	ldr	r3, [r7, #28]
 8000a5a:	00db      	lsls	r3, r3, #3
 8000a5c:	60fb      	str	r3, [r7, #12]
 8000a5e:	e017      	b.n	8000a90 <printLCD+0xc6>
                    {
                    	for(int b = (y * 8); b < (y*8)+7; b++)
 8000a60:	69bb      	ldr	r3, [r7, #24]
 8000a62:	00db      	lsls	r3, r3, #3
 8000a64:	60bb      	str	r3, [r7, #8]
 8000a66:	e00a      	b.n	8000a7e <printLCD+0xb4>
                    	{
                    		ssd1306_DrawPixel(b,a,White);
 8000a68:	68bb      	ldr	r3, [r7, #8]
 8000a6a:	b2db      	uxtb	r3, r3
 8000a6c:	68fa      	ldr	r2, [r7, #12]
 8000a6e:	b2d1      	uxtb	r1, r2
 8000a70:	2201      	movs	r2, #1
 8000a72:	4618      	mov	r0, r3
 8000a74:	f000 f97c 	bl	8000d70 <ssd1306_DrawPixel>
                    	for(int b = (y * 8); b < (y*8)+7; b++)
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	60bb      	str	r3, [r7, #8]
 8000a7e:	69bb      	ldr	r3, [r7, #24]
 8000a80:	00db      	lsls	r3, r3, #3
 8000a82:	3307      	adds	r3, #7
 8000a84:	68ba      	ldr	r2, [r7, #8]
 8000a86:	429a      	cmp	r2, r3
 8000a88:	dbee      	blt.n	8000a68 <printLCD+0x9e>
                    for(int a = (x * 8); a < (x * 8)+7; a++)
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	69fb      	ldr	r3, [r7, #28]
 8000a92:	00db      	lsls	r3, r3, #3
 8000a94:	3307      	adds	r3, #7
 8000a96:	68fa      	ldr	r2, [r7, #12]
 8000a98:	429a      	cmp	r2, r3
 8000a9a:	dbe1      	blt.n	8000a60 <printLCD+0x96>
            for(int y = t->bufferheight-1; y < (int)t->height; y++) {
 8000a9c:	69bb      	ldr	r3, [r7, #24]
 8000a9e:	3301      	adds	r3, #1
 8000aa0:	61bb      	str	r3, [r7, #24]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	695b      	ldr	r3, [r3, #20]
 8000aa6:	69ba      	ldr	r2, [r7, #24]
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	db9f      	blt.n	80009ec <printLCD+0x22>
        for(int x = 0; x < t->width; x++) {
 8000aac:	69fb      	ldr	r3, [r7, #28]
 8000aae:	3301      	adds	r3, #1
 8000ab0:	61fb      	str	r3, [r7, #28]
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	699b      	ldr	r3, [r3, #24]
 8000ab6:	69fa      	ldr	r2, [r7, #28]
 8000ab8:	429a      	cmp	r2, r3
 8000aba:	db92      	blt.n	80009e2 <printLCD+0x18>

               }
            }

        }
        ssd1306_UpdateScreen();
 8000abc:	f000 f932 	bl	8000d24 <ssd1306_UpdateScreen>
    }
 8000ac0:	bf00      	nop
 8000ac2:	3720      	adds	r7, #32
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <FillArr>:




void FillArr(tetrisgame *t)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b085      	sub	sp, #20
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  for(int x =0; x <8;x++ ) {
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	e01d      	b.n	8000b12 <FillArr+0x4a>
      for(int y =0;y<20;y++ ) {
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	60bb      	str	r3, [r7, #8]
 8000ada:	e014      	b.n	8000b06 <FillArr+0x3e>
	  t->playingfield[y][x]= 0;
 8000adc:	687a      	ldr	r2, [r7, #4]
 8000ade:	68bb      	ldr	r3, [r7, #8]
 8000ae0:	00db      	lsls	r3, r3, #3
 8000ae2:	441a      	add	r2, r3
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	4413      	add	r3, r2
 8000ae8:	3324      	adds	r3, #36	; 0x24
 8000aea:	2200      	movs	r2, #0
 8000aec:	701a      	strb	r2, [r3, #0]
	  t->ghostBlockField[y][x]= 0;
 8000aee:	687a      	ldr	r2, [r7, #4]
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	00db      	lsls	r3, r3, #3
 8000af4:	441a      	add	r2, r3
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	4413      	add	r3, r2
 8000afa:	33c4      	adds	r3, #196	; 0xc4
 8000afc:	2200      	movs	r2, #0
 8000afe:	701a      	strb	r2, [r3, #0]
      for(int y =0;y<20;y++ ) {
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	3301      	adds	r3, #1
 8000b04:	60bb      	str	r3, [r7, #8]
 8000b06:	68bb      	ldr	r3, [r7, #8]
 8000b08:	2b13      	cmp	r3, #19
 8000b0a:	dde7      	ble.n	8000adc <FillArr+0x14>
  for(int x =0; x <8;x++ ) {
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	3301      	adds	r3, #1
 8000b10:	60fb      	str	r3, [r7, #12]
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	2b07      	cmp	r3, #7
 8000b16:	ddde      	ble.n	8000ad6 <FillArr+0xe>
	 // x++;
      }
  }
}
 8000b18:	bf00      	nop
 8000b1a:	3714      	adds	r7, #20
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr

08000b24 <newblock>:
void newblock(tetrisgame *t, int ycoordinate,int randomvar)
{
 8000b24:	b490      	push	{r4, r7}
 8000b26:	b09a      	sub	sp, #104	; 0x68
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	60f8      	str	r0, [r7, #12]
 8000b2c:	60b9      	str	r1, [r7, #8]
 8000b2e:	607a      	str	r2, [r7, #4]

     block currentblock;
     block longBlock = {.height =1,.width =4, .blockShape = {{0,0,0,0},{0,0,1,1},{0,0,1,1}}};
 8000b30:	4b49      	ldr	r3, [pc, #292]	; (8000c58 <newblock+0x134>)
 8000b32:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8000b36:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b38:	c407      	stmia	r4!, {r0, r1, r2}
 8000b3a:	8023      	strh	r3, [r4, #0]
     block blitzBlock = {.height = 2,.width = 2, .blockShape = {{0,1,1,0},{0,1,1,0},{0,0,0,0}}};
 8000b3c:	4b47      	ldr	r3, [pc, #284]	; (8000c5c <newblock+0x138>)
 8000b3e:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8000b42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b44:	c407      	stmia	r4!, {r0, r1, r2}
 8000b46:	8023      	strh	r3, [r4, #0]
     block Lblock = {.height =3,.width =2,.blockShape = {{1,0,0,0},{1,0,0,0},{1,0,0,0}}};
 8000b48:	4b45      	ldr	r3, [pc, #276]	; (8000c60 <newblock+0x13c>)
 8000b4a:	f107 0420 	add.w	r4, r7, #32
 8000b4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b50:	c407      	stmia	r4!, {r0, r1, r2}
 8000b52:	8023      	strh	r3, [r4, #0]
     block Tblock = {.height = 3,.width =3,.blockShape = {{0,1,1,0},{0,1,1,0},{0,1,1,0}}};
 8000b54:	4b43      	ldr	r3, [pc, #268]	; (8000c64 <newblock+0x140>)
 8000b56:	f107 0410 	add.w	r4, r7, #16
 8000b5a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b5c:	c407      	stmia	r4!, {r0, r1, r2}
 8000b5e:	8023      	strh	r3, [r4, #0]
     switch (blockcounter)
 8000b60:	4b41      	ldr	r3, [pc, #260]	; (8000c68 <newblock+0x144>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	2b03      	cmp	r3, #3
 8000b66:	d82b      	bhi.n	8000bc0 <newblock+0x9c>
 8000b68:	a201      	add	r2, pc, #4	; (adr r2, 8000b70 <newblock+0x4c>)
 8000b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b6e:	bf00      	nop
 8000b70:	08000b81 	.word	0x08000b81
 8000b74:	08000b91 	.word	0x08000b91
 8000b78:	08000ba1 	.word	0x08000ba1
 8000b7c:	08000bb1 	.word	0x08000bb1
     {
     case 0 : currentblock = longBlock; break;
 8000b80:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8000b84:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000b88:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b8a:	c407      	stmia	r4!, {r0, r1, r2}
 8000b8c:	8023      	strh	r3, [r4, #0]
 8000b8e:	e017      	b.n	8000bc0 <newblock+0x9c>
     case 1 : currentblock = blitzBlock; break;
 8000b90:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8000b94:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b98:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b9a:	c407      	stmia	r4!, {r0, r1, r2}
 8000b9c:	8023      	strh	r3, [r4, #0]
 8000b9e:	e00f      	b.n	8000bc0 <newblock+0x9c>
     case 2 : currentblock = Lblock; break;
 8000ba0:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8000ba4:	f107 0320 	add.w	r3, r7, #32
 8000ba8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000baa:	c407      	stmia	r4!, {r0, r1, r2}
 8000bac:	8023      	strh	r3, [r4, #0]
 8000bae:	e007      	b.n	8000bc0 <newblock+0x9c>
     case 3 : currentblock = Tblock; break;
 8000bb0:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8000bb4:	f107 0310 	add.w	r3, r7, #16
 8000bb8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bba:	c407      	stmia	r4!, {r0, r1, r2}
 8000bbc:	8023      	strh	r3, [r4, #0]
 8000bbe:	bf00      	nop
     }
     blockcounter ++;
 8000bc0:	4b29      	ldr	r3, [pc, #164]	; (8000c68 <newblock+0x144>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	3301      	adds	r3, #1
 8000bc6:	b2da      	uxtb	r2, r3
 8000bc8:	4b27      	ldr	r3, [pc, #156]	; (8000c68 <newblock+0x144>)
 8000bca:	701a      	strb	r2, [r3, #0]
     if(blockcounter >3){
 8000bcc:	4b26      	ldr	r3, [pc, #152]	; (8000c68 <newblock+0x144>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	2b03      	cmp	r3, #3
 8000bd2:	d902      	bls.n	8000bda <newblock+0xb6>
    	 blockcounter = 0;
 8000bd4:	4b24      	ldr	r3, [pc, #144]	; (8000c68 <newblock+0x144>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	701a      	strb	r2, [r3, #0]
     }
t-> randomcounter ++;
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	6a1b      	ldr	r3, [r3, #32]
 8000bde:	1c5a      	adds	r2, r3, #1
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	621a      	str	r2, [r3, #32]
if(t->randomcounter>9){
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	6a1b      	ldr	r3, [r3, #32]
 8000be8:	2b09      	cmp	r3, #9
 8000bea:	dd02      	ble.n	8000bf2 <newblock+0xce>
	 blockcounter = 0;
 8000bec:	4b1e      	ldr	r3, [pc, #120]	; (8000c68 <newblock+0x144>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	701a      	strb	r2, [r3, #0]
}
        for(int x=0; x< 4; x++){
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	667b      	str	r3, [r7, #100]	; 0x64
 8000bf6:	e027      	b.n	8000c48 <newblock+0x124>
            for(int y= 0; y<3; y++){
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	663b      	str	r3, [r7, #96]	; 0x60
 8000bfc:	e01e      	b.n	8000c3c <newblock+0x118>

                t->ghostBlockField [y][x+randomvar] = currentblock.blockShape[y][x];
 8000bfe:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	4413      	add	r3, r2
 8000c04:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000c06:	0092      	lsls	r2, r2, #2
 8000c08:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8000c0c:	4411      	add	r1, r2
 8000c0e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000c10:	440a      	add	r2, r1
 8000c12:	3a16      	subs	r2, #22
 8000c14:	7810      	ldrb	r0, [r2, #0]
 8000c16:	68f9      	ldr	r1, [r7, #12]
 8000c18:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000c1a:	00d2      	lsls	r2, r2, #3
 8000c1c:	440a      	add	r2, r1
 8000c1e:	4413      	add	r3, r2
 8000c20:	33c4      	adds	r3, #196	; 0xc4
 8000c22:	4602      	mov	r2, r0
 8000c24:	701a      	strb	r2, [r3, #0]
                t->yCoordUnderBrick = 3;
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	2203      	movs	r2, #3
 8000c2a:	60da      	str	r2, [r3, #12]
                t->XCoordLeftBrick = currentblock.height;
 8000c2c:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8000c30:	461a      	mov	r2, r3
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	611a      	str	r2, [r3, #16]
            for(int y= 0; y<3; y++){
 8000c36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000c38:	3301      	adds	r3, #1
 8000c3a:	663b      	str	r3, [r7, #96]	; 0x60
 8000c3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000c3e:	2b02      	cmp	r3, #2
 8000c40:	dddd      	ble.n	8000bfe <newblock+0xda>
        for(int x=0; x< 4; x++){
 8000c42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000c44:	3301      	adds	r3, #1
 8000c46:	667b      	str	r3, [r7, #100]	; 0x64
 8000c48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000c4a:	2b03      	cmp	r3, #3
 8000c4c:	ddd4      	ble.n	8000bf8 <newblock+0xd4>
                //increment pointer for next element fetch//
                //blocks++;
            }
     }

}
 8000c4e:	bf00      	nop
 8000c50:	3768      	adds	r7, #104	; 0x68
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bc90      	pop	{r4, r7}
 8000c56:	4770      	bx	lr
 8000c58:	08003be0 	.word	0x08003be0
 8000c5c:	08003bf0 	.word	0x08003bf0
 8000c60:	08003c00 	.word	0x08003c00
 8000c64:	08003c10 	.word	0x08003c10
 8000c68:	2000008c 	.word	0x2000008c

08000c6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
	...

08000c7c <ssd1306_WriteCommand>:
void ssd1306_Reset(void) {
	/* for I2C - do nothing */
}

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b086      	sub	sp, #24
 8000c80:	af04      	add	r7, sp, #16
 8000c82:	4603      	mov	r3, r0
 8000c84:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000c86:	f04f 33ff 	mov.w	r3, #4294967295
 8000c8a:	9302      	str	r3, [sp, #8]
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	9301      	str	r3, [sp, #4]
 8000c90:	1dfb      	adds	r3, r7, #7
 8000c92:	9300      	str	r3, [sp, #0]
 8000c94:	2301      	movs	r3, #1
 8000c96:	2200      	movs	r2, #0
 8000c98:	2178      	movs	r1, #120	; 0x78
 8000c9a:	4803      	ldr	r0, [pc, #12]	; (8000ca8 <ssd1306_WriteCommand+0x2c>)
 8000c9c:	f000 fd9c 	bl	80017d8 <HAL_I2C_Mem_Write>
}
 8000ca0:	bf00      	nop
 8000ca2:	3708      	adds	r7, #8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	20000498 	.word	0x20000498

08000cac <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b086      	sub	sp, #24
 8000cb0:	af04      	add	r7, sp, #16
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	6039      	str	r1, [r7, #0]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	b29b      	uxth	r3, r3
 8000cba:	f04f 32ff 	mov.w	r2, #4294967295
 8000cbe:	9202      	str	r2, [sp, #8]
 8000cc0:	9301      	str	r3, [sp, #4]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	9300      	str	r3, [sp, #0]
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	2240      	movs	r2, #64	; 0x40
 8000cca:	2178      	movs	r1, #120	; 0x78
 8000ccc:	4803      	ldr	r0, [pc, #12]	; (8000cdc <ssd1306_WriteData+0x30>)
 8000cce:	f000 fd83 	bl	80017d8 <HAL_I2C_Mem_Write>
}
 8000cd2:	bf00      	nop
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	20000498 	.word	0x20000498

08000ce0 <ssd1306_Fill>:

    SSD1306.Initialized = 1;
}

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8000ce0:	b480      	push	{r7}
 8000ce2:	b085      	sub	sp, #20
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000cea:	2300      	movs	r3, #0
 8000cec:	60fb      	str	r3, [r7, #12]
 8000cee:	e00d      	b.n	8000d0c <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000cf0:	79fb      	ldrb	r3, [r7, #7]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d101      	bne.n	8000cfa <ssd1306_Fill+0x1a>
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	e000      	b.n	8000cfc <ssd1306_Fill+0x1c>
 8000cfa:	21ff      	movs	r1, #255	; 0xff
 8000cfc:	4a08      	ldr	r2, [pc, #32]	; (8000d20 <ssd1306_Fill+0x40>)
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	4413      	add	r3, r2
 8000d02:	460a      	mov	r2, r1
 8000d04:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	3301      	adds	r3, #1
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d12:	d3ed      	bcc.n	8000cf0 <ssd1306_Fill+0x10>
    }
}
 8000d14:	bf00      	nop
 8000d16:	3714      	adds	r7, #20
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	20000090 	.word	0x20000090

08000d24 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
    uint8_t i;
    for(i = 0; i < 8; i++) {
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	71fb      	strb	r3, [r7, #7]
 8000d2e:	e016      	b.n	8000d5e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i);
 8000d30:	79fb      	ldrb	r3, [r7, #7]
 8000d32:	3b50      	subs	r3, #80	; 0x50
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	4618      	mov	r0, r3
 8000d38:	f7ff ffa0 	bl	8000c7c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8000d3c:	2000      	movs	r0, #0
 8000d3e:	f7ff ff9d 	bl	8000c7c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8000d42:	2010      	movs	r0, #16
 8000d44:	f7ff ff9a 	bl	8000c7c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000d48:	79fb      	ldrb	r3, [r7, #7]
 8000d4a:	01db      	lsls	r3, r3, #7
 8000d4c:	4a07      	ldr	r2, [pc, #28]	; (8000d6c <ssd1306_UpdateScreen+0x48>)
 8000d4e:	4413      	add	r3, r2
 8000d50:	2180      	movs	r1, #128	; 0x80
 8000d52:	4618      	mov	r0, r3
 8000d54:	f7ff ffaa 	bl	8000cac <ssd1306_WriteData>
    for(i = 0; i < 8; i++) {
 8000d58:	79fb      	ldrb	r3, [r7, #7]
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	71fb      	strb	r3, [r7, #7]
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	2b07      	cmp	r3, #7
 8000d62:	d9e5      	bls.n	8000d30 <ssd1306_UpdateScreen+0xc>
    }
}
 8000d64:	bf00      	nop
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	20000090 	.word	0x20000090

08000d70 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	71fb      	strb	r3, [r7, #7]
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	71bb      	strb	r3, [r7, #6]
 8000d7e:	4613      	mov	r3, r2
 8000d80:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	db48      	blt.n	8000e1c <ssd1306_DrawPixel+0xac>
 8000d8a:	79bb      	ldrb	r3, [r7, #6]
 8000d8c:	2b3f      	cmp	r3, #63	; 0x3f
 8000d8e:	d845      	bhi.n	8000e1c <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }

    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 8000d90:	4b25      	ldr	r3, [pc, #148]	; (8000e28 <ssd1306_DrawPixel+0xb8>)
 8000d92:	791b      	ldrb	r3, [r3, #4]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d006      	beq.n	8000da6 <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR)!color;
 8000d98:	797b      	ldrb	r3, [r7, #5]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	bf0c      	ite	eq
 8000d9e:	2301      	moveq	r3, #1
 8000da0:	2300      	movne	r3, #0
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	717b      	strb	r3, [r7, #5]
    }

    // Draw in the right color
    if(color == White) {
 8000da6:	797b      	ldrb	r3, [r7, #5]
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d11a      	bne.n	8000de2 <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000dac:	79fa      	ldrb	r2, [r7, #7]
 8000dae:	79bb      	ldrb	r3, [r7, #6]
 8000db0:	08db      	lsrs	r3, r3, #3
 8000db2:	b2d8      	uxtb	r0, r3
 8000db4:	4603      	mov	r3, r0
 8000db6:	01db      	lsls	r3, r3, #7
 8000db8:	4413      	add	r3, r2
 8000dba:	4a1c      	ldr	r2, [pc, #112]	; (8000e2c <ssd1306_DrawPixel+0xbc>)
 8000dbc:	5cd3      	ldrb	r3, [r2, r3]
 8000dbe:	b25a      	sxtb	r2, r3
 8000dc0:	79bb      	ldrb	r3, [r7, #6]
 8000dc2:	f003 0307 	and.w	r3, r3, #7
 8000dc6:	2101      	movs	r1, #1
 8000dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8000dcc:	b25b      	sxtb	r3, r3
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	b259      	sxtb	r1, r3
 8000dd2:	79fa      	ldrb	r2, [r7, #7]
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	01db      	lsls	r3, r3, #7
 8000dd8:	4413      	add	r3, r2
 8000dda:	b2c9      	uxtb	r1, r1
 8000ddc:	4a13      	ldr	r2, [pc, #76]	; (8000e2c <ssd1306_DrawPixel+0xbc>)
 8000dde:	54d1      	strb	r1, [r2, r3]
 8000de0:	e01d      	b.n	8000e1e <ssd1306_DrawPixel+0xae>
    } else {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000de2:	79fa      	ldrb	r2, [r7, #7]
 8000de4:	79bb      	ldrb	r3, [r7, #6]
 8000de6:	08db      	lsrs	r3, r3, #3
 8000de8:	b2d8      	uxtb	r0, r3
 8000dea:	4603      	mov	r3, r0
 8000dec:	01db      	lsls	r3, r3, #7
 8000dee:	4413      	add	r3, r2
 8000df0:	4a0e      	ldr	r2, [pc, #56]	; (8000e2c <ssd1306_DrawPixel+0xbc>)
 8000df2:	5cd3      	ldrb	r3, [r2, r3]
 8000df4:	b25a      	sxtb	r2, r3
 8000df6:	79bb      	ldrb	r3, [r7, #6]
 8000df8:	f003 0307 	and.w	r3, r3, #7
 8000dfc:	2101      	movs	r1, #1
 8000dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8000e02:	b25b      	sxtb	r3, r3
 8000e04:	43db      	mvns	r3, r3
 8000e06:	b25b      	sxtb	r3, r3
 8000e08:	4013      	ands	r3, r2
 8000e0a:	b259      	sxtb	r1, r3
 8000e0c:	79fa      	ldrb	r2, [r7, #7]
 8000e0e:	4603      	mov	r3, r0
 8000e10:	01db      	lsls	r3, r3, #7
 8000e12:	4413      	add	r3, r2
 8000e14:	b2c9      	uxtb	r1, r1
 8000e16:	4a05      	ldr	r2, [pc, #20]	; (8000e2c <ssd1306_DrawPixel+0xbc>)
 8000e18:	54d1      	strb	r1, [r2, r3]
 8000e1a:	e000      	b.n	8000e1e <ssd1306_DrawPixel+0xae>
        return;
 8000e1c:	bf00      	nop
    }
}
 8000e1e:	370c      	adds	r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr
 8000e28:	20000490 	.word	0x20000490
 8000e2c:	20000090 	.word	0x20000090

08000e30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e36:	4b0f      	ldr	r3, [pc, #60]	; (8000e74 <HAL_MspInit+0x44>)
 8000e38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e3a:	4a0e      	ldr	r2, [pc, #56]	; (8000e74 <HAL_MspInit+0x44>)
 8000e3c:	f043 0301 	orr.w	r3, r3, #1
 8000e40:	6613      	str	r3, [r2, #96]	; 0x60
 8000e42:	4b0c      	ldr	r3, [pc, #48]	; (8000e74 <HAL_MspInit+0x44>)
 8000e44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e46:	f003 0301 	and.w	r3, r3, #1
 8000e4a:	607b      	str	r3, [r7, #4]
 8000e4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e4e:	4b09      	ldr	r3, [pc, #36]	; (8000e74 <HAL_MspInit+0x44>)
 8000e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e52:	4a08      	ldr	r2, [pc, #32]	; (8000e74 <HAL_MspInit+0x44>)
 8000e54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e58:	6593      	str	r3, [r2, #88]	; 0x58
 8000e5a:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <HAL_MspInit+0x44>)
 8000e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e62:	603b      	str	r3, [r7, #0]
 8000e64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e66:	bf00      	nop
 8000e68:	370c      	adds	r7, #12
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	40021000 	.word	0x40021000

08000e78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b08a      	sub	sp, #40	; 0x28
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e80:	f107 0314 	add.w	r3, r7, #20
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
 8000e8c:	60da      	str	r2, [r3, #12]
 8000e8e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a18      	ldr	r2, [pc, #96]	; (8000ef8 <HAL_I2C_MspInit+0x80>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d129      	bne.n	8000eee <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9a:	4b18      	ldr	r3, [pc, #96]	; (8000efc <HAL_I2C_MspInit+0x84>)
 8000e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e9e:	4a17      	ldr	r2, [pc, #92]	; (8000efc <HAL_I2C_MspInit+0x84>)
 8000ea0:	f043 0301 	orr.w	r3, r3, #1
 8000ea4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ea6:	4b15      	ldr	r3, [pc, #84]	; (8000efc <HAL_I2C_MspInit+0x84>)
 8000ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eaa:	f003 0301 	and.w	r3, r3, #1
 8000eae:	613b      	str	r3, [r7, #16]
 8000eb0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000eb2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000eb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000eb8:	2312      	movs	r3, #18
 8000eba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ec4:	2304      	movs	r3, #4
 8000ec6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec8:	f107 0314 	add.w	r3, r7, #20
 8000ecc:	4619      	mov	r1, r3
 8000ece:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ed2:	f000 fa6f 	bl	80013b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ed6:	4b09      	ldr	r3, [pc, #36]	; (8000efc <HAL_I2C_MspInit+0x84>)
 8000ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eda:	4a08      	ldr	r2, [pc, #32]	; (8000efc <HAL_I2C_MspInit+0x84>)
 8000edc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ee0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ee2:	4b06      	ldr	r3, [pc, #24]	; (8000efc <HAL_I2C_MspInit+0x84>)
 8000ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ee6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000eee:	bf00      	nop
 8000ef0:	3728      	adds	r7, #40	; 0x28
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40005400 	.word	0x40005400
 8000efc:	40021000 	.word	0x40021000

08000f00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b08a      	sub	sp, #40	; 0x28
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f08:	f107 0314 	add.w	r3, r7, #20
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	609a      	str	r2, [r3, #8]
 8000f14:	60da      	str	r2, [r3, #12]
 8000f16:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a20      	ldr	r2, [pc, #128]	; (8000fa0 <HAL_UART_MspInit+0xa0>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d13a      	bne.n	8000f98 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f22:	4b20      	ldr	r3, [pc, #128]	; (8000fa4 <HAL_UART_MspInit+0xa4>)
 8000f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f26:	4a1f      	ldr	r2, [pc, #124]	; (8000fa4 <HAL_UART_MspInit+0xa4>)
 8000f28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f2c:	6593      	str	r3, [r2, #88]	; 0x58
 8000f2e:	4b1d      	ldr	r3, [pc, #116]	; (8000fa4 <HAL_UART_MspInit+0xa4>)
 8000f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f36:	613b      	str	r3, [r7, #16]
 8000f38:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3a:	4b1a      	ldr	r3, [pc, #104]	; (8000fa4 <HAL_UART_MspInit+0xa4>)
 8000f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f3e:	4a19      	ldr	r2, [pc, #100]	; (8000fa4 <HAL_UART_MspInit+0xa4>)
 8000f40:	f043 0301 	orr.w	r3, r3, #1
 8000f44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f46:	4b17      	ldr	r3, [pc, #92]	; (8000fa4 <HAL_UART_MspInit+0xa4>)
 8000f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f4a:	f003 0301 	and.w	r3, r3, #1
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000f52:	2304      	movs	r3, #4
 8000f54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f56:	2302      	movs	r3, #2
 8000f58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f5e:	2303      	movs	r3, #3
 8000f60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f62:	2307      	movs	r3, #7
 8000f64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000f66:	f107 0314 	add.w	r3, r7, #20
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f70:	f000 fa20 	bl	80013b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000f74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f82:	2303      	movs	r3, #3
 8000f84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000f86:	2303      	movs	r3, #3
 8000f88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000f8a:	f107 0314 	add.w	r3, r7, #20
 8000f8e:	4619      	mov	r1, r3
 8000f90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f94:	f000 fa0e 	bl	80013b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f98:	bf00      	nop
 8000f9a:	3728      	adds	r7, #40	; 0x28
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	40004400 	.word	0x40004400
 8000fa4:	40021000 	.word	0x40021000

08000fa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr

08000fb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fba:	e7fe      	b.n	8000fba <HardFault_Handler+0x4>

08000fbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fc0:	e7fe      	b.n	8000fc0 <MemManage_Handler+0x4>

08000fc2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fc6:	e7fe      	b.n	8000fc6 <BusFault_Handler+0x4>

08000fc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fcc:	e7fe      	b.n	8000fcc <UsageFault_Handler+0x4>

08000fce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr

08000fea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fea:	b480      	push	{r7}
 8000fec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ffc:	f000 f8b4 	bl	8001168 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001000:	bf00      	nop
 8001002:	bd80      	pop	{r7, pc}

08001004 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001008:	4b17      	ldr	r3, [pc, #92]	; (8001068 <SystemInit+0x64>)
 800100a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800100e:	4a16      	ldr	r2, [pc, #88]	; (8001068 <SystemInit+0x64>)
 8001010:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001014:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001018:	4b14      	ldr	r3, [pc, #80]	; (800106c <SystemInit+0x68>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a13      	ldr	r2, [pc, #76]	; (800106c <SystemInit+0x68>)
 800101e:	f043 0301 	orr.w	r3, r3, #1
 8001022:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001024:	4b11      	ldr	r3, [pc, #68]	; (800106c <SystemInit+0x68>)
 8001026:	2200      	movs	r2, #0
 8001028:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800102a:	4b10      	ldr	r3, [pc, #64]	; (800106c <SystemInit+0x68>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a0f      	ldr	r2, [pc, #60]	; (800106c <SystemInit+0x68>)
 8001030:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001034:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001038:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800103a:	4b0c      	ldr	r3, [pc, #48]	; (800106c <SystemInit+0x68>)
 800103c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001040:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001042:	4b0a      	ldr	r3, [pc, #40]	; (800106c <SystemInit+0x68>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a09      	ldr	r2, [pc, #36]	; (800106c <SystemInit+0x68>)
 8001048:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800104c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800104e:	4b07      	ldr	r3, [pc, #28]	; (800106c <SystemInit+0x68>)
 8001050:	2200      	movs	r2, #0
 8001052:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001054:	4b04      	ldr	r3, [pc, #16]	; (8001068 <SystemInit+0x64>)
 8001056:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800105a:	609a      	str	r2, [r3, #8]
#endif
}
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	e000ed00 	.word	0xe000ed00
 800106c:	40021000 	.word	0x40021000

08001070 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001070:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010a8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001074:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001076:	e003      	b.n	8001080 <LoopCopyDataInit>

08001078 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001078:	4b0c      	ldr	r3, [pc, #48]	; (80010ac <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800107a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800107c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800107e:	3104      	adds	r1, #4

08001080 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001080:	480b      	ldr	r0, [pc, #44]	; (80010b0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001082:	4b0c      	ldr	r3, [pc, #48]	; (80010b4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001084:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001086:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001088:	d3f6      	bcc.n	8001078 <CopyDataInit>
	ldr	r2, =_sbss
 800108a:	4a0b      	ldr	r2, [pc, #44]	; (80010b8 <LoopForever+0x12>)
	b	LoopFillZerobss
 800108c:	e002      	b.n	8001094 <LoopFillZerobss>

0800108e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800108e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001090:	f842 3b04 	str.w	r3, [r2], #4

08001094 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001094:	4b09      	ldr	r3, [pc, #36]	; (80010bc <LoopForever+0x16>)
	cmp	r2, r3
 8001096:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001098:	d3f9      	bcc.n	800108e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800109a:	f7ff ffb3 	bl	8001004 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800109e:	f002 fd43 	bl	8003b28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010a2:	f7ff fa23 	bl	80004ec <main>

080010a6 <LoopForever>:

LoopForever:
    b LoopForever
 80010a6:	e7fe      	b.n	80010a6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80010a8:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 80010ac:	08003c78 	.word	0x08003c78
	ldr	r0, =_sdata
 80010b0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80010b4:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80010b8:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80010bc:	20000568 	.word	0x20000568

080010c0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010c0:	e7fe      	b.n	80010c0 <ADC1_IRQHandler>

080010c2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b082      	sub	sp, #8
 80010c6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010c8:	2300      	movs	r3, #0
 80010ca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010cc:	2003      	movs	r0, #3
 80010ce:	f000 f93d 	bl	800134c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010d2:	2000      	movs	r0, #0
 80010d4:	f000 f80e 	bl	80010f4 <HAL_InitTick>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d002      	beq.n	80010e4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	71fb      	strb	r3, [r7, #7]
 80010e2:	e001      	b.n	80010e8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010e4:	f7ff fea4 	bl	8000e30 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010e8:	79fb      	ldrb	r3, [r7, #7]
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
	...

080010f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010fc:	2300      	movs	r3, #0
 80010fe:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001100:	4b16      	ldr	r3, [pc, #88]	; (800115c <HAL_InitTick+0x68>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d022      	beq.n	800114e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001108:	4b15      	ldr	r3, [pc, #84]	; (8001160 <HAL_InitTick+0x6c>)
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	4b13      	ldr	r3, [pc, #76]	; (800115c <HAL_InitTick+0x68>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001114:	fbb1 f3f3 	udiv	r3, r1, r3
 8001118:	fbb2 f3f3 	udiv	r3, r2, r3
 800111c:	4618      	mov	r0, r3
 800111e:	f000 f93c 	bl	800139a <HAL_SYSTICK_Config>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d10f      	bne.n	8001148 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2b0f      	cmp	r3, #15
 800112c:	d809      	bhi.n	8001142 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800112e:	2200      	movs	r2, #0
 8001130:	6879      	ldr	r1, [r7, #4]
 8001132:	f04f 30ff 	mov.w	r0, #4294967295
 8001136:	f000 f914 	bl	8001362 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800113a:	4a0a      	ldr	r2, [pc, #40]	; (8001164 <HAL_InitTick+0x70>)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6013      	str	r3, [r2, #0]
 8001140:	e007      	b.n	8001152 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	73fb      	strb	r3, [r7, #15]
 8001146:	e004      	b.n	8001152 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001148:	2301      	movs	r3, #1
 800114a:	73fb      	strb	r3, [r7, #15]
 800114c:	e001      	b.n	8001152 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001152:	7bfb      	ldrb	r3, [r7, #15]
}
 8001154:	4618      	mov	r0, r3
 8001156:	3710      	adds	r7, #16
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	20000008 	.word	0x20000008
 8001160:	20000000 	.word	0x20000000
 8001164:	20000004 	.word	0x20000004

08001168 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800116c:	4b05      	ldr	r3, [pc, #20]	; (8001184 <HAL_IncTick+0x1c>)
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	4b05      	ldr	r3, [pc, #20]	; (8001188 <HAL_IncTick+0x20>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4413      	add	r3, r2
 8001176:	4a03      	ldr	r2, [pc, #12]	; (8001184 <HAL_IncTick+0x1c>)
 8001178:	6013      	str	r3, [r2, #0]
}
 800117a:	bf00      	nop
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr
 8001184:	20000564 	.word	0x20000564
 8001188:	20000008 	.word	0x20000008

0800118c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  return uwTick;
 8001190:	4b03      	ldr	r3, [pc, #12]	; (80011a0 <HAL_GetTick+0x14>)
 8001192:	681b      	ldr	r3, [r3, #0]
}
 8001194:	4618      	mov	r0, r3
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	20000564 	.word	0x20000564

080011a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011ac:	f7ff ffee 	bl	800118c <HAL_GetTick>
 80011b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011bc:	d004      	beq.n	80011c8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80011be:	4b09      	ldr	r3, [pc, #36]	; (80011e4 <HAL_Delay+0x40>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	68fa      	ldr	r2, [r7, #12]
 80011c4:	4413      	add	r3, r2
 80011c6:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011c8:	bf00      	nop
 80011ca:	f7ff ffdf 	bl	800118c <HAL_GetTick>
 80011ce:	4602      	mov	r2, r0
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	1ad3      	subs	r3, r2, r3
 80011d4:	68fa      	ldr	r2, [r7, #12]
 80011d6:	429a      	cmp	r2, r3
 80011d8:	d8f7      	bhi.n	80011ca <HAL_Delay+0x26>
  {
  }
}
 80011da:	bf00      	nop
 80011dc:	3710      	adds	r7, #16
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	20000008 	.word	0x20000008

080011e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b085      	sub	sp, #20
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f003 0307 	and.w	r3, r3, #7
 80011f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011f8:	4b0c      	ldr	r3, [pc, #48]	; (800122c <__NVIC_SetPriorityGrouping+0x44>)
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011fe:	68ba      	ldr	r2, [r7, #8]
 8001200:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001204:	4013      	ands	r3, r2
 8001206:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001210:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001214:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001218:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800121a:	4a04      	ldr	r2, [pc, #16]	; (800122c <__NVIC_SetPriorityGrouping+0x44>)
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	60d3      	str	r3, [r2, #12]
}
 8001220:	bf00      	nop
 8001222:	3714      	adds	r7, #20
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr
 800122c:	e000ed00 	.word	0xe000ed00

08001230 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001234:	4b04      	ldr	r3, [pc, #16]	; (8001248 <__NVIC_GetPriorityGrouping+0x18>)
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	0a1b      	lsrs	r3, r3, #8
 800123a:	f003 0307 	and.w	r3, r3, #7
}
 800123e:	4618      	mov	r0, r3
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	e000ed00 	.word	0xe000ed00

0800124c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	6039      	str	r1, [r7, #0]
 8001256:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001258:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125c:	2b00      	cmp	r3, #0
 800125e:	db0a      	blt.n	8001276 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	b2da      	uxtb	r2, r3
 8001264:	490c      	ldr	r1, [pc, #48]	; (8001298 <__NVIC_SetPriority+0x4c>)
 8001266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126a:	0112      	lsls	r2, r2, #4
 800126c:	b2d2      	uxtb	r2, r2
 800126e:	440b      	add	r3, r1
 8001270:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001274:	e00a      	b.n	800128c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	b2da      	uxtb	r2, r3
 800127a:	4908      	ldr	r1, [pc, #32]	; (800129c <__NVIC_SetPriority+0x50>)
 800127c:	79fb      	ldrb	r3, [r7, #7]
 800127e:	f003 030f 	and.w	r3, r3, #15
 8001282:	3b04      	subs	r3, #4
 8001284:	0112      	lsls	r2, r2, #4
 8001286:	b2d2      	uxtb	r2, r2
 8001288:	440b      	add	r3, r1
 800128a:	761a      	strb	r2, [r3, #24]
}
 800128c:	bf00      	nop
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr
 8001298:	e000e100 	.word	0xe000e100
 800129c:	e000ed00 	.word	0xe000ed00

080012a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b089      	sub	sp, #36	; 0x24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	60f8      	str	r0, [r7, #12]
 80012a8:	60b9      	str	r1, [r7, #8]
 80012aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	f003 0307 	and.w	r3, r3, #7
 80012b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	f1c3 0307 	rsb	r3, r3, #7
 80012ba:	2b04      	cmp	r3, #4
 80012bc:	bf28      	it	cs
 80012be:	2304      	movcs	r3, #4
 80012c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	3304      	adds	r3, #4
 80012c6:	2b06      	cmp	r3, #6
 80012c8:	d902      	bls.n	80012d0 <NVIC_EncodePriority+0x30>
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	3b03      	subs	r3, #3
 80012ce:	e000      	b.n	80012d2 <NVIC_EncodePriority+0x32>
 80012d0:	2300      	movs	r3, #0
 80012d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d4:	f04f 32ff 	mov.w	r2, #4294967295
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	fa02 f303 	lsl.w	r3, r2, r3
 80012de:	43da      	mvns	r2, r3
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	401a      	ands	r2, r3
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012e8:	f04f 31ff 	mov.w	r1, #4294967295
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	fa01 f303 	lsl.w	r3, r1, r3
 80012f2:	43d9      	mvns	r1, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f8:	4313      	orrs	r3, r2
         );
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3724      	adds	r7, #36	; 0x24
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
	...

08001308 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	3b01      	subs	r3, #1
 8001314:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001318:	d301      	bcc.n	800131e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800131a:	2301      	movs	r3, #1
 800131c:	e00f      	b.n	800133e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800131e:	4a0a      	ldr	r2, [pc, #40]	; (8001348 <SysTick_Config+0x40>)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	3b01      	subs	r3, #1
 8001324:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001326:	210f      	movs	r1, #15
 8001328:	f04f 30ff 	mov.w	r0, #4294967295
 800132c:	f7ff ff8e 	bl	800124c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001330:	4b05      	ldr	r3, [pc, #20]	; (8001348 <SysTick_Config+0x40>)
 8001332:	2200      	movs	r2, #0
 8001334:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001336:	4b04      	ldr	r3, [pc, #16]	; (8001348 <SysTick_Config+0x40>)
 8001338:	2207      	movs	r2, #7
 800133a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800133c:	2300      	movs	r3, #0
}
 800133e:	4618      	mov	r0, r3
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	e000e010 	.word	0xe000e010

0800134c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f7ff ff47 	bl	80011e8 <__NVIC_SetPriorityGrouping>
}
 800135a:	bf00      	nop
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	b086      	sub	sp, #24
 8001366:	af00      	add	r7, sp, #0
 8001368:	4603      	mov	r3, r0
 800136a:	60b9      	str	r1, [r7, #8]
 800136c:	607a      	str	r2, [r7, #4]
 800136e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001370:	2300      	movs	r3, #0
 8001372:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001374:	f7ff ff5c 	bl	8001230 <__NVIC_GetPriorityGrouping>
 8001378:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	68b9      	ldr	r1, [r7, #8]
 800137e:	6978      	ldr	r0, [r7, #20]
 8001380:	f7ff ff8e 	bl	80012a0 <NVIC_EncodePriority>
 8001384:	4602      	mov	r2, r0
 8001386:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800138a:	4611      	mov	r1, r2
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff ff5d 	bl	800124c <__NVIC_SetPriority>
}
 8001392:	bf00      	nop
 8001394:	3718      	adds	r7, #24
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	b082      	sub	sp, #8
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f7ff ffb0 	bl	8001308 <SysTick_Config>
 80013a8:	4603      	mov	r3, r0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
	...

080013b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b087      	sub	sp, #28
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013be:	2300      	movs	r3, #0
 80013c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013c2:	e148      	b.n	8001656 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	2101      	movs	r1, #1
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	fa01 f303 	lsl.w	r3, r1, r3
 80013d0:	4013      	ands	r3, r2
 80013d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	f000 813a 	beq.w	8001650 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	d003      	beq.n	80013ec <HAL_GPIO_Init+0x38>
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	2b12      	cmp	r3, #18
 80013ea:	d123      	bne.n	8001434 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	08da      	lsrs	r2, r3, #3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	3208      	adds	r2, #8
 80013f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	f003 0307 	and.w	r3, r3, #7
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	220f      	movs	r2, #15
 8001404:	fa02 f303 	lsl.w	r3, r2, r3
 8001408:	43db      	mvns	r3, r3
 800140a:	693a      	ldr	r2, [r7, #16]
 800140c:	4013      	ands	r3, r2
 800140e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	691a      	ldr	r2, [r3, #16]
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	f003 0307 	and.w	r3, r3, #7
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	693a      	ldr	r2, [r7, #16]
 8001422:	4313      	orrs	r3, r2
 8001424:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	08da      	lsrs	r2, r3, #3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	3208      	adds	r2, #8
 800142e:	6939      	ldr	r1, [r7, #16]
 8001430:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	2203      	movs	r2, #3
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	43db      	mvns	r3, r3
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	4013      	ands	r3, r2
 800144a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f003 0203 	and.w	r2, r3, #3
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	005b      	lsls	r3, r3, #1
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	693a      	ldr	r2, [r7, #16]
 800145e:	4313      	orrs	r3, r2
 8001460:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	693a      	ldr	r2, [r7, #16]
 8001466:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	2b01      	cmp	r3, #1
 800146e:	d00b      	beq.n	8001488 <HAL_GPIO_Init+0xd4>
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	2b02      	cmp	r3, #2
 8001476:	d007      	beq.n	8001488 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800147c:	2b11      	cmp	r3, #17
 800147e:	d003      	beq.n	8001488 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	2b12      	cmp	r3, #18
 8001486:	d130      	bne.n	80014ea <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	2203      	movs	r2, #3
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	43db      	mvns	r3, r3
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	4013      	ands	r3, r2
 800149e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	68da      	ldr	r2, [r3, #12]
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	693a      	ldr	r2, [r7, #16]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	693a      	ldr	r2, [r7, #16]
 80014b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014be:	2201      	movs	r2, #1
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	fa02 f303 	lsl.w	r3, r2, r3
 80014c6:	43db      	mvns	r3, r3
 80014c8:	693a      	ldr	r2, [r7, #16]
 80014ca:	4013      	ands	r3, r2
 80014cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	091b      	lsrs	r3, r3, #4
 80014d4:	f003 0201 	and.w	r2, r3, #1
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	fa02 f303 	lsl.w	r3, r2, r3
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	693a      	ldr	r2, [r7, #16]
 80014e8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	68db      	ldr	r3, [r3, #12]
 80014ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	2203      	movs	r2, #3
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	43db      	mvns	r3, r3
 80014fc:	693a      	ldr	r2, [r7, #16]
 80014fe:	4013      	ands	r3, r2
 8001500:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	689a      	ldr	r2, [r3, #8]
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	4313      	orrs	r3, r2
 8001512:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	693a      	ldr	r2, [r7, #16]
 8001518:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001522:	2b00      	cmp	r3, #0
 8001524:	f000 8094 	beq.w	8001650 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001528:	4b52      	ldr	r3, [pc, #328]	; (8001674 <HAL_GPIO_Init+0x2c0>)
 800152a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800152c:	4a51      	ldr	r2, [pc, #324]	; (8001674 <HAL_GPIO_Init+0x2c0>)
 800152e:	f043 0301 	orr.w	r3, r3, #1
 8001532:	6613      	str	r3, [r2, #96]	; 0x60
 8001534:	4b4f      	ldr	r3, [pc, #316]	; (8001674 <HAL_GPIO_Init+0x2c0>)
 8001536:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001538:	f003 0301 	and.w	r3, r3, #1
 800153c:	60bb      	str	r3, [r7, #8]
 800153e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001540:	4a4d      	ldr	r2, [pc, #308]	; (8001678 <HAL_GPIO_Init+0x2c4>)
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	089b      	lsrs	r3, r3, #2
 8001546:	3302      	adds	r3, #2
 8001548:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800154c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	f003 0303 	and.w	r3, r3, #3
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	220f      	movs	r2, #15
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	43db      	mvns	r3, r3
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	4013      	ands	r3, r2
 8001562:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800156a:	d00d      	beq.n	8001588 <HAL_GPIO_Init+0x1d4>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	4a43      	ldr	r2, [pc, #268]	; (800167c <HAL_GPIO_Init+0x2c8>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d007      	beq.n	8001584 <HAL_GPIO_Init+0x1d0>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	4a42      	ldr	r2, [pc, #264]	; (8001680 <HAL_GPIO_Init+0x2cc>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d101      	bne.n	8001580 <HAL_GPIO_Init+0x1cc>
 800157c:	2302      	movs	r3, #2
 800157e:	e004      	b.n	800158a <HAL_GPIO_Init+0x1d6>
 8001580:	2307      	movs	r3, #7
 8001582:	e002      	b.n	800158a <HAL_GPIO_Init+0x1d6>
 8001584:	2301      	movs	r3, #1
 8001586:	e000      	b.n	800158a <HAL_GPIO_Init+0x1d6>
 8001588:	2300      	movs	r3, #0
 800158a:	697a      	ldr	r2, [r7, #20]
 800158c:	f002 0203 	and.w	r2, r2, #3
 8001590:	0092      	lsls	r2, r2, #2
 8001592:	4093      	lsls	r3, r2
 8001594:	693a      	ldr	r2, [r7, #16]
 8001596:	4313      	orrs	r3, r2
 8001598:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800159a:	4937      	ldr	r1, [pc, #220]	; (8001678 <HAL_GPIO_Init+0x2c4>)
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	089b      	lsrs	r3, r3, #2
 80015a0:	3302      	adds	r3, #2
 80015a2:	693a      	ldr	r2, [r7, #16]
 80015a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80015a8:	4b36      	ldr	r3, [pc, #216]	; (8001684 <HAL_GPIO_Init+0x2d0>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	43db      	mvns	r3, r3
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	4013      	ands	r3, r2
 80015b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d003      	beq.n	80015cc <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80015c4:	693a      	ldr	r2, [r7, #16]
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80015cc:	4a2d      	ldr	r2, [pc, #180]	; (8001684 <HAL_GPIO_Init+0x2d0>)
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80015d2:	4b2c      	ldr	r3, [pc, #176]	; (8001684 <HAL_GPIO_Init+0x2d0>)
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	43db      	mvns	r3, r3
 80015dc:	693a      	ldr	r2, [r7, #16]
 80015de:	4013      	ands	r3, r2
 80015e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d003      	beq.n	80015f6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80015f6:	4a23      	ldr	r2, [pc, #140]	; (8001684 <HAL_GPIO_Init+0x2d0>)
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015fc:	4b21      	ldr	r3, [pc, #132]	; (8001684 <HAL_GPIO_Init+0x2d0>)
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	43db      	mvns	r3, r3
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	4013      	ands	r3, r2
 800160a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d003      	beq.n	8001620 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001618:	693a      	ldr	r2, [r7, #16]
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	4313      	orrs	r3, r2
 800161e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001620:	4a18      	ldr	r2, [pc, #96]	; (8001684 <HAL_GPIO_Init+0x2d0>)
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001626:	4b17      	ldr	r3, [pc, #92]	; (8001684 <HAL_GPIO_Init+0x2d0>)
 8001628:	68db      	ldr	r3, [r3, #12]
 800162a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	43db      	mvns	r3, r3
 8001630:	693a      	ldr	r2, [r7, #16]
 8001632:	4013      	ands	r3, r2
 8001634:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d003      	beq.n	800164a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	4313      	orrs	r3, r2
 8001648:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800164a:	4a0e      	ldr	r2, [pc, #56]	; (8001684 <HAL_GPIO_Init+0x2d0>)
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	3301      	adds	r3, #1
 8001654:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	fa22 f303 	lsr.w	r3, r2, r3
 8001660:	2b00      	cmp	r3, #0
 8001662:	f47f aeaf 	bne.w	80013c4 <HAL_GPIO_Init+0x10>
  }
}
 8001666:	bf00      	nop
 8001668:	371c      	adds	r7, #28
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	40021000 	.word	0x40021000
 8001678:	40010000 	.word	0x40010000
 800167c:	48000400 	.word	0x48000400
 8001680:	48000800 	.word	0x48000800
 8001684:	40010400 	.word	0x40010400

08001688 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	460b      	mov	r3, r1
 8001692:	807b      	strh	r3, [r7, #2]
 8001694:	4613      	mov	r3, r2
 8001696:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001698:	787b      	ldrb	r3, [r7, #1]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d003      	beq.n	80016a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800169e:	887a      	ldrh	r2, [r7, #2]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016a4:	e002      	b.n	80016ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016a6:	887a      	ldrh	r2, [r7, #2]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80016ac:	bf00      	nop
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d101      	bne.n	80016ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e081      	b.n	80017ce <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d106      	bne.n	80016e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2200      	movs	r2, #0
 80016da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f7ff fbca 	bl	8000e78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2224      	movs	r2, #36	; 0x24
 80016e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f022 0201 	bic.w	r2, r2, #1
 80016fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685a      	ldr	r2, [r3, #4]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001708:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	689a      	ldr	r2, [r3, #8]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001718:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	68db      	ldr	r3, [r3, #12]
 800171e:	2b01      	cmp	r3, #1
 8001720:	d107      	bne.n	8001732 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	689a      	ldr	r2, [r3, #8]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800172e:	609a      	str	r2, [r3, #8]
 8001730:	e006      	b.n	8001740 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	689a      	ldr	r2, [r3, #8]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800173e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	2b02      	cmp	r3, #2
 8001746:	d104      	bne.n	8001752 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001750:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	6812      	ldr	r2, [r2, #0]
 800175c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001760:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001764:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	68da      	ldr	r2, [r3, #12]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001774:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	691a      	ldr	r2, [r3, #16]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	695b      	ldr	r3, [r3, #20]
 800177e:	ea42 0103 	orr.w	r1, r2, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	699b      	ldr	r3, [r3, #24]
 8001786:	021a      	lsls	r2, r3, #8
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	430a      	orrs	r2, r1
 800178e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	69d9      	ldr	r1, [r3, #28]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6a1a      	ldr	r2, [r3, #32]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	430a      	orrs	r2, r1
 800179e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f042 0201 	orr.w	r2, r2, #1
 80017ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2200      	movs	r2, #0
 80017b4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2220      	movs	r2, #32
 80017ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2200      	movs	r2, #0
 80017c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2200      	movs	r2, #0
 80017c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80017cc:	2300      	movs	r3, #0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
	...

080017d8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b088      	sub	sp, #32
 80017dc:	af02      	add	r7, sp, #8
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	4608      	mov	r0, r1
 80017e2:	4611      	mov	r1, r2
 80017e4:	461a      	mov	r2, r3
 80017e6:	4603      	mov	r3, r0
 80017e8:	817b      	strh	r3, [r7, #10]
 80017ea:	460b      	mov	r3, r1
 80017ec:	813b      	strh	r3, [r7, #8]
 80017ee:	4613      	mov	r3, r2
 80017f0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	2b20      	cmp	r3, #32
 80017fc:	f040 80f9 	bne.w	80019f2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001800:	6a3b      	ldr	r3, [r7, #32]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d002      	beq.n	800180c <HAL_I2C_Mem_Write+0x34>
 8001806:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001808:	2b00      	cmp	r3, #0
 800180a:	d105      	bne.n	8001818 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001812:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e0ed      	b.n	80019f4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800181e:	2b01      	cmp	r3, #1
 8001820:	d101      	bne.n	8001826 <HAL_I2C_Mem_Write+0x4e>
 8001822:	2302      	movs	r3, #2
 8001824:	e0e6      	b.n	80019f4 <HAL_I2C_Mem_Write+0x21c>
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	2201      	movs	r2, #1
 800182a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800182e:	f7ff fcad 	bl	800118c <HAL_GetTick>
 8001832:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	9300      	str	r3, [sp, #0]
 8001838:	2319      	movs	r3, #25
 800183a:	2201      	movs	r2, #1
 800183c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001840:	68f8      	ldr	r0, [r7, #12]
 8001842:	f000 f955 	bl	8001af0 <I2C_WaitOnFlagUntilTimeout>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e0d1      	b.n	80019f4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	2221      	movs	r2, #33	; 0x21
 8001854:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2240      	movs	r2, #64	; 0x40
 800185c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	2200      	movs	r2, #0
 8001864:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	6a3a      	ldr	r2, [r7, #32]
 800186a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001870:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	2200      	movs	r2, #0
 8001876:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001878:	88f8      	ldrh	r0, [r7, #6]
 800187a:	893a      	ldrh	r2, [r7, #8]
 800187c:	8979      	ldrh	r1, [r7, #10]
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	9301      	str	r3, [sp, #4]
 8001882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001884:	9300      	str	r3, [sp, #0]
 8001886:	4603      	mov	r3, r0
 8001888:	68f8      	ldr	r0, [r7, #12]
 800188a:	f000 f8b9 	bl	8001a00 <I2C_RequestMemoryWrite>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d005      	beq.n	80018a0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	2200      	movs	r2, #0
 8001898:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e0a9      	b.n	80019f4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018a4:	b29b      	uxth	r3, r3
 80018a6:	2bff      	cmp	r3, #255	; 0xff
 80018a8:	d90e      	bls.n	80018c8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	22ff      	movs	r2, #255	; 0xff
 80018ae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018b4:	b2da      	uxtb	r2, r3
 80018b6:	8979      	ldrh	r1, [r7, #10]
 80018b8:	2300      	movs	r3, #0
 80018ba:	9300      	str	r3, [sp, #0]
 80018bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80018c0:	68f8      	ldr	r0, [r7, #12]
 80018c2:	f000 fa37 	bl	8001d34 <I2C_TransferConfig>
 80018c6:	e00f      	b.n	80018e8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018cc:	b29a      	uxth	r2, r3
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018d6:	b2da      	uxtb	r2, r3
 80018d8:	8979      	ldrh	r1, [r7, #10]
 80018da:	2300      	movs	r3, #0
 80018dc:	9300      	str	r3, [sp, #0]
 80018de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018e2:	68f8      	ldr	r0, [r7, #12]
 80018e4:	f000 fa26 	bl	8001d34 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018e8:	697a      	ldr	r2, [r7, #20]
 80018ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80018ec:	68f8      	ldr	r0, [r7, #12]
 80018ee:	f000 f93f 	bl	8001b70 <I2C_WaitOnTXISFlagUntilTimeout>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e07b      	b.n	80019f4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001900:	781a      	ldrb	r2, [r3, #0]
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190c:	1c5a      	adds	r2, r3, #1
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001916:	b29b      	uxth	r3, r3
 8001918:	3b01      	subs	r3, #1
 800191a:	b29a      	uxth	r2, r3
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001924:	3b01      	subs	r3, #1
 8001926:	b29a      	uxth	r2, r3
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001930:	b29b      	uxth	r3, r3
 8001932:	2b00      	cmp	r3, #0
 8001934:	d034      	beq.n	80019a0 <HAL_I2C_Mem_Write+0x1c8>
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800193a:	2b00      	cmp	r3, #0
 800193c:	d130      	bne.n	80019a0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	9300      	str	r3, [sp, #0]
 8001942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001944:	2200      	movs	r2, #0
 8001946:	2180      	movs	r1, #128	; 0x80
 8001948:	68f8      	ldr	r0, [r7, #12]
 800194a:	f000 f8d1 	bl	8001af0 <I2C_WaitOnFlagUntilTimeout>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e04d      	b.n	80019f4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800195c:	b29b      	uxth	r3, r3
 800195e:	2bff      	cmp	r3, #255	; 0xff
 8001960:	d90e      	bls.n	8001980 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	22ff      	movs	r2, #255	; 0xff
 8001966:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800196c:	b2da      	uxtb	r2, r3
 800196e:	8979      	ldrh	r1, [r7, #10]
 8001970:	2300      	movs	r3, #0
 8001972:	9300      	str	r3, [sp, #0]
 8001974:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001978:	68f8      	ldr	r0, [r7, #12]
 800197a:	f000 f9db 	bl	8001d34 <I2C_TransferConfig>
 800197e:	e00f      	b.n	80019a0 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001984:	b29a      	uxth	r2, r3
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800198e:	b2da      	uxtb	r2, r3
 8001990:	8979      	ldrh	r1, [r7, #10]
 8001992:	2300      	movs	r3, #0
 8001994:	9300      	str	r3, [sp, #0]
 8001996:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800199a:	68f8      	ldr	r0, [r7, #12]
 800199c:	f000 f9ca 	bl	8001d34 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d19e      	bne.n	80018e8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019aa:	697a      	ldr	r2, [r7, #20]
 80019ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80019ae:	68f8      	ldr	r0, [r7, #12]
 80019b0:	f000 f91e 	bl	8001bf0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e01a      	b.n	80019f4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2220      	movs	r2, #32
 80019c4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	6859      	ldr	r1, [r3, #4]
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	4b0a      	ldr	r3, [pc, #40]	; (80019fc <HAL_I2C_Mem_Write+0x224>)
 80019d2:	400b      	ands	r3, r1
 80019d4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	2220      	movs	r2, #32
 80019da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	2200      	movs	r2, #0
 80019e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	2200      	movs	r2, #0
 80019ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80019ee:	2300      	movs	r3, #0
 80019f0:	e000      	b.n	80019f4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80019f2:	2302      	movs	r3, #2
  }
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3718      	adds	r7, #24
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	fe00e800 	.word	0xfe00e800

08001a00 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b086      	sub	sp, #24
 8001a04:	af02      	add	r7, sp, #8
 8001a06:	60f8      	str	r0, [r7, #12]
 8001a08:	4608      	mov	r0, r1
 8001a0a:	4611      	mov	r1, r2
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	4603      	mov	r3, r0
 8001a10:	817b      	strh	r3, [r7, #10]
 8001a12:	460b      	mov	r3, r1
 8001a14:	813b      	strh	r3, [r7, #8]
 8001a16:	4613      	mov	r3, r2
 8001a18:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001a1a:	88fb      	ldrh	r3, [r7, #6]
 8001a1c:	b2da      	uxtb	r2, r3
 8001a1e:	8979      	ldrh	r1, [r7, #10]
 8001a20:	4b20      	ldr	r3, [pc, #128]	; (8001aa4 <I2C_RequestMemoryWrite+0xa4>)
 8001a22:	9300      	str	r3, [sp, #0]
 8001a24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a28:	68f8      	ldr	r0, [r7, #12]
 8001a2a:	f000 f983 	bl	8001d34 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a2e:	69fa      	ldr	r2, [r7, #28]
 8001a30:	69b9      	ldr	r1, [r7, #24]
 8001a32:	68f8      	ldr	r0, [r7, #12]
 8001a34:	f000 f89c 	bl	8001b70 <I2C_WaitOnTXISFlagUntilTimeout>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e02c      	b.n	8001a9c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001a42:	88fb      	ldrh	r3, [r7, #6]
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d105      	bne.n	8001a54 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001a48:	893b      	ldrh	r3, [r7, #8]
 8001a4a:	b2da      	uxtb	r2, r3
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	629a      	str	r2, [r3, #40]	; 0x28
 8001a52:	e015      	b.n	8001a80 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001a54:	893b      	ldrh	r3, [r7, #8]
 8001a56:	0a1b      	lsrs	r3, r3, #8
 8001a58:	b29b      	uxth	r3, r3
 8001a5a:	b2da      	uxtb	r2, r3
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a62:	69fa      	ldr	r2, [r7, #28]
 8001a64:	69b9      	ldr	r1, [r7, #24]
 8001a66:	68f8      	ldr	r0, [r7, #12]
 8001a68:	f000 f882 	bl	8001b70 <I2C_WaitOnTXISFlagUntilTimeout>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e012      	b.n	8001a9c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001a76:	893b      	ldrh	r3, [r7, #8]
 8001a78:	b2da      	uxtb	r2, r3
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	9300      	str	r3, [sp, #0]
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	2200      	movs	r2, #0
 8001a88:	2180      	movs	r1, #128	; 0x80
 8001a8a:	68f8      	ldr	r0, [r7, #12]
 8001a8c:	f000 f830 	bl	8001af0 <I2C_WaitOnFlagUntilTimeout>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e000      	b.n	8001a9c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001a9a:	2300      	movs	r3, #0
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3710      	adds	r7, #16
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	80002000 	.word	0x80002000

08001aa8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	699b      	ldr	r3, [r3, #24]
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d103      	bne.n	8001ac6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	699b      	ldr	r3, [r3, #24]
 8001acc:	f003 0301 	and.w	r3, r3, #1
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d007      	beq.n	8001ae4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	699a      	ldr	r2, [r3, #24]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f042 0201 	orr.w	r2, r2, #1
 8001ae2:	619a      	str	r2, [r3, #24]
  }
}
 8001ae4:	bf00      	nop
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	60f8      	str	r0, [r7, #12]
 8001af8:	60b9      	str	r1, [r7, #8]
 8001afa:	603b      	str	r3, [r7, #0]
 8001afc:	4613      	mov	r3, r2
 8001afe:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b00:	e022      	b.n	8001b48 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b08:	d01e      	beq.n	8001b48 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b0a:	f7ff fb3f 	bl	800118c <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	683a      	ldr	r2, [r7, #0]
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d302      	bcc.n	8001b20 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d113      	bne.n	8001b48 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b24:	f043 0220 	orr.w	r2, r3, #32
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2220      	movs	r2, #32
 8001b30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2200      	movs	r2, #0
 8001b38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e00f      	b.n	8001b68 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	699a      	ldr	r2, [r3, #24]
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	4013      	ands	r3, r2
 8001b52:	68ba      	ldr	r2, [r7, #8]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	bf0c      	ite	eq
 8001b58:	2301      	moveq	r3, #1
 8001b5a:	2300      	movne	r3, #0
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	461a      	mov	r2, r3
 8001b60:	79fb      	ldrb	r3, [r7, #7]
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d0cd      	beq.n	8001b02 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001b66:	2300      	movs	r3, #0
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3710      	adds	r7, #16
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001b7c:	e02c      	b.n	8001bd8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	68b9      	ldr	r1, [r7, #8]
 8001b82:	68f8      	ldr	r0, [r7, #12]
 8001b84:	f000 f870 	bl	8001c68 <I2C_IsAcknowledgeFailed>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e02a      	b.n	8001be8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b98:	d01e      	beq.n	8001bd8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b9a:	f7ff faf7 	bl	800118c <HAL_GetTick>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	68ba      	ldr	r2, [r7, #8]
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d302      	bcc.n	8001bb0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d113      	bne.n	8001bd8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb4:	f043 0220 	orr.w	r2, r3, #32
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2220      	movs	r2, #32
 8001bc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e007      	b.n	8001be8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	699b      	ldr	r3, [r3, #24]
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d1cb      	bne.n	8001b7e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001be6:	2300      	movs	r3, #0
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3710      	adds	r7, #16
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001bfc:	e028      	b.n	8001c50 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	68b9      	ldr	r1, [r7, #8]
 8001c02:	68f8      	ldr	r0, [r7, #12]
 8001c04:	f000 f830 	bl	8001c68 <I2C_IsAcknowledgeFailed>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e026      	b.n	8001c60 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c12:	f7ff fabb 	bl	800118c <HAL_GetTick>
 8001c16:	4602      	mov	r2, r0
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	68ba      	ldr	r2, [r7, #8]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d302      	bcc.n	8001c28 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d113      	bne.n	8001c50 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c2c:	f043 0220 	orr.w	r2, r3, #32
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2220      	movs	r2, #32
 8001c38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2200      	movs	r2, #0
 8001c48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e007      	b.n	8001c60 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	699b      	ldr	r3, [r3, #24]
 8001c56:	f003 0320 	and.w	r3, r3, #32
 8001c5a:	2b20      	cmp	r3, #32
 8001c5c:	d1cf      	bne.n	8001bfe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001c5e:	2300      	movs	r3, #0
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3710      	adds	r7, #16
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	699b      	ldr	r3, [r3, #24]
 8001c7a:	f003 0310 	and.w	r3, r3, #16
 8001c7e:	2b10      	cmp	r3, #16
 8001c80:	d151      	bne.n	8001d26 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c82:	e022      	b.n	8001cca <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c8a:	d01e      	beq.n	8001cca <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c8c:	f7ff fa7e 	bl	800118c <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	68ba      	ldr	r2, [r7, #8]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d302      	bcc.n	8001ca2 <I2C_IsAcknowledgeFailed+0x3a>
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d113      	bne.n	8001cca <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca6:	f043 0220 	orr.w	r2, r3, #32
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2220      	movs	r2, #32
 8001cb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e02e      	b.n	8001d28 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	699b      	ldr	r3, [r3, #24]
 8001cd0:	f003 0320 	and.w	r3, r3, #32
 8001cd4:	2b20      	cmp	r3, #32
 8001cd6:	d1d5      	bne.n	8001c84 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2210      	movs	r2, #16
 8001cde:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2220      	movs	r2, #32
 8001ce6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001ce8:	68f8      	ldr	r0, [r7, #12]
 8001cea:	f7ff fedd 	bl	8001aa8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	6859      	ldr	r1, [r3, #4]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	4b0d      	ldr	r3, [pc, #52]	; (8001d30 <I2C_IsAcknowledgeFailed+0xc8>)
 8001cfa:	400b      	ands	r3, r1
 8001cfc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d02:	f043 0204 	orr.w	r2, r3, #4
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2220      	movs	r2, #32
 8001d0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2200      	movs	r2, #0
 8001d16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e000      	b.n	8001d28 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8001d26:	2300      	movs	r3, #0
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3710      	adds	r7, #16
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	fe00e800 	.word	0xfe00e800

08001d34 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b085      	sub	sp, #20
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	607b      	str	r3, [r7, #4]
 8001d3e:	460b      	mov	r3, r1
 8001d40:	817b      	strh	r3, [r7, #10]
 8001d42:	4613      	mov	r3, r2
 8001d44:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	685a      	ldr	r2, [r3, #4]
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	0d5b      	lsrs	r3, r3, #21
 8001d50:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001d54:	4b0d      	ldr	r3, [pc, #52]	; (8001d8c <I2C_TransferConfig+0x58>)
 8001d56:	430b      	orrs	r3, r1
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	ea02 0103 	and.w	r1, r2, r3
 8001d5e:	897b      	ldrh	r3, [r7, #10]
 8001d60:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001d64:	7a7b      	ldrb	r3, [r7, #9]
 8001d66:	041b      	lsls	r3, r3, #16
 8001d68:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001d6c:	431a      	orrs	r2, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	431a      	orrs	r2, r3
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	431a      	orrs	r2, r3
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	430a      	orrs	r2, r1
 8001d7c:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001d7e:	bf00      	nop
 8001d80:	3714      	adds	r7, #20
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	03ff63ff 	.word	0x03ff63ff

08001d90 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	2b20      	cmp	r3, #32
 8001da4:	d138      	bne.n	8001e18 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d101      	bne.n	8001db4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001db0:	2302      	movs	r3, #2
 8001db2:	e032      	b.n	8001e1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2201      	movs	r2, #1
 8001db8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2224      	movs	r2, #36	; 0x24
 8001dc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f022 0201 	bic.w	r2, r2, #1
 8001dd2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001de2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	6819      	ldr	r1, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	683a      	ldr	r2, [r7, #0]
 8001df0:	430a      	orrs	r2, r1
 8001df2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f042 0201 	orr.w	r2, r2, #1
 8001e02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2220      	movs	r2, #32
 8001e08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e14:	2300      	movs	r3, #0
 8001e16:	e000      	b.n	8001e1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001e18:	2302      	movs	r3, #2
  }
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr

08001e26 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001e26:	b480      	push	{r7}
 8001e28:	b085      	sub	sp, #20
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
 8001e2e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	2b20      	cmp	r3, #32
 8001e3a:	d139      	bne.n	8001eb0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d101      	bne.n	8001e4a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001e46:	2302      	movs	r3, #2
 8001e48:	e033      	b.n	8001eb2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2224      	movs	r2, #36	; 0x24
 8001e56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f022 0201 	bic.w	r2, r2, #1
 8001e68:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001e78:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	021b      	lsls	r3, r3, #8
 8001e7e:	68fa      	ldr	r2, [r7, #12]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	68fa      	ldr	r2, [r7, #12]
 8001e8a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f042 0201 	orr.w	r2, r2, #1
 8001e9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2220      	movs	r2, #32
 8001ea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001eac:	2300      	movs	r3, #0
 8001eae:	e000      	b.n	8001eb2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001eb0:	2302      	movs	r3, #2
  }
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3714      	adds	r7, #20
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
	...

08001ec0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ec4:	4b05      	ldr	r3, [pc, #20]	; (8001edc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a04      	ldr	r2, [pc, #16]	; (8001edc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001eca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ece:	6013      	str	r3, [r2, #0]
}
 8001ed0:	bf00      	nop
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	40007000 	.word	0x40007000

08001ee0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001ee4:	4b04      	ldr	r3, [pc, #16]	; (8001ef8 <HAL_PWREx_GetVoltageRange+0x18>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	40007000 	.word	0x40007000

08001efc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f0a:	d130      	bne.n	8001f6e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f0c:	4b23      	ldr	r3, [pc, #140]	; (8001f9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f18:	d038      	beq.n	8001f8c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f1a:	4b20      	ldr	r3, [pc, #128]	; (8001f9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f22:	4a1e      	ldr	r2, [pc, #120]	; (8001f9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f24:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f28:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001f2a:	4b1d      	ldr	r3, [pc, #116]	; (8001fa0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2232      	movs	r2, #50	; 0x32
 8001f30:	fb02 f303 	mul.w	r3, r2, r3
 8001f34:	4a1b      	ldr	r2, [pc, #108]	; (8001fa4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001f36:	fba2 2303 	umull	r2, r3, r2, r3
 8001f3a:	0c9b      	lsrs	r3, r3, #18
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f40:	e002      	b.n	8001f48 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	3b01      	subs	r3, #1
 8001f46:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f48:	4b14      	ldr	r3, [pc, #80]	; (8001f9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f4a:	695b      	ldr	r3, [r3, #20]
 8001f4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f54:	d102      	bne.n	8001f5c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d1f2      	bne.n	8001f42 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f5c:	4b0f      	ldr	r3, [pc, #60]	; (8001f9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f5e:	695b      	ldr	r3, [r3, #20]
 8001f60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f68:	d110      	bne.n	8001f8c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e00f      	b.n	8001f8e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f6e:	4b0b      	ldr	r3, [pc, #44]	; (8001f9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f7a:	d007      	beq.n	8001f8c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001f7c:	4b07      	ldr	r3, [pc, #28]	; (8001f9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f84:	4a05      	ldr	r2, [pc, #20]	; (8001f9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f8a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3714      	adds	r7, #20
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	40007000 	.word	0x40007000
 8001fa0:	20000000 	.word	0x20000000
 8001fa4:	431bde83 	.word	0x431bde83

08001fa8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b088      	sub	sp, #32
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d101      	bne.n	8001fba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e3db      	b.n	8002772 <HAL_RCC_OscConfig+0x7ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fba:	4ba4      	ldr	r3, [pc, #656]	; (800224c <HAL_RCC_OscConfig+0x2a4>)
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	f003 030c 	and.w	r3, r3, #12
 8001fc2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fc4:	4ba1      	ldr	r3, [pc, #644]	; (800224c <HAL_RCC_OscConfig+0x2a4>)
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	f003 0303 	and.w	r3, r3, #3
 8001fcc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0310 	and.w	r3, r3, #16
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	f000 80e1 	beq.w	800219e <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d007      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x4a>
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	2b0c      	cmp	r3, #12
 8001fe6:	f040 8088 	bne.w	80020fa <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	f040 8084 	bne.w	80020fa <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ff2:	4b96      	ldr	r3, [pc, #600]	; (800224c <HAL_RCC_OscConfig+0x2a4>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0302 	and.w	r3, r3, #2
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d005      	beq.n	800200a <HAL_RCC_OscConfig+0x62>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	699b      	ldr	r3, [r3, #24]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d101      	bne.n	800200a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e3b3      	b.n	8002772 <HAL_RCC_OscConfig+0x7ca>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6a1a      	ldr	r2, [r3, #32]
 800200e:	4b8f      	ldr	r3, [pc, #572]	; (800224c <HAL_RCC_OscConfig+0x2a4>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0308 	and.w	r3, r3, #8
 8002016:	2b00      	cmp	r3, #0
 8002018:	d004      	beq.n	8002024 <HAL_RCC_OscConfig+0x7c>
 800201a:	4b8c      	ldr	r3, [pc, #560]	; (800224c <HAL_RCC_OscConfig+0x2a4>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002022:	e005      	b.n	8002030 <HAL_RCC_OscConfig+0x88>
 8002024:	4b89      	ldr	r3, [pc, #548]	; (800224c <HAL_RCC_OscConfig+0x2a4>)
 8002026:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800202a:	091b      	lsrs	r3, r3, #4
 800202c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002030:	4293      	cmp	r3, r2
 8002032:	d223      	bcs.n	800207c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6a1b      	ldr	r3, [r3, #32]
 8002038:	4618      	mov	r0, r3
 800203a:	f000 fd47 	bl	8002acc <RCC_SetFlashLatencyFromMSIRange>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e394      	b.n	8002772 <HAL_RCC_OscConfig+0x7ca>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002048:	4b80      	ldr	r3, [pc, #512]	; (800224c <HAL_RCC_OscConfig+0x2a4>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a7f      	ldr	r2, [pc, #508]	; (800224c <HAL_RCC_OscConfig+0x2a4>)
 800204e:	f043 0308 	orr.w	r3, r3, #8
 8002052:	6013      	str	r3, [r2, #0]
 8002054:	4b7d      	ldr	r3, [pc, #500]	; (800224c <HAL_RCC_OscConfig+0x2a4>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6a1b      	ldr	r3, [r3, #32]
 8002060:	497a      	ldr	r1, [pc, #488]	; (800224c <HAL_RCC_OscConfig+0x2a4>)
 8002062:	4313      	orrs	r3, r2
 8002064:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002066:	4b79      	ldr	r3, [pc, #484]	; (800224c <HAL_RCC_OscConfig+0x2a4>)
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	69db      	ldr	r3, [r3, #28]
 8002072:	021b      	lsls	r3, r3, #8
 8002074:	4975      	ldr	r1, [pc, #468]	; (800224c <HAL_RCC_OscConfig+0x2a4>)
 8002076:	4313      	orrs	r3, r2
 8002078:	604b      	str	r3, [r1, #4]
 800207a:	e022      	b.n	80020c2 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800207c:	4b73      	ldr	r3, [pc, #460]	; (800224c <HAL_RCC_OscConfig+0x2a4>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a72      	ldr	r2, [pc, #456]	; (800224c <HAL_RCC_OscConfig+0x2a4>)
 8002082:	f043 0308 	orr.w	r3, r3, #8
 8002086:	6013      	str	r3, [r2, #0]
 8002088:	4b70      	ldr	r3, [pc, #448]	; (800224c <HAL_RCC_OscConfig+0x2a4>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6a1b      	ldr	r3, [r3, #32]
 8002094:	496d      	ldr	r1, [pc, #436]	; (800224c <HAL_RCC_OscConfig+0x2a4>)
 8002096:	4313      	orrs	r3, r2
 8002098:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800209a:	4b6c      	ldr	r3, [pc, #432]	; (800224c <HAL_RCC_OscConfig+0x2a4>)
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	69db      	ldr	r3, [r3, #28]
 80020a6:	021b      	lsls	r3, r3, #8
 80020a8:	4968      	ldr	r1, [pc, #416]	; (800224c <HAL_RCC_OscConfig+0x2a4>)
 80020aa:	4313      	orrs	r3, r2
 80020ac:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6a1b      	ldr	r3, [r3, #32]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f000 fd0a 	bl	8002acc <RCC_SetFlashLatencyFromMSIRange>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e357      	b.n	8002772 <HAL_RCC_OscConfig+0x7ca>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80020c2:	f000 fc41 	bl	8002948 <HAL_RCC_GetSysClockFreq>
 80020c6:	4601      	mov	r1, r0
 80020c8:	4b60      	ldr	r3, [pc, #384]	; (800224c <HAL_RCC_OscConfig+0x2a4>)
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	091b      	lsrs	r3, r3, #4
 80020ce:	f003 030f 	and.w	r3, r3, #15
 80020d2:	4a5f      	ldr	r2, [pc, #380]	; (8002250 <HAL_RCC_OscConfig+0x2a8>)
 80020d4:	5cd3      	ldrb	r3, [r2, r3]
 80020d6:	f003 031f 	and.w	r3, r3, #31
 80020da:	fa21 f303 	lsr.w	r3, r1, r3
 80020de:	4a5d      	ldr	r2, [pc, #372]	; (8002254 <HAL_RCC_OscConfig+0x2ac>)
 80020e0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80020e2:	4b5d      	ldr	r3, [pc, #372]	; (8002258 <HAL_RCC_OscConfig+0x2b0>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7ff f804 	bl	80010f4 <HAL_InitTick>
 80020ec:	4603      	mov	r3, r0
 80020ee:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80020f0:	7bfb      	ldrb	r3, [r7, #15]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d052      	beq.n	800219c <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 80020f6:	7bfb      	ldrb	r3, [r7, #15]
 80020f8:	e33b      	b.n	8002772 <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	699b      	ldr	r3, [r3, #24]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d032      	beq.n	8002168 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002102:	4b52      	ldr	r3, [pc, #328]	; (800224c <HAL_RCC_OscConfig+0x2a4>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a51      	ldr	r2, [pc, #324]	; (800224c <HAL_RCC_OscConfig+0x2a4>)
 8002108:	f043 0301 	orr.w	r3, r3, #1
 800210c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800210e:	f7ff f83d 	bl	800118c <HAL_GetTick>
 8002112:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002114:	e008      	b.n	8002128 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002116:	f7ff f839 	bl	800118c <HAL_GetTick>
 800211a:	4602      	mov	r2, r0
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	2b02      	cmp	r3, #2
 8002122:	d901      	bls.n	8002128 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e324      	b.n	8002772 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002128:	4b48      	ldr	r3, [pc, #288]	; (800224c <HAL_RCC_OscConfig+0x2a4>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0302 	and.w	r3, r3, #2
 8002130:	2b00      	cmp	r3, #0
 8002132:	d0f0      	beq.n	8002116 <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002134:	4b45      	ldr	r3, [pc, #276]	; (800224c <HAL_RCC_OscConfig+0x2a4>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a44      	ldr	r2, [pc, #272]	; (800224c <HAL_RCC_OscConfig+0x2a4>)
 800213a:	f043 0308 	orr.w	r3, r3, #8
 800213e:	6013      	str	r3, [r2, #0]
 8002140:	4b42      	ldr	r3, [pc, #264]	; (800224c <HAL_RCC_OscConfig+0x2a4>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6a1b      	ldr	r3, [r3, #32]
 800214c:	493f      	ldr	r1, [pc, #252]	; (800224c <HAL_RCC_OscConfig+0x2a4>)
 800214e:	4313      	orrs	r3, r2
 8002150:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002152:	4b3e      	ldr	r3, [pc, #248]	; (800224c <HAL_RCC_OscConfig+0x2a4>)
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	69db      	ldr	r3, [r3, #28]
 800215e:	021b      	lsls	r3, r3, #8
 8002160:	493a      	ldr	r1, [pc, #232]	; (800224c <HAL_RCC_OscConfig+0x2a4>)
 8002162:	4313      	orrs	r3, r2
 8002164:	604b      	str	r3, [r1, #4]
 8002166:	e01a      	b.n	800219e <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002168:	4b38      	ldr	r3, [pc, #224]	; (800224c <HAL_RCC_OscConfig+0x2a4>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a37      	ldr	r2, [pc, #220]	; (800224c <HAL_RCC_OscConfig+0x2a4>)
 800216e:	f023 0301 	bic.w	r3, r3, #1
 8002172:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002174:	f7ff f80a 	bl	800118c <HAL_GetTick>
 8002178:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800217a:	e008      	b.n	800218e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800217c:	f7ff f806 	bl	800118c <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	2b02      	cmp	r3, #2
 8002188:	d901      	bls.n	800218e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e2f1      	b.n	8002772 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800218e:	4b2f      	ldr	r3, [pc, #188]	; (800224c <HAL_RCC_OscConfig+0x2a4>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	2b00      	cmp	r3, #0
 8002198:	d1f0      	bne.n	800217c <HAL_RCC_OscConfig+0x1d4>
 800219a:	e000      	b.n	800219e <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800219c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d074      	beq.n	8002294 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	2b08      	cmp	r3, #8
 80021ae:	d005      	beq.n	80021bc <HAL_RCC_OscConfig+0x214>
 80021b0:	69bb      	ldr	r3, [r7, #24]
 80021b2:	2b0c      	cmp	r3, #12
 80021b4:	d10e      	bne.n	80021d4 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	2b03      	cmp	r3, #3
 80021ba:	d10b      	bne.n	80021d4 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021bc:	4b23      	ldr	r3, [pc, #140]	; (800224c <HAL_RCC_OscConfig+0x2a4>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d064      	beq.n	8002292 <HAL_RCC_OscConfig+0x2ea>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d160      	bne.n	8002292 <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e2ce      	b.n	8002772 <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021dc:	d106      	bne.n	80021ec <HAL_RCC_OscConfig+0x244>
 80021de:	4b1b      	ldr	r3, [pc, #108]	; (800224c <HAL_RCC_OscConfig+0x2a4>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a1a      	ldr	r2, [pc, #104]	; (800224c <HAL_RCC_OscConfig+0x2a4>)
 80021e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021e8:	6013      	str	r3, [r2, #0]
 80021ea:	e01d      	b.n	8002228 <HAL_RCC_OscConfig+0x280>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021f4:	d10c      	bne.n	8002210 <HAL_RCC_OscConfig+0x268>
 80021f6:	4b15      	ldr	r3, [pc, #84]	; (800224c <HAL_RCC_OscConfig+0x2a4>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a14      	ldr	r2, [pc, #80]	; (800224c <HAL_RCC_OscConfig+0x2a4>)
 80021fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002200:	6013      	str	r3, [r2, #0]
 8002202:	4b12      	ldr	r3, [pc, #72]	; (800224c <HAL_RCC_OscConfig+0x2a4>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a11      	ldr	r2, [pc, #68]	; (800224c <HAL_RCC_OscConfig+0x2a4>)
 8002208:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800220c:	6013      	str	r3, [r2, #0]
 800220e:	e00b      	b.n	8002228 <HAL_RCC_OscConfig+0x280>
 8002210:	4b0e      	ldr	r3, [pc, #56]	; (800224c <HAL_RCC_OscConfig+0x2a4>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a0d      	ldr	r2, [pc, #52]	; (800224c <HAL_RCC_OscConfig+0x2a4>)
 8002216:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800221a:	6013      	str	r3, [r2, #0]
 800221c:	4b0b      	ldr	r3, [pc, #44]	; (800224c <HAL_RCC_OscConfig+0x2a4>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a0a      	ldr	r2, [pc, #40]	; (800224c <HAL_RCC_OscConfig+0x2a4>)
 8002222:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002226:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d01c      	beq.n	800226a <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002230:	f7fe ffac 	bl	800118c <HAL_GetTick>
 8002234:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002236:	e011      	b.n	800225c <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002238:	f7fe ffa8 	bl	800118c <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	2b64      	cmp	r3, #100	; 0x64
 8002244:	d90a      	bls.n	800225c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e293      	b.n	8002772 <HAL_RCC_OscConfig+0x7ca>
 800224a:	bf00      	nop
 800224c:	40021000 	.word	0x40021000
 8002250:	08003c20 	.word	0x08003c20
 8002254:	20000000 	.word	0x20000000
 8002258:	20000004 	.word	0x20000004
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800225c:	4bae      	ldr	r3, [pc, #696]	; (8002518 <HAL_RCC_OscConfig+0x570>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d0e7      	beq.n	8002238 <HAL_RCC_OscConfig+0x290>
 8002268:	e014      	b.n	8002294 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800226a:	f7fe ff8f 	bl	800118c <HAL_GetTick>
 800226e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002270:	e008      	b.n	8002284 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002272:	f7fe ff8b 	bl	800118c <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	2b64      	cmp	r3, #100	; 0x64
 800227e:	d901      	bls.n	8002284 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8002280:	2303      	movs	r3, #3
 8002282:	e276      	b.n	8002772 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002284:	4ba4      	ldr	r3, [pc, #656]	; (8002518 <HAL_RCC_OscConfig+0x570>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d1f0      	bne.n	8002272 <HAL_RCC_OscConfig+0x2ca>
 8002290:	e000      	b.n	8002294 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002292:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0302 	and.w	r3, r3, #2
 800229c:	2b00      	cmp	r3, #0
 800229e:	d060      	beq.n	8002362 <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	2b04      	cmp	r3, #4
 80022a4:	d005      	beq.n	80022b2 <HAL_RCC_OscConfig+0x30a>
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	2b0c      	cmp	r3, #12
 80022aa:	d119      	bne.n	80022e0 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d116      	bne.n	80022e0 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022b2:	4b99      	ldr	r3, [pc, #612]	; (8002518 <HAL_RCC_OscConfig+0x570>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d005      	beq.n	80022ca <HAL_RCC_OscConfig+0x322>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d101      	bne.n	80022ca <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e253      	b.n	8002772 <HAL_RCC_OscConfig+0x7ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ca:	4b93      	ldr	r3, [pc, #588]	; (8002518 <HAL_RCC_OscConfig+0x570>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	691b      	ldr	r3, [r3, #16]
 80022d6:	061b      	lsls	r3, r3, #24
 80022d8:	498f      	ldr	r1, [pc, #572]	; (8002518 <HAL_RCC_OscConfig+0x570>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022de:	e040      	b.n	8002362 <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d023      	beq.n	8002330 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022e8:	4b8b      	ldr	r3, [pc, #556]	; (8002518 <HAL_RCC_OscConfig+0x570>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a8a      	ldr	r2, [pc, #552]	; (8002518 <HAL_RCC_OscConfig+0x570>)
 80022ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f4:	f7fe ff4a 	bl	800118c <HAL_GetTick>
 80022f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022fa:	e008      	b.n	800230e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022fc:	f7fe ff46 	bl	800118c <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	2b02      	cmp	r3, #2
 8002308:	d901      	bls.n	800230e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e231      	b.n	8002772 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800230e:	4b82      	ldr	r3, [pc, #520]	; (8002518 <HAL_RCC_OscConfig+0x570>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002316:	2b00      	cmp	r3, #0
 8002318:	d0f0      	beq.n	80022fc <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800231a:	4b7f      	ldr	r3, [pc, #508]	; (8002518 <HAL_RCC_OscConfig+0x570>)
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	691b      	ldr	r3, [r3, #16]
 8002326:	061b      	lsls	r3, r3, #24
 8002328:	497b      	ldr	r1, [pc, #492]	; (8002518 <HAL_RCC_OscConfig+0x570>)
 800232a:	4313      	orrs	r3, r2
 800232c:	604b      	str	r3, [r1, #4]
 800232e:	e018      	b.n	8002362 <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002330:	4b79      	ldr	r3, [pc, #484]	; (8002518 <HAL_RCC_OscConfig+0x570>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a78      	ldr	r2, [pc, #480]	; (8002518 <HAL_RCC_OscConfig+0x570>)
 8002336:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800233a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800233c:	f7fe ff26 	bl	800118c <HAL_GetTick>
 8002340:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002342:	e008      	b.n	8002356 <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002344:	f7fe ff22 	bl	800118c <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	2b02      	cmp	r3, #2
 8002350:	d901      	bls.n	8002356 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e20d      	b.n	8002772 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002356:	4b70      	ldr	r3, [pc, #448]	; (8002518 <HAL_RCC_OscConfig+0x570>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800235e:	2b00      	cmp	r3, #0
 8002360:	d1f0      	bne.n	8002344 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0308 	and.w	r3, r3, #8
 800236a:	2b00      	cmp	r3, #0
 800236c:	d03c      	beq.n	80023e8 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	695b      	ldr	r3, [r3, #20]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d01c      	beq.n	80023b0 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002376:	4b68      	ldr	r3, [pc, #416]	; (8002518 <HAL_RCC_OscConfig+0x570>)
 8002378:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800237c:	4a66      	ldr	r2, [pc, #408]	; (8002518 <HAL_RCC_OscConfig+0x570>)
 800237e:	f043 0301 	orr.w	r3, r3, #1
 8002382:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002386:	f7fe ff01 	bl	800118c <HAL_GetTick>
 800238a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800238c:	e008      	b.n	80023a0 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800238e:	f7fe fefd 	bl	800118c <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	2b02      	cmp	r3, #2
 800239a:	d901      	bls.n	80023a0 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	e1e8      	b.n	8002772 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023a0:	4b5d      	ldr	r3, [pc, #372]	; (8002518 <HAL_RCC_OscConfig+0x570>)
 80023a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d0ef      	beq.n	800238e <HAL_RCC_OscConfig+0x3e6>
 80023ae:	e01b      	b.n	80023e8 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023b0:	4b59      	ldr	r3, [pc, #356]	; (8002518 <HAL_RCC_OscConfig+0x570>)
 80023b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023b6:	4a58      	ldr	r2, [pc, #352]	; (8002518 <HAL_RCC_OscConfig+0x570>)
 80023b8:	f023 0301 	bic.w	r3, r3, #1
 80023bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023c0:	f7fe fee4 	bl	800118c <HAL_GetTick>
 80023c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023c6:	e008      	b.n	80023da <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023c8:	f7fe fee0 	bl	800118c <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e1cb      	b.n	8002772 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023da:	4b4f      	ldr	r3, [pc, #316]	; (8002518 <HAL_RCC_OscConfig+0x570>)
 80023dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023e0:	f003 0302 	and.w	r3, r3, #2
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d1ef      	bne.n	80023c8 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0304 	and.w	r3, r3, #4
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	f000 80a5 	beq.w	8002540 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023f6:	2300      	movs	r3, #0
 80023f8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80023fa:	4b47      	ldr	r3, [pc, #284]	; (8002518 <HAL_RCC_OscConfig+0x570>)
 80023fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d10d      	bne.n	8002422 <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002406:	4b44      	ldr	r3, [pc, #272]	; (8002518 <HAL_RCC_OscConfig+0x570>)
 8002408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800240a:	4a43      	ldr	r2, [pc, #268]	; (8002518 <HAL_RCC_OscConfig+0x570>)
 800240c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002410:	6593      	str	r3, [r2, #88]	; 0x58
 8002412:	4b41      	ldr	r3, [pc, #260]	; (8002518 <HAL_RCC_OscConfig+0x570>)
 8002414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800241a:	60bb      	str	r3, [r7, #8]
 800241c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800241e:	2301      	movs	r3, #1
 8002420:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002422:	4b3e      	ldr	r3, [pc, #248]	; (800251c <HAL_RCC_OscConfig+0x574>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800242a:	2b00      	cmp	r3, #0
 800242c:	d118      	bne.n	8002460 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800242e:	4b3b      	ldr	r3, [pc, #236]	; (800251c <HAL_RCC_OscConfig+0x574>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a3a      	ldr	r2, [pc, #232]	; (800251c <HAL_RCC_OscConfig+0x574>)
 8002434:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002438:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800243a:	f7fe fea7 	bl	800118c <HAL_GetTick>
 800243e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002440:	e008      	b.n	8002454 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002442:	f7fe fea3 	bl	800118c <HAL_GetTick>
 8002446:	4602      	mov	r2, r0
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	2b02      	cmp	r3, #2
 800244e:	d901      	bls.n	8002454 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e18e      	b.n	8002772 <HAL_RCC_OscConfig+0x7ca>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002454:	4b31      	ldr	r3, [pc, #196]	; (800251c <HAL_RCC_OscConfig+0x574>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800245c:	2b00      	cmp	r3, #0
 800245e:	d0f0      	beq.n	8002442 <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	2b01      	cmp	r3, #1
 8002466:	d108      	bne.n	800247a <HAL_RCC_OscConfig+0x4d2>
 8002468:	4b2b      	ldr	r3, [pc, #172]	; (8002518 <HAL_RCC_OscConfig+0x570>)
 800246a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800246e:	4a2a      	ldr	r2, [pc, #168]	; (8002518 <HAL_RCC_OscConfig+0x570>)
 8002470:	f043 0301 	orr.w	r3, r3, #1
 8002474:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002478:	e024      	b.n	80024c4 <HAL_RCC_OscConfig+0x51c>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	2b05      	cmp	r3, #5
 8002480:	d110      	bne.n	80024a4 <HAL_RCC_OscConfig+0x4fc>
 8002482:	4b25      	ldr	r3, [pc, #148]	; (8002518 <HAL_RCC_OscConfig+0x570>)
 8002484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002488:	4a23      	ldr	r2, [pc, #140]	; (8002518 <HAL_RCC_OscConfig+0x570>)
 800248a:	f043 0304 	orr.w	r3, r3, #4
 800248e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002492:	4b21      	ldr	r3, [pc, #132]	; (8002518 <HAL_RCC_OscConfig+0x570>)
 8002494:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002498:	4a1f      	ldr	r2, [pc, #124]	; (8002518 <HAL_RCC_OscConfig+0x570>)
 800249a:	f043 0301 	orr.w	r3, r3, #1
 800249e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024a2:	e00f      	b.n	80024c4 <HAL_RCC_OscConfig+0x51c>
 80024a4:	4b1c      	ldr	r3, [pc, #112]	; (8002518 <HAL_RCC_OscConfig+0x570>)
 80024a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024aa:	4a1b      	ldr	r2, [pc, #108]	; (8002518 <HAL_RCC_OscConfig+0x570>)
 80024ac:	f023 0301 	bic.w	r3, r3, #1
 80024b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024b4:	4b18      	ldr	r3, [pc, #96]	; (8002518 <HAL_RCC_OscConfig+0x570>)
 80024b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ba:	4a17      	ldr	r2, [pc, #92]	; (8002518 <HAL_RCC_OscConfig+0x570>)
 80024bc:	f023 0304 	bic.w	r3, r3, #4
 80024c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d016      	beq.n	80024fa <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024cc:	f7fe fe5e 	bl	800118c <HAL_GetTick>
 80024d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024d2:	e00a      	b.n	80024ea <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024d4:	f7fe fe5a 	bl	800118c <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	f241 3288 	movw	r2, #5000	; 0x1388
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e143      	b.n	8002772 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024ea:	4b0b      	ldr	r3, [pc, #44]	; (8002518 <HAL_RCC_OscConfig+0x570>)
 80024ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024f0:	f003 0302 	and.w	r3, r3, #2
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d0ed      	beq.n	80024d4 <HAL_RCC_OscConfig+0x52c>
 80024f8:	e019      	b.n	800252e <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024fa:	f7fe fe47 	bl	800118c <HAL_GetTick>
 80024fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002500:	e00e      	b.n	8002520 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002502:	f7fe fe43 	bl	800118c <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002510:	4293      	cmp	r3, r2
 8002512:	d905      	bls.n	8002520 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	e12c      	b.n	8002772 <HAL_RCC_OscConfig+0x7ca>
 8002518:	40021000 	.word	0x40021000
 800251c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002520:	4b96      	ldr	r3, [pc, #600]	; (800277c <HAL_RCC_OscConfig+0x7d4>)
 8002522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	2b00      	cmp	r3, #0
 800252c:	d1e9      	bne.n	8002502 <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800252e:	7ffb      	ldrb	r3, [r7, #31]
 8002530:	2b01      	cmp	r3, #1
 8002532:	d105      	bne.n	8002540 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002534:	4b91      	ldr	r3, [pc, #580]	; (800277c <HAL_RCC_OscConfig+0x7d4>)
 8002536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002538:	4a90      	ldr	r2, [pc, #576]	; (800277c <HAL_RCC_OscConfig+0x7d4>)
 800253a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800253e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0320 	and.w	r3, r3, #32
 8002548:	2b00      	cmp	r3, #0
 800254a:	d03c      	beq.n	80025c6 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002550:	2b00      	cmp	r3, #0
 8002552:	d01c      	beq.n	800258e <HAL_RCC_OscConfig+0x5e6>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002554:	4b89      	ldr	r3, [pc, #548]	; (800277c <HAL_RCC_OscConfig+0x7d4>)
 8002556:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800255a:	4a88      	ldr	r2, [pc, #544]	; (800277c <HAL_RCC_OscConfig+0x7d4>)
 800255c:	f043 0301 	orr.w	r3, r3, #1
 8002560:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002564:	f7fe fe12 	bl	800118c <HAL_GetTick>
 8002568:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800256a:	e008      	b.n	800257e <HAL_RCC_OscConfig+0x5d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800256c:	f7fe fe0e 	bl	800118c <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b02      	cmp	r3, #2
 8002578:	d901      	bls.n	800257e <HAL_RCC_OscConfig+0x5d6>
        {
          return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e0f9      	b.n	8002772 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800257e:	4b7f      	ldr	r3, [pc, #508]	; (800277c <HAL_RCC_OscConfig+0x7d4>)
 8002580:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002584:	f003 0302 	and.w	r3, r3, #2
 8002588:	2b00      	cmp	r3, #0
 800258a:	d0ef      	beq.n	800256c <HAL_RCC_OscConfig+0x5c4>
 800258c:	e01b      	b.n	80025c6 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800258e:	4b7b      	ldr	r3, [pc, #492]	; (800277c <HAL_RCC_OscConfig+0x7d4>)
 8002590:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002594:	4a79      	ldr	r2, [pc, #484]	; (800277c <HAL_RCC_OscConfig+0x7d4>)
 8002596:	f023 0301 	bic.w	r3, r3, #1
 800259a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800259e:	f7fe fdf5 	bl	800118c <HAL_GetTick>
 80025a2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80025a4:	e008      	b.n	80025b8 <HAL_RCC_OscConfig+0x610>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025a6:	f7fe fdf1 	bl	800118c <HAL_GetTick>
 80025aa:	4602      	mov	r2, r0
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d901      	bls.n	80025b8 <HAL_RCC_OscConfig+0x610>
        {
          return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e0dc      	b.n	8002772 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80025b8:	4b70      	ldr	r3, [pc, #448]	; (800277c <HAL_RCC_OscConfig+0x7d4>)
 80025ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025be:	f003 0302 	and.w	r3, r3, #2
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d1ef      	bne.n	80025a6 <HAL_RCC_OscConfig+0x5fe>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	f000 80d0 	beq.w	8002770 <HAL_RCC_OscConfig+0x7c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	2b0c      	cmp	r3, #12
 80025d4:	f000 808d 	beq.w	80026f2 <HAL_RCC_OscConfig+0x74a>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d15a      	bne.n	8002696 <HAL_RCC_OscConfig+0x6ee>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025e0:	4b66      	ldr	r3, [pc, #408]	; (800277c <HAL_RCC_OscConfig+0x7d4>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a65      	ldr	r2, [pc, #404]	; (800277c <HAL_RCC_OscConfig+0x7d4>)
 80025e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ec:	f7fe fdce 	bl	800118c <HAL_GetTick>
 80025f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025f2:	e008      	b.n	8002606 <HAL_RCC_OscConfig+0x65e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025f4:	f7fe fdca 	bl	800118c <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x65e>
          {
            return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e0b5      	b.n	8002772 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002606:	4b5d      	ldr	r3, [pc, #372]	; (800277c <HAL_RCC_OscConfig+0x7d4>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1f0      	bne.n	80025f4 <HAL_RCC_OscConfig+0x64c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002612:	4b5a      	ldr	r3, [pc, #360]	; (800277c <HAL_RCC_OscConfig+0x7d4>)
 8002614:	68da      	ldr	r2, [r3, #12]
 8002616:	4b5a      	ldr	r3, [pc, #360]	; (8002780 <HAL_RCC_OscConfig+0x7d8>)
 8002618:	4013      	ands	r3, r2
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002622:	3a01      	subs	r2, #1
 8002624:	0112      	lsls	r2, r2, #4
 8002626:	4311      	orrs	r1, r2
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800262c:	0212      	lsls	r2, r2, #8
 800262e:	4311      	orrs	r1, r2
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002634:	0852      	lsrs	r2, r2, #1
 8002636:	3a01      	subs	r2, #1
 8002638:	0552      	lsls	r2, r2, #21
 800263a:	4311      	orrs	r1, r2
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002640:	0852      	lsrs	r2, r2, #1
 8002642:	3a01      	subs	r2, #1
 8002644:	0652      	lsls	r2, r2, #25
 8002646:	4311      	orrs	r1, r2
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800264c:	06d2      	lsls	r2, r2, #27
 800264e:	430a      	orrs	r2, r1
 8002650:	494a      	ldr	r1, [pc, #296]	; (800277c <HAL_RCC_OscConfig+0x7d4>)
 8002652:	4313      	orrs	r3, r2
 8002654:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002656:	4b49      	ldr	r3, [pc, #292]	; (800277c <HAL_RCC_OscConfig+0x7d4>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a48      	ldr	r2, [pc, #288]	; (800277c <HAL_RCC_OscConfig+0x7d4>)
 800265c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002660:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002662:	4b46      	ldr	r3, [pc, #280]	; (800277c <HAL_RCC_OscConfig+0x7d4>)
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	4a45      	ldr	r2, [pc, #276]	; (800277c <HAL_RCC_OscConfig+0x7d4>)
 8002668:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800266c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800266e:	f7fe fd8d 	bl	800118c <HAL_GetTick>
 8002672:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002674:	e008      	b.n	8002688 <HAL_RCC_OscConfig+0x6e0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002676:	f7fe fd89 	bl	800118c <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	2b02      	cmp	r3, #2
 8002682:	d901      	bls.n	8002688 <HAL_RCC_OscConfig+0x6e0>
          {
            return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e074      	b.n	8002772 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002688:	4b3c      	ldr	r3, [pc, #240]	; (800277c <HAL_RCC_OscConfig+0x7d4>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d0f0      	beq.n	8002676 <HAL_RCC_OscConfig+0x6ce>
 8002694:	e06c      	b.n	8002770 <HAL_RCC_OscConfig+0x7c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002696:	4b39      	ldr	r3, [pc, #228]	; (800277c <HAL_RCC_OscConfig+0x7d4>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a38      	ldr	r2, [pc, #224]	; (800277c <HAL_RCC_OscConfig+0x7d4>)
 800269c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026a0:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80026a2:	4b36      	ldr	r3, [pc, #216]	; (800277c <HAL_RCC_OscConfig+0x7d4>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d105      	bne.n	80026ba <HAL_RCC_OscConfig+0x712>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80026ae:	4b33      	ldr	r3, [pc, #204]	; (800277c <HAL_RCC_OscConfig+0x7d4>)
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	4a32      	ldr	r2, [pc, #200]	; (800277c <HAL_RCC_OscConfig+0x7d4>)
 80026b4:	f023 0303 	bic.w	r3, r3, #3
 80026b8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80026ba:	4b30      	ldr	r3, [pc, #192]	; (800277c <HAL_RCC_OscConfig+0x7d4>)
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	4a2f      	ldr	r2, [pc, #188]	; (800277c <HAL_RCC_OscConfig+0x7d4>)
 80026c0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80026c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026c8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ca:	f7fe fd5f 	bl	800118c <HAL_GetTick>
 80026ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026d0:	e008      	b.n	80026e4 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026d2:	f7fe fd5b 	bl	800118c <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d901      	bls.n	80026e4 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e046      	b.n	8002772 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026e4:	4b25      	ldr	r3, [pc, #148]	; (800277c <HAL_RCC_OscConfig+0x7d4>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d1f0      	bne.n	80026d2 <HAL_RCC_OscConfig+0x72a>
 80026f0:	e03e      	b.n	8002770 <HAL_RCC_OscConfig+0x7c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d101      	bne.n	80026fe <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e039      	b.n	8002772 <HAL_RCC_OscConfig+0x7ca>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 80026fe:	4b1f      	ldr	r3, [pc, #124]	; (800277c <HAL_RCC_OscConfig+0x7d4>)
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	f003 0203 	and.w	r2, r3, #3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800270e:	429a      	cmp	r2, r3
 8002710:	d12c      	bne.n	800276c <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271c:	3b01      	subs	r3, #1
 800271e:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002720:	429a      	cmp	r2, r3
 8002722:	d123      	bne.n	800276c <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800272e:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002730:	429a      	cmp	r2, r3
 8002732:	d11b      	bne.n	800276c <HAL_RCC_OscConfig+0x7c4>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800273e:	06db      	lsls	r3, r3, #27
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002740:	429a      	cmp	r2, r3
 8002742:	d113      	bne.n	800276c <HAL_RCC_OscConfig+0x7c4>
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800274e:	085b      	lsrs	r3, r3, #1
 8002750:	3b01      	subs	r3, #1
 8002752:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002754:	429a      	cmp	r2, r3
 8002756:	d109      	bne.n	800276c <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002762:	085b      	lsrs	r3, r3, #1
 8002764:	3b01      	subs	r3, #1
 8002766:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002768:	429a      	cmp	r2, r3
 800276a:	d001      	beq.n	8002770 <HAL_RCC_OscConfig+0x7c8>
        {
          return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e000      	b.n	8002772 <HAL_RCC_OscConfig+0x7ca>
        }
      }
    }
  }
  return HAL_OK;
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3720      	adds	r7, #32
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	40021000 	.word	0x40021000
 8002780:	019d808c 	.word	0x019d808c

08002784 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d101      	bne.n	8002798 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e0c8      	b.n	800292a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002798:	4b66      	ldr	r3, [pc, #408]	; (8002934 <HAL_RCC_ClockConfig+0x1b0>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0307 	and.w	r3, r3, #7
 80027a0:	683a      	ldr	r2, [r7, #0]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d910      	bls.n	80027c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027a6:	4b63      	ldr	r3, [pc, #396]	; (8002934 <HAL_RCC_ClockConfig+0x1b0>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f023 0207 	bic.w	r2, r3, #7
 80027ae:	4961      	ldr	r1, [pc, #388]	; (8002934 <HAL_RCC_ClockConfig+0x1b0>)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027b6:	4b5f      	ldr	r3, [pc, #380]	; (8002934 <HAL_RCC_ClockConfig+0x1b0>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0307 	and.w	r3, r3, #7
 80027be:	683a      	ldr	r2, [r7, #0]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d001      	beq.n	80027c8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e0b0      	b.n	800292a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0301 	and.w	r3, r3, #1
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d04c      	beq.n	800286e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	2b03      	cmp	r3, #3
 80027da:	d107      	bne.n	80027ec <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027dc:	4b56      	ldr	r3, [pc, #344]	; (8002938 <HAL_RCC_ClockConfig+0x1b4>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d121      	bne.n	800282c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e09e      	b.n	800292a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d107      	bne.n	8002804 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027f4:	4b50      	ldr	r3, [pc, #320]	; (8002938 <HAL_RCC_ClockConfig+0x1b4>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d115      	bne.n	800282c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e092      	b.n	800292a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d107      	bne.n	800281c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800280c:	4b4a      	ldr	r3, [pc, #296]	; (8002938 <HAL_RCC_ClockConfig+0x1b4>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0302 	and.w	r3, r3, #2
 8002814:	2b00      	cmp	r3, #0
 8002816:	d109      	bne.n	800282c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e086      	b.n	800292a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800281c:	4b46      	ldr	r3, [pc, #280]	; (8002938 <HAL_RCC_ClockConfig+0x1b4>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002824:	2b00      	cmp	r3, #0
 8002826:	d101      	bne.n	800282c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e07e      	b.n	800292a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800282c:	4b42      	ldr	r3, [pc, #264]	; (8002938 <HAL_RCC_ClockConfig+0x1b4>)
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	f023 0203 	bic.w	r2, r3, #3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	493f      	ldr	r1, [pc, #252]	; (8002938 <HAL_RCC_ClockConfig+0x1b4>)
 800283a:	4313      	orrs	r3, r2
 800283c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800283e:	f7fe fca5 	bl	800118c <HAL_GetTick>
 8002842:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002844:	e00a      	b.n	800285c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002846:	f7fe fca1 	bl	800118c <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	f241 3288 	movw	r2, #5000	; 0x1388
 8002854:	4293      	cmp	r3, r2
 8002856:	d901      	bls.n	800285c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e066      	b.n	800292a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800285c:	4b36      	ldr	r3, [pc, #216]	; (8002938 <HAL_RCC_ClockConfig+0x1b4>)
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	f003 020c 	and.w	r2, r3, #12
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	429a      	cmp	r2, r3
 800286c:	d1eb      	bne.n	8002846 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	2b00      	cmp	r3, #0
 8002878:	d008      	beq.n	800288c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800287a:	4b2f      	ldr	r3, [pc, #188]	; (8002938 <HAL_RCC_ClockConfig+0x1b4>)
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	492c      	ldr	r1, [pc, #176]	; (8002938 <HAL_RCC_ClockConfig+0x1b4>)
 8002888:	4313      	orrs	r3, r2
 800288a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800288c:	4b29      	ldr	r3, [pc, #164]	; (8002934 <HAL_RCC_ClockConfig+0x1b0>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0307 	and.w	r3, r3, #7
 8002894:	683a      	ldr	r2, [r7, #0]
 8002896:	429a      	cmp	r2, r3
 8002898:	d210      	bcs.n	80028bc <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800289a:	4b26      	ldr	r3, [pc, #152]	; (8002934 <HAL_RCC_ClockConfig+0x1b0>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f023 0207 	bic.w	r2, r3, #7
 80028a2:	4924      	ldr	r1, [pc, #144]	; (8002934 <HAL_RCC_ClockConfig+0x1b0>)
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028aa:	4b22      	ldr	r3, [pc, #136]	; (8002934 <HAL_RCC_ClockConfig+0x1b0>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0307 	and.w	r3, r3, #7
 80028b2:	683a      	ldr	r2, [r7, #0]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d001      	beq.n	80028bc <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e036      	b.n	800292a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0304 	and.w	r3, r3, #4
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d008      	beq.n	80028da <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028c8:	4b1b      	ldr	r3, [pc, #108]	; (8002938 <HAL_RCC_ClockConfig+0x1b4>)
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	4918      	ldr	r1, [pc, #96]	; (8002938 <HAL_RCC_ClockConfig+0x1b4>)
 80028d6:	4313      	orrs	r3, r2
 80028d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0308 	and.w	r3, r3, #8
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d009      	beq.n	80028fa <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028e6:	4b14      	ldr	r3, [pc, #80]	; (8002938 <HAL_RCC_ClockConfig+0x1b4>)
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	4910      	ldr	r1, [pc, #64]	; (8002938 <HAL_RCC_ClockConfig+0x1b4>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80028fa:	f000 f825 	bl	8002948 <HAL_RCC_GetSysClockFreq>
 80028fe:	4601      	mov	r1, r0
 8002900:	4b0d      	ldr	r3, [pc, #52]	; (8002938 <HAL_RCC_ClockConfig+0x1b4>)
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	091b      	lsrs	r3, r3, #4
 8002906:	f003 030f 	and.w	r3, r3, #15
 800290a:	4a0c      	ldr	r2, [pc, #48]	; (800293c <HAL_RCC_ClockConfig+0x1b8>)
 800290c:	5cd3      	ldrb	r3, [r2, r3]
 800290e:	f003 031f 	and.w	r3, r3, #31
 8002912:	fa21 f303 	lsr.w	r3, r1, r3
 8002916:	4a0a      	ldr	r2, [pc, #40]	; (8002940 <HAL_RCC_ClockConfig+0x1bc>)
 8002918:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800291a:	4b0a      	ldr	r3, [pc, #40]	; (8002944 <HAL_RCC_ClockConfig+0x1c0>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4618      	mov	r0, r3
 8002920:	f7fe fbe8 	bl	80010f4 <HAL_InitTick>
 8002924:	4603      	mov	r3, r0
 8002926:	72fb      	strb	r3, [r7, #11]

  return status;
 8002928:	7afb      	ldrb	r3, [r7, #11]
}
 800292a:	4618      	mov	r0, r3
 800292c:	3710      	adds	r7, #16
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	40022000 	.word	0x40022000
 8002938:	40021000 	.word	0x40021000
 800293c:	08003c20 	.word	0x08003c20
 8002940:	20000000 	.word	0x20000000
 8002944:	20000004 	.word	0x20000004

08002948 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002948:	b480      	push	{r7}
 800294a:	b089      	sub	sp, #36	; 0x24
 800294c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800294e:	2300      	movs	r3, #0
 8002950:	61fb      	str	r3, [r7, #28]
 8002952:	2300      	movs	r3, #0
 8002954:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002956:	4b3d      	ldr	r3, [pc, #244]	; (8002a4c <HAL_RCC_GetSysClockFreq+0x104>)
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	f003 030c 	and.w	r3, r3, #12
 800295e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002960:	4b3a      	ldr	r3, [pc, #232]	; (8002a4c <HAL_RCC_GetSysClockFreq+0x104>)
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	f003 0303 	and.w	r3, r3, #3
 8002968:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d005      	beq.n	800297c <HAL_RCC_GetSysClockFreq+0x34>
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	2b0c      	cmp	r3, #12
 8002974:	d121      	bne.n	80029ba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2b01      	cmp	r3, #1
 800297a:	d11e      	bne.n	80029ba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800297c:	4b33      	ldr	r3, [pc, #204]	; (8002a4c <HAL_RCC_GetSysClockFreq+0x104>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0308 	and.w	r3, r3, #8
 8002984:	2b00      	cmp	r3, #0
 8002986:	d107      	bne.n	8002998 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002988:	4b30      	ldr	r3, [pc, #192]	; (8002a4c <HAL_RCC_GetSysClockFreq+0x104>)
 800298a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800298e:	0a1b      	lsrs	r3, r3, #8
 8002990:	f003 030f 	and.w	r3, r3, #15
 8002994:	61fb      	str	r3, [r7, #28]
 8002996:	e005      	b.n	80029a4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002998:	4b2c      	ldr	r3, [pc, #176]	; (8002a4c <HAL_RCC_GetSysClockFreq+0x104>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	091b      	lsrs	r3, r3, #4
 800299e:	f003 030f 	and.w	r3, r3, #15
 80029a2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80029a4:	4a2a      	ldr	r2, [pc, #168]	; (8002a50 <HAL_RCC_GetSysClockFreq+0x108>)
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029ac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d10d      	bne.n	80029d0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029b8:	e00a      	b.n	80029d0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	2b04      	cmp	r3, #4
 80029be:	d102      	bne.n	80029c6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80029c0:	4b24      	ldr	r3, [pc, #144]	; (8002a54 <HAL_RCC_GetSysClockFreq+0x10c>)
 80029c2:	61bb      	str	r3, [r7, #24]
 80029c4:	e004      	b.n	80029d0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	2b08      	cmp	r3, #8
 80029ca:	d101      	bne.n	80029d0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80029cc:	4b22      	ldr	r3, [pc, #136]	; (8002a58 <HAL_RCC_GetSysClockFreq+0x110>)
 80029ce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	2b0c      	cmp	r3, #12
 80029d4:	d133      	bne.n	8002a3e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80029d6:	4b1d      	ldr	r3, [pc, #116]	; (8002a4c <HAL_RCC_GetSysClockFreq+0x104>)
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	f003 0303 	and.w	r3, r3, #3
 80029de:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d002      	beq.n	80029ec <HAL_RCC_GetSysClockFreq+0xa4>
 80029e6:	2b03      	cmp	r3, #3
 80029e8:	d003      	beq.n	80029f2 <HAL_RCC_GetSysClockFreq+0xaa>
 80029ea:	e005      	b.n	80029f8 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80029ec:	4b19      	ldr	r3, [pc, #100]	; (8002a54 <HAL_RCC_GetSysClockFreq+0x10c>)
 80029ee:	617b      	str	r3, [r7, #20]
      break;
 80029f0:	e005      	b.n	80029fe <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80029f2:	4b19      	ldr	r3, [pc, #100]	; (8002a58 <HAL_RCC_GetSysClockFreq+0x110>)
 80029f4:	617b      	str	r3, [r7, #20]
      break;
 80029f6:	e002      	b.n	80029fe <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	617b      	str	r3, [r7, #20]
      break;
 80029fc:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80029fe:	4b13      	ldr	r3, [pc, #76]	; (8002a4c <HAL_RCC_GetSysClockFreq+0x104>)
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	091b      	lsrs	r3, r3, #4
 8002a04:	f003 0307 	and.w	r3, r3, #7
 8002a08:	3301      	adds	r3, #1
 8002a0a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002a0c:	4b0f      	ldr	r3, [pc, #60]	; (8002a4c <HAL_RCC_GetSysClockFreq+0x104>)
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	0a1b      	lsrs	r3, r3, #8
 8002a12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a16:	697a      	ldr	r2, [r7, #20]
 8002a18:	fb02 f203 	mul.w	r2, r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a22:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a24:	4b09      	ldr	r3, [pc, #36]	; (8002a4c <HAL_RCC_GetSysClockFreq+0x104>)
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	0e5b      	lsrs	r3, r3, #25
 8002a2a:	f003 0303 	and.w	r3, r3, #3
 8002a2e:	3301      	adds	r3, #1
 8002a30:	005b      	lsls	r3, r3, #1
 8002a32:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002a34:	697a      	ldr	r2, [r7, #20]
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a3c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002a3e:	69bb      	ldr	r3, [r7, #24]
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3724      	adds	r7, #36	; 0x24
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr
 8002a4c:	40021000 	.word	0x40021000
 8002a50:	08003c38 	.word	0x08003c38
 8002a54:	00f42400 	.word	0x00f42400
 8002a58:	007a1200 	.word	0x007a1200

08002a5c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a60:	4b03      	ldr	r3, [pc, #12]	; (8002a70 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a62:	681b      	ldr	r3, [r3, #0]
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	20000000 	.word	0x20000000

08002a74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002a78:	f7ff fff0 	bl	8002a5c <HAL_RCC_GetHCLKFreq>
 8002a7c:	4601      	mov	r1, r0
 8002a7e:	4b06      	ldr	r3, [pc, #24]	; (8002a98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	0a1b      	lsrs	r3, r3, #8
 8002a84:	f003 0307 	and.w	r3, r3, #7
 8002a88:	4a04      	ldr	r2, [pc, #16]	; (8002a9c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a8a:	5cd3      	ldrb	r3, [r2, r3]
 8002a8c:	f003 031f 	and.w	r3, r3, #31
 8002a90:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	40021000 	.word	0x40021000
 8002a9c:	08003c30 	.word	0x08003c30

08002aa0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002aa4:	f7ff ffda 	bl	8002a5c <HAL_RCC_GetHCLKFreq>
 8002aa8:	4601      	mov	r1, r0
 8002aaa:	4b06      	ldr	r3, [pc, #24]	; (8002ac4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	0adb      	lsrs	r3, r3, #11
 8002ab0:	f003 0307 	and.w	r3, r3, #7
 8002ab4:	4a04      	ldr	r2, [pc, #16]	; (8002ac8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002ab6:	5cd3      	ldrb	r3, [r2, r3]
 8002ab8:	f003 031f 	and.w	r3, r3, #31
 8002abc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	40021000 	.word	0x40021000
 8002ac8:	08003c30 	.word	0x08003c30

08002acc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b086      	sub	sp, #24
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002ad8:	4b2a      	ldr	r3, [pc, #168]	; (8002b84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ada:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002adc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d003      	beq.n	8002aec <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002ae4:	f7ff f9fc 	bl	8001ee0 <HAL_PWREx_GetVoltageRange>
 8002ae8:	6178      	str	r0, [r7, #20]
 8002aea:	e014      	b.n	8002b16 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002aec:	4b25      	ldr	r3, [pc, #148]	; (8002b84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002af0:	4a24      	ldr	r2, [pc, #144]	; (8002b84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002af2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002af6:	6593      	str	r3, [r2, #88]	; 0x58
 8002af8:	4b22      	ldr	r3, [pc, #136]	; (8002b84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002afc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b00:	60fb      	str	r3, [r7, #12]
 8002b02:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002b04:	f7ff f9ec 	bl	8001ee0 <HAL_PWREx_GetVoltageRange>
 8002b08:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002b0a:	4b1e      	ldr	r3, [pc, #120]	; (8002b84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b0e:	4a1d      	ldr	r2, [pc, #116]	; (8002b84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b14:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b1c:	d10b      	bne.n	8002b36 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2b80      	cmp	r3, #128	; 0x80
 8002b22:	d919      	bls.n	8002b58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2ba0      	cmp	r3, #160	; 0xa0
 8002b28:	d902      	bls.n	8002b30 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b2a:	2302      	movs	r3, #2
 8002b2c:	613b      	str	r3, [r7, #16]
 8002b2e:	e013      	b.n	8002b58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b30:	2301      	movs	r3, #1
 8002b32:	613b      	str	r3, [r7, #16]
 8002b34:	e010      	b.n	8002b58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2b80      	cmp	r3, #128	; 0x80
 8002b3a:	d902      	bls.n	8002b42 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	613b      	str	r3, [r7, #16]
 8002b40:	e00a      	b.n	8002b58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2b80      	cmp	r3, #128	; 0x80
 8002b46:	d102      	bne.n	8002b4e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b48:	2302      	movs	r3, #2
 8002b4a:	613b      	str	r3, [r7, #16]
 8002b4c:	e004      	b.n	8002b58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2b70      	cmp	r3, #112	; 0x70
 8002b52:	d101      	bne.n	8002b58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b54:	2301      	movs	r3, #1
 8002b56:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002b58:	4b0b      	ldr	r3, [pc, #44]	; (8002b88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f023 0207 	bic.w	r2, r3, #7
 8002b60:	4909      	ldr	r1, [pc, #36]	; (8002b88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002b68:	4b07      	ldr	r3, [pc, #28]	; (8002b88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0307 	and.w	r3, r3, #7
 8002b70:	693a      	ldr	r2, [r7, #16]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d001      	beq.n	8002b7a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e000      	b.n	8002b7c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002b7a:	2300      	movs	r3, #0
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3718      	adds	r7, #24
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	40021000 	.word	0x40021000
 8002b88:	40022000 	.word	0x40022000

08002b8c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b086      	sub	sp, #24
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002b94:	2300      	movs	r3, #0
 8002b96:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b98:	2300      	movs	r3, #0
 8002b9a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d02f      	beq.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002bb0:	d005      	beq.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002bb2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002bb6:	d015      	beq.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d007      	beq.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002bbc:	e00f      	b.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002bbe:	4bac      	ldr	r3, [pc, #688]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	4aab      	ldr	r2, [pc, #684]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002bc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bc8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002bca:	e00c      	b.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	3304      	adds	r3, #4
 8002bd0:	2100      	movs	r1, #0
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f000 f9dc 	bl	8002f90 <RCCEx_PLLSAI1_Config>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002bdc:	e003      	b.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	74fb      	strb	r3, [r7, #19]
      break;
 8002be2:	e000      	b.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8002be4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002be6:	7cfb      	ldrb	r3, [r7, #19]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d10b      	bne.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002bec:	4ba0      	ldr	r3, [pc, #640]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bf2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bfa:	499d      	ldr	r1, [pc, #628]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002c02:	e001      	b.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c04:	7cfb      	ldrb	r3, [r7, #19]
 8002c06:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	f000 8099 	beq.w	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c16:	2300      	movs	r3, #0
 8002c18:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002c1a:	4b95      	ldr	r3, [pc, #596]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d101      	bne.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8002c26:	2301      	movs	r3, #1
 8002c28:	e000      	b.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d00d      	beq.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c30:	4b8f      	ldr	r3, [pc, #572]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c34:	4a8e      	ldr	r2, [pc, #568]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002c36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c3a:	6593      	str	r3, [r2, #88]	; 0x58
 8002c3c:	4b8c      	ldr	r3, [pc, #560]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c44:	60bb      	str	r3, [r7, #8]
 8002c46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c4c:	4b89      	ldr	r3, [pc, #548]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a88      	ldr	r2, [pc, #544]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002c52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c56:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c58:	f7fe fa98 	bl	800118c <HAL_GetTick>
 8002c5c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c5e:	e009      	b.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c60:	f7fe fa94 	bl	800118c <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d902      	bls.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	74fb      	strb	r3, [r7, #19]
        break;
 8002c72:	e005      	b.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c74:	4b7f      	ldr	r3, [pc, #508]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d0ef      	beq.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 8002c80:	7cfb      	ldrb	r3, [r7, #19]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d155      	bne.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c86:	4b7a      	ldr	r3, [pc, #488]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c90:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d01e      	beq.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c9c:	697a      	ldr	r2, [r7, #20]
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d019      	beq.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002ca2:	4b73      	ldr	r3, [pc, #460]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ca8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cac:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002cae:	4b70      	ldr	r3, [pc, #448]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cb4:	4a6e      	ldr	r2, [pc, #440]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002cb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002cbe:	4b6c      	ldr	r3, [pc, #432]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cc4:	4a6a      	ldr	r2, [pc, #424]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002cc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002cce:	4a68      	ldr	r2, [pc, #416]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	f003 0301 	and.w	r3, r3, #1
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d016      	beq.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce0:	f7fe fa54 	bl	800118c <HAL_GetTick>
 8002ce4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ce6:	e00b      	b.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ce8:	f7fe fa50 	bl	800118c <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d902      	bls.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	74fb      	strb	r3, [r7, #19]
            break;
 8002cfe:	e006      	b.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d00:	4b5b      	ldr	r3, [pc, #364]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d0ec      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 8002d0e:	7cfb      	ldrb	r3, [r7, #19]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d10b      	bne.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d14:	4b56      	ldr	r3, [pc, #344]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d1a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d22:	4953      	ldr	r1, [pc, #332]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002d24:	4313      	orrs	r3, r2
 8002d26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002d2a:	e004      	b.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d2c:	7cfb      	ldrb	r3, [r7, #19]
 8002d2e:	74bb      	strb	r3, [r7, #18]
 8002d30:	e001      	b.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d32:	7cfb      	ldrb	r3, [r7, #19]
 8002d34:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d36:	7c7b      	ldrb	r3, [r7, #17]
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d105      	bne.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d3c:	4b4c      	ldr	r3, [pc, #304]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d40:	4a4b      	ldr	r2, [pc, #300]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002d42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d46:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0301 	and.w	r3, r3, #1
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d00a      	beq.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d54:	4b46      	ldr	r3, [pc, #280]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d5a:	f023 0203 	bic.w	r2, r3, #3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a1b      	ldr	r3, [r3, #32]
 8002d62:	4943      	ldr	r1, [pc, #268]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0302 	and.w	r3, r3, #2
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d00a      	beq.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d76:	4b3e      	ldr	r3, [pc, #248]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d7c:	f023 020c 	bic.w	r2, r3, #12
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d84:	493a      	ldr	r1, [pc, #232]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0320 	and.w	r3, r3, #32
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d00a      	beq.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d98:	4b35      	ldr	r3, [pc, #212]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d9e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da6:	4932      	ldr	r1, [pc, #200]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002da8:	4313      	orrs	r3, r2
 8002daa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d00a      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002dba:	4b2d      	ldr	r3, [pc, #180]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002dbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dc0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dc8:	4929      	ldr	r1, [pc, #164]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d00a      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002ddc:	4b24      	ldr	r3, [pc, #144]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dea:	4921      	ldr	r1, [pc, #132]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002dec:	4313      	orrs	r3, r2
 8002dee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d00a      	beq.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002dfe:	4b1c      	ldr	r3, [pc, #112]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e04:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e0c:	4918      	ldr	r1, [pc, #96]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d00a      	beq.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e20:	4b13      	ldr	r3, [pc, #76]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e26:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2e:	4910      	ldr	r1, [pc, #64]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d02c      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e42:	4b0b      	ldr	r3, [pc, #44]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e48:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e50:	4907      	ldr	r1, [pc, #28]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e60:	d10a      	bne.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e62:	4b03      	ldr	r3, [pc, #12]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	4a02      	ldr	r2, [pc, #8]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002e68:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e6c:	60d3      	str	r3, [r2, #12]
 8002e6e:	e015      	b.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002e70:	40021000 	.word	0x40021000
 8002e74:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e80:	d10c      	bne.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x310>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	3304      	adds	r3, #4
 8002e86:	2101      	movs	r1, #1
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f000 f881 	bl	8002f90 <RCCEx_PLLSAI1_Config>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002e92:	7cfb      	ldrb	r3, [r7, #19]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d001      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x310>
        {
          /* set overall return value */
          status = ret;
 8002e98:	7cfb      	ldrb	r3, [r7, #19]
 8002e9a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d028      	beq.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ea8:	4b30      	ldr	r3, [pc, #192]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb6:	492d      	ldr	r1, [pc, #180]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ec6:	d106      	bne.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ec8:	4b28      	ldr	r3, [pc, #160]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	4a27      	ldr	r2, [pc, #156]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ece:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ed2:	60d3      	str	r3, [r2, #12]
 8002ed4:	e011      	b.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eda:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ede:	d10c      	bne.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	3304      	adds	r3, #4
 8002ee4:	2101      	movs	r1, #1
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f000 f852 	bl	8002f90 <RCCEx_PLLSAI1_Config>
 8002eec:	4603      	mov	r3, r0
 8002eee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ef0:	7cfb      	ldrb	r3, [r7, #19]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x36e>
      {
        /* set overall return value */
        status = ret;
 8002ef6:	7cfb      	ldrb	r3, [r7, #19]
 8002ef8:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d01c      	beq.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f06:	4b19      	ldr	r3, [pc, #100]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f0c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f14:	4915      	ldr	r1, [pc, #84]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f16:	4313      	orrs	r3, r2
 8002f18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f20:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f24:	d10c      	bne.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	3304      	adds	r3, #4
 8002f2a:	2102      	movs	r1, #2
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f000 f82f 	bl	8002f90 <RCCEx_PLLSAI1_Config>
 8002f32:	4603      	mov	r3, r0
 8002f34:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f36:	7cfb      	ldrb	r3, [r7, #19]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d001      	beq.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 8002f3c:	7cfb      	ldrb	r3, [r7, #19]
 8002f3e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d00a      	beq.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002f4c:	4b07      	ldr	r3, [pc, #28]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f52:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f5a:	4904      	ldr	r1, [pc, #16]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002f62:	7cbb      	ldrb	r3, [r7, #18]
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3718      	adds	r7, #24
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	40021000 	.word	0x40021000

08002f70 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002f74:	4b05      	ldr	r3, [pc, #20]	; (8002f8c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a04      	ldr	r2, [pc, #16]	; (8002f8c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002f7a:	f043 0304 	orr.w	r3, r3, #4
 8002f7e:	6013      	str	r3, [r2, #0]
}
 8002f80:	bf00      	nop
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	40021000 	.word	0x40021000

08002f90 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f9e:	4b73      	ldr	r3, [pc, #460]	; (800316c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	f003 0303 	and.w	r3, r3, #3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d018      	beq.n	8002fdc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002faa:	4b70      	ldr	r3, [pc, #448]	; (800316c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	f003 0203 	and.w	r2, r3, #3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d10d      	bne.n	8002fd6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
       ||
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d009      	beq.n	8002fd6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002fc2:	4b6a      	ldr	r3, [pc, #424]	; (800316c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	091b      	lsrs	r3, r3, #4
 8002fc8:	f003 0307 	and.w	r3, r3, #7
 8002fcc:	1c5a      	adds	r2, r3, #1
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
       ||
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d044      	beq.n	8003060 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	73fb      	strb	r3, [r7, #15]
 8002fda:	e041      	b.n	8003060 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d00c      	beq.n	8002ffe <RCCEx_PLLSAI1_Config+0x6e>
 8002fe4:	2b03      	cmp	r3, #3
 8002fe6:	d013      	beq.n	8003010 <RCCEx_PLLSAI1_Config+0x80>
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d120      	bne.n	800302e <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002fec:	4b5f      	ldr	r3, [pc, #380]	; (800316c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0302 	and.w	r3, r3, #2
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d11d      	bne.n	8003034 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ffc:	e01a      	b.n	8003034 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ffe:	4b5b      	ldr	r3, [pc, #364]	; (800316c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003006:	2b00      	cmp	r3, #0
 8003008:	d116      	bne.n	8003038 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800300e:	e013      	b.n	8003038 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003010:	4b56      	ldr	r3, [pc, #344]	; (800316c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d10f      	bne.n	800303c <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800301c:	4b53      	ldr	r3, [pc, #332]	; (800316c <RCCEx_PLLSAI1_Config+0x1dc>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d109      	bne.n	800303c <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800302c:	e006      	b.n	800303c <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	73fb      	strb	r3, [r7, #15]
      break;
 8003032:	e004      	b.n	800303e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003034:	bf00      	nop
 8003036:	e002      	b.n	800303e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003038:	bf00      	nop
 800303a:	e000      	b.n	800303e <RCCEx_PLLSAI1_Config+0xae>
      break;
 800303c:	bf00      	nop
    }

    if(status == HAL_OK)
 800303e:	7bfb      	ldrb	r3, [r7, #15]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d10d      	bne.n	8003060 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003044:	4b49      	ldr	r3, [pc, #292]	; (800316c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6819      	ldr	r1, [r3, #0]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	3b01      	subs	r3, #1
 8003056:	011b      	lsls	r3, r3, #4
 8003058:	430b      	orrs	r3, r1
 800305a:	4944      	ldr	r1, [pc, #272]	; (800316c <RCCEx_PLLSAI1_Config+0x1dc>)
 800305c:	4313      	orrs	r3, r2
 800305e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003060:	7bfb      	ldrb	r3, [r7, #15]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d17c      	bne.n	8003160 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003066:	4b41      	ldr	r3, [pc, #260]	; (800316c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a40      	ldr	r2, [pc, #256]	; (800316c <RCCEx_PLLSAI1_Config+0x1dc>)
 800306c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003070:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003072:	f7fe f88b 	bl	800118c <HAL_GetTick>
 8003076:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003078:	e009      	b.n	800308e <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800307a:	f7fe f887 	bl	800118c <HAL_GetTick>
 800307e:	4602      	mov	r2, r0
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	2b02      	cmp	r3, #2
 8003086:	d902      	bls.n	800308e <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003088:	2303      	movs	r3, #3
 800308a:	73fb      	strb	r3, [r7, #15]
        break;
 800308c:	e005      	b.n	800309a <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800308e:	4b37      	ldr	r3, [pc, #220]	; (800316c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d1ef      	bne.n	800307a <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800309a:	7bfb      	ldrb	r3, [r7, #15]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d15f      	bne.n	8003160 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d110      	bne.n	80030c8 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030a6:	4b31      	ldr	r3, [pc, #196]	; (800316c <RCCEx_PLLSAI1_Config+0x1dc>)
 80030a8:	691b      	ldr	r3, [r3, #16]
 80030aa:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80030ae:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	6892      	ldr	r2, [r2, #8]
 80030b6:	0211      	lsls	r1, r2, #8
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	68d2      	ldr	r2, [r2, #12]
 80030bc:	06d2      	lsls	r2, r2, #27
 80030be:	430a      	orrs	r2, r1
 80030c0:	492a      	ldr	r1, [pc, #168]	; (800316c <RCCEx_PLLSAI1_Config+0x1dc>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	610b      	str	r3, [r1, #16]
 80030c6:	e027      	b.n	8003118 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d112      	bne.n	80030f4 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030ce:	4b27      	ldr	r3, [pc, #156]	; (800316c <RCCEx_PLLSAI1_Config+0x1dc>)
 80030d0:	691b      	ldr	r3, [r3, #16]
 80030d2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80030d6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	6892      	ldr	r2, [r2, #8]
 80030de:	0211      	lsls	r1, r2, #8
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	6912      	ldr	r2, [r2, #16]
 80030e4:	0852      	lsrs	r2, r2, #1
 80030e6:	3a01      	subs	r2, #1
 80030e8:	0552      	lsls	r2, r2, #21
 80030ea:	430a      	orrs	r2, r1
 80030ec:	491f      	ldr	r1, [pc, #124]	; (800316c <RCCEx_PLLSAI1_Config+0x1dc>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	610b      	str	r3, [r1, #16]
 80030f2:	e011      	b.n	8003118 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030f4:	4b1d      	ldr	r3, [pc, #116]	; (800316c <RCCEx_PLLSAI1_Config+0x1dc>)
 80030f6:	691b      	ldr	r3, [r3, #16]
 80030f8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80030fc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	6892      	ldr	r2, [r2, #8]
 8003104:	0211      	lsls	r1, r2, #8
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	6952      	ldr	r2, [r2, #20]
 800310a:	0852      	lsrs	r2, r2, #1
 800310c:	3a01      	subs	r2, #1
 800310e:	0652      	lsls	r2, r2, #25
 8003110:	430a      	orrs	r2, r1
 8003112:	4916      	ldr	r1, [pc, #88]	; (800316c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003114:	4313      	orrs	r3, r2
 8003116:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003118:	4b14      	ldr	r3, [pc, #80]	; (800316c <RCCEx_PLLSAI1_Config+0x1dc>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a13      	ldr	r2, [pc, #76]	; (800316c <RCCEx_PLLSAI1_Config+0x1dc>)
 800311e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003122:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003124:	f7fe f832 	bl	800118c <HAL_GetTick>
 8003128:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800312a:	e009      	b.n	8003140 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800312c:	f7fe f82e 	bl	800118c <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	2b02      	cmp	r3, #2
 8003138:	d902      	bls.n	8003140 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	73fb      	strb	r3, [r7, #15]
          break;
 800313e:	e005      	b.n	800314c <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003140:	4b0a      	ldr	r3, [pc, #40]	; (800316c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003148:	2b00      	cmp	r3, #0
 800314a:	d0ef      	beq.n	800312c <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 800314c:	7bfb      	ldrb	r3, [r7, #15]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d106      	bne.n	8003160 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003152:	4b06      	ldr	r3, [pc, #24]	; (800316c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003154:	691a      	ldr	r2, [r3, #16]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	699b      	ldr	r3, [r3, #24]
 800315a:	4904      	ldr	r1, [pc, #16]	; (800316c <RCCEx_PLLSAI1_Config+0x1dc>)
 800315c:	4313      	orrs	r3, r2
 800315e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003160:	7bfb      	ldrb	r3, [r7, #15]
}
 8003162:	4618      	mov	r0, r3
 8003164:	3710      	adds	r7, #16
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	40021000 	.word	0x40021000

08003170 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d101      	bne.n	8003182 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e040      	b.n	8003204 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003186:	2b00      	cmp	r3, #0
 8003188:	d106      	bne.n	8003198 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f7fd feb4 	bl	8000f00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2224      	movs	r2, #36	; 0x24
 800319c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f022 0201 	bic.w	r2, r2, #1
 80031ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 f8c0 	bl	8003334 <UART_SetConfig>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d101      	bne.n	80031be <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e022      	b.n	8003204 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d002      	beq.n	80031cc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 fb7e 	bl	80038c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	685a      	ldr	r2, [r3, #4]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	689a      	ldr	r2, [r3, #8]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f042 0201 	orr.w	r2, r2, #1
 80031fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f000 fc05 	bl	8003a0c <UART_CheckIdleState>
 8003202:	4603      	mov	r3, r0
}
 8003204:	4618      	mov	r0, r3
 8003206:	3708      	adds	r7, #8
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b08a      	sub	sp, #40	; 0x28
 8003210:	af02      	add	r7, sp, #8
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	603b      	str	r3, [r7, #0]
 8003218:	4613      	mov	r3, r2
 800321a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003220:	2b20      	cmp	r3, #32
 8003222:	f040 8081 	bne.w	8003328 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d002      	beq.n	8003232 <HAL_UART_Transmit+0x26>
 800322c:	88fb      	ldrh	r3, [r7, #6]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d101      	bne.n	8003236 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e079      	b.n	800332a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800323c:	2b01      	cmp	r3, #1
 800323e:	d101      	bne.n	8003244 <HAL_UART_Transmit+0x38>
 8003240:	2302      	movs	r3, #2
 8003242:	e072      	b.n	800332a <HAL_UART_Transmit+0x11e>
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2200      	movs	r2, #0
 8003250:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2221      	movs	r2, #33	; 0x21
 8003256:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003258:	f7fd ff98 	bl	800118c <HAL_GetTick>
 800325c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	88fa      	ldrh	r2, [r7, #6]
 8003262:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	88fa      	ldrh	r2, [r7, #6]
 800326a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003276:	d108      	bne.n	800328a <HAL_UART_Transmit+0x7e>
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	691b      	ldr	r3, [r3, #16]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d104      	bne.n	800328a <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8003280:	2300      	movs	r3, #0
 8003282:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	61bb      	str	r3, [r7, #24]
 8003288:	e003      	b.n	8003292 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800328e:	2300      	movs	r3, #0
 8003290:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003292:	e02d      	b.n	80032f0 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	9300      	str	r3, [sp, #0]
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	2200      	movs	r2, #0
 800329c:	2180      	movs	r1, #128	; 0x80
 800329e:	68f8      	ldr	r0, [r7, #12]
 80032a0:	f000 fbf9 	bl	8003a96 <UART_WaitOnFlagUntilTimeout>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d001      	beq.n	80032ae <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e03d      	b.n	800332a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d10b      	bne.n	80032cc <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032b4:	69bb      	ldr	r3, [r7, #24]
 80032b6:	881a      	ldrh	r2, [r3, #0]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032c0:	b292      	uxth	r2, r2
 80032c2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80032c4:	69bb      	ldr	r3, [r7, #24]
 80032c6:	3302      	adds	r3, #2
 80032c8:	61bb      	str	r3, [r7, #24]
 80032ca:	e008      	b.n	80032de <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	781a      	ldrb	r2, [r3, #0]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	b292      	uxth	r2, r2
 80032d6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	3301      	adds	r3, #1
 80032dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	3b01      	subs	r3, #1
 80032e8:	b29a      	uxth	r2, r3
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d1cb      	bne.n	8003294 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	9300      	str	r3, [sp, #0]
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	2200      	movs	r2, #0
 8003304:	2140      	movs	r1, #64	; 0x40
 8003306:	68f8      	ldr	r0, [r7, #12]
 8003308:	f000 fbc5 	bl	8003a96 <UART_WaitOnFlagUntilTimeout>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d001      	beq.n	8003316 <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e009      	b.n	800332a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2220      	movs	r2, #32
 800331a:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8003324:	2300      	movs	r3, #0
 8003326:	e000      	b.n	800332a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003328:	2302      	movs	r3, #2
  }
}
 800332a:	4618      	mov	r0, r3
 800332c:	3720      	adds	r7, #32
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
	...

08003334 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003334:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003338:	b088      	sub	sp, #32
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800333e:	2300      	movs	r3, #0
 8003340:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003342:	2300      	movs	r3, #0
 8003344:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8003346:	2300      	movs	r3, #0
 8003348:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	689a      	ldr	r2, [r3, #8]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	691b      	ldr	r3, [r3, #16]
 8003352:	431a      	orrs	r2, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	695b      	ldr	r3, [r3, #20]
 8003358:	431a      	orrs	r2, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	69db      	ldr	r3, [r3, #28]
 800335e:	4313      	orrs	r3, r2
 8003360:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	4bbc      	ldr	r3, [pc, #752]	; (800365c <UART_SetConfig+0x328>)
 800336a:	4013      	ands	r3, r2
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	6812      	ldr	r2, [r2, #0]
 8003370:	69f9      	ldr	r1, [r7, #28]
 8003372:	430b      	orrs	r3, r1
 8003374:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	68da      	ldr	r2, [r3, #12]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	430a      	orrs	r2, r1
 800338a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4ab2      	ldr	r2, [pc, #712]	; (8003660 <UART_SetConfig+0x32c>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d004      	beq.n	80033a6 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a1b      	ldr	r3, [r3, #32]
 80033a0:	69fa      	ldr	r2, [r7, #28]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	69fa      	ldr	r2, [r7, #28]
 80033b6:	430a      	orrs	r2, r1
 80033b8:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4aa9      	ldr	r2, [pc, #676]	; (8003664 <UART_SetConfig+0x330>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d121      	bne.n	8003408 <UART_SetConfig+0xd4>
 80033c4:	4ba8      	ldr	r3, [pc, #672]	; (8003668 <UART_SetConfig+0x334>)
 80033c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ca:	f003 0303 	and.w	r3, r3, #3
 80033ce:	2b03      	cmp	r3, #3
 80033d0:	d816      	bhi.n	8003400 <UART_SetConfig+0xcc>
 80033d2:	a201      	add	r2, pc, #4	; (adr r2, 80033d8 <UART_SetConfig+0xa4>)
 80033d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033d8:	080033e9 	.word	0x080033e9
 80033dc:	080033f5 	.word	0x080033f5
 80033e0:	080033ef 	.word	0x080033ef
 80033e4:	080033fb 	.word	0x080033fb
 80033e8:	2301      	movs	r3, #1
 80033ea:	76fb      	strb	r3, [r7, #27]
 80033ec:	e072      	b.n	80034d4 <UART_SetConfig+0x1a0>
 80033ee:	2302      	movs	r3, #2
 80033f0:	76fb      	strb	r3, [r7, #27]
 80033f2:	e06f      	b.n	80034d4 <UART_SetConfig+0x1a0>
 80033f4:	2304      	movs	r3, #4
 80033f6:	76fb      	strb	r3, [r7, #27]
 80033f8:	e06c      	b.n	80034d4 <UART_SetConfig+0x1a0>
 80033fa:	2308      	movs	r3, #8
 80033fc:	76fb      	strb	r3, [r7, #27]
 80033fe:	e069      	b.n	80034d4 <UART_SetConfig+0x1a0>
 8003400:	2310      	movs	r3, #16
 8003402:	76fb      	strb	r3, [r7, #27]
 8003404:	bf00      	nop
 8003406:	e065      	b.n	80034d4 <UART_SetConfig+0x1a0>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a97      	ldr	r2, [pc, #604]	; (800366c <UART_SetConfig+0x338>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d134      	bne.n	800347c <UART_SetConfig+0x148>
 8003412:	4b95      	ldr	r3, [pc, #596]	; (8003668 <UART_SetConfig+0x334>)
 8003414:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003418:	f003 030c 	and.w	r3, r3, #12
 800341c:	2b0c      	cmp	r3, #12
 800341e:	d829      	bhi.n	8003474 <UART_SetConfig+0x140>
 8003420:	a201      	add	r2, pc, #4	; (adr r2, 8003428 <UART_SetConfig+0xf4>)
 8003422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003426:	bf00      	nop
 8003428:	0800345d 	.word	0x0800345d
 800342c:	08003475 	.word	0x08003475
 8003430:	08003475 	.word	0x08003475
 8003434:	08003475 	.word	0x08003475
 8003438:	08003469 	.word	0x08003469
 800343c:	08003475 	.word	0x08003475
 8003440:	08003475 	.word	0x08003475
 8003444:	08003475 	.word	0x08003475
 8003448:	08003463 	.word	0x08003463
 800344c:	08003475 	.word	0x08003475
 8003450:	08003475 	.word	0x08003475
 8003454:	08003475 	.word	0x08003475
 8003458:	0800346f 	.word	0x0800346f
 800345c:	2300      	movs	r3, #0
 800345e:	76fb      	strb	r3, [r7, #27]
 8003460:	e038      	b.n	80034d4 <UART_SetConfig+0x1a0>
 8003462:	2302      	movs	r3, #2
 8003464:	76fb      	strb	r3, [r7, #27]
 8003466:	e035      	b.n	80034d4 <UART_SetConfig+0x1a0>
 8003468:	2304      	movs	r3, #4
 800346a:	76fb      	strb	r3, [r7, #27]
 800346c:	e032      	b.n	80034d4 <UART_SetConfig+0x1a0>
 800346e:	2308      	movs	r3, #8
 8003470:	76fb      	strb	r3, [r7, #27]
 8003472:	e02f      	b.n	80034d4 <UART_SetConfig+0x1a0>
 8003474:	2310      	movs	r3, #16
 8003476:	76fb      	strb	r3, [r7, #27]
 8003478:	bf00      	nop
 800347a:	e02b      	b.n	80034d4 <UART_SetConfig+0x1a0>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a77      	ldr	r2, [pc, #476]	; (8003660 <UART_SetConfig+0x32c>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d124      	bne.n	80034d0 <UART_SetConfig+0x19c>
 8003486:	4b78      	ldr	r3, [pc, #480]	; (8003668 <UART_SetConfig+0x334>)
 8003488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800348c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003490:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003494:	d012      	beq.n	80034bc <UART_SetConfig+0x188>
 8003496:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800349a:	d802      	bhi.n	80034a2 <UART_SetConfig+0x16e>
 800349c:	2b00      	cmp	r3, #0
 800349e:	d007      	beq.n	80034b0 <UART_SetConfig+0x17c>
 80034a0:	e012      	b.n	80034c8 <UART_SetConfig+0x194>
 80034a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034a6:	d006      	beq.n	80034b6 <UART_SetConfig+0x182>
 80034a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80034ac:	d009      	beq.n	80034c2 <UART_SetConfig+0x18e>
 80034ae:	e00b      	b.n	80034c8 <UART_SetConfig+0x194>
 80034b0:	2300      	movs	r3, #0
 80034b2:	76fb      	strb	r3, [r7, #27]
 80034b4:	e00e      	b.n	80034d4 <UART_SetConfig+0x1a0>
 80034b6:	2302      	movs	r3, #2
 80034b8:	76fb      	strb	r3, [r7, #27]
 80034ba:	e00b      	b.n	80034d4 <UART_SetConfig+0x1a0>
 80034bc:	2304      	movs	r3, #4
 80034be:	76fb      	strb	r3, [r7, #27]
 80034c0:	e008      	b.n	80034d4 <UART_SetConfig+0x1a0>
 80034c2:	2308      	movs	r3, #8
 80034c4:	76fb      	strb	r3, [r7, #27]
 80034c6:	e005      	b.n	80034d4 <UART_SetConfig+0x1a0>
 80034c8:	2310      	movs	r3, #16
 80034ca:	76fb      	strb	r3, [r7, #27]
 80034cc:	bf00      	nop
 80034ce:	e001      	b.n	80034d4 <UART_SetConfig+0x1a0>
 80034d0:	2310      	movs	r3, #16
 80034d2:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a61      	ldr	r2, [pc, #388]	; (8003660 <UART_SetConfig+0x32c>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	f040 80f4 	bne.w	80036c8 <UART_SetConfig+0x394>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80034e0:	7efb      	ldrb	r3, [r7, #27]
 80034e2:	2b08      	cmp	r3, #8
 80034e4:	d823      	bhi.n	800352e <UART_SetConfig+0x1fa>
 80034e6:	a201      	add	r2, pc, #4	; (adr r2, 80034ec <UART_SetConfig+0x1b8>)
 80034e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ec:	08003511 	.word	0x08003511
 80034f0:	0800352f 	.word	0x0800352f
 80034f4:	08003519 	.word	0x08003519
 80034f8:	0800352f 	.word	0x0800352f
 80034fc:	0800351f 	.word	0x0800351f
 8003500:	0800352f 	.word	0x0800352f
 8003504:	0800352f 	.word	0x0800352f
 8003508:	0800352f 	.word	0x0800352f
 800350c:	08003527 	.word	0x08003527
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8003510:	f7ff fab0 	bl	8002a74 <HAL_RCC_GetPCLK1Freq>
 8003514:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003516:	e00d      	b.n	8003534 <UART_SetConfig+0x200>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8003518:	4b55      	ldr	r3, [pc, #340]	; (8003670 <UART_SetConfig+0x33c>)
 800351a:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 800351c:	e00a      	b.n	8003534 <UART_SetConfig+0x200>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800351e:	f7ff fa13 	bl	8002948 <HAL_RCC_GetSysClockFreq>
 8003522:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003524:	e006      	b.n	8003534 <UART_SetConfig+0x200>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8003526:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800352a:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 800352c:	e002      	b.n	8003534 <UART_SetConfig+0x200>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	74fb      	strb	r3, [r7, #19]
        break;
 8003532:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2b00      	cmp	r3, #0
 8003538:	f000 81b9 	beq.w	80038ae <UART_SetConfig+0x57a>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	685a      	ldr	r2, [r3, #4]
 8003540:	4613      	mov	r3, r2
 8003542:	005b      	lsls	r3, r3, #1
 8003544:	4413      	add	r3, r2
 8003546:	68fa      	ldr	r2, [r7, #12]
 8003548:	429a      	cmp	r2, r3
 800354a:	d305      	bcc.n	8003558 <UART_SetConfig+0x224>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003552:	68fa      	ldr	r2, [r7, #12]
 8003554:	429a      	cmp	r2, r3
 8003556:	d902      	bls.n	800355e <UART_SetConfig+0x22a>
      {
        ret = HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	74fb      	strb	r3, [r7, #19]
 800355c:	e1a7      	b.n	80038ae <UART_SetConfig+0x57a>
      }
      else
      {
        switch (clocksource)
 800355e:	7efb      	ldrb	r3, [r7, #27]
 8003560:	2b08      	cmp	r3, #8
 8003562:	f200 809e 	bhi.w	80036a2 <UART_SetConfig+0x36e>
 8003566:	a201      	add	r2, pc, #4	; (adr r2, 800356c <UART_SetConfig+0x238>)
 8003568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800356c:	08003591 	.word	0x08003591
 8003570:	080036a3 	.word	0x080036a3
 8003574:	080035dd 	.word	0x080035dd
 8003578:	080036a3 	.word	0x080036a3
 800357c:	08003611 	.word	0x08003611
 8003580:	080036a3 	.word	0x080036a3
 8003584:	080036a3 	.word	0x080036a3
 8003588:	080036a3 	.word	0x080036a3
 800358c:	08003679 	.word	0x08003679
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003590:	f7ff fa70 	bl	8002a74 <HAL_RCC_GetPCLK1Freq>
 8003594:	4603      	mov	r3, r0
 8003596:	4619      	mov	r1, r3
 8003598:	f04f 0200 	mov.w	r2, #0
 800359c:	f04f 0300 	mov.w	r3, #0
 80035a0:	f04f 0400 	mov.w	r4, #0
 80035a4:	0214      	lsls	r4, r2, #8
 80035a6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80035aa:	020b      	lsls	r3, r1, #8
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	6852      	ldr	r2, [r2, #4]
 80035b0:	0852      	lsrs	r2, r2, #1
 80035b2:	4611      	mov	r1, r2
 80035b4:	f04f 0200 	mov.w	r2, #0
 80035b8:	eb13 0b01 	adds.w	fp, r3, r1
 80035bc:	eb44 0c02 	adc.w	ip, r4, r2
 80035c0:	4658      	mov	r0, fp
 80035c2:	4661      	mov	r1, ip
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f04f 0400 	mov.w	r4, #0
 80035cc:	461a      	mov	r2, r3
 80035ce:	4623      	mov	r3, r4
 80035d0:	f7fc fe04 	bl	80001dc <__aeabi_uldivmod>
 80035d4:	4603      	mov	r3, r0
 80035d6:	460c      	mov	r4, r1
 80035d8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80035da:	e065      	b.n	80036a8 <UART_SetConfig+0x374>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	085b      	lsrs	r3, r3, #1
 80035e2:	f04f 0400 	mov.w	r4, #0
 80035e6:	4923      	ldr	r1, [pc, #140]	; (8003674 <UART_SetConfig+0x340>)
 80035e8:	f04f 0200 	mov.w	r2, #0
 80035ec:	eb13 0b01 	adds.w	fp, r3, r1
 80035f0:	eb44 0c02 	adc.w	ip, r4, r2
 80035f4:	4658      	mov	r0, fp
 80035f6:	4661      	mov	r1, ip
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f04f 0400 	mov.w	r4, #0
 8003600:	461a      	mov	r2, r3
 8003602:	4623      	mov	r3, r4
 8003604:	f7fc fdea 	bl	80001dc <__aeabi_uldivmod>
 8003608:	4603      	mov	r3, r0
 800360a:	460c      	mov	r4, r1
 800360c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800360e:	e04b      	b.n	80036a8 <UART_SetConfig+0x374>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003610:	f7ff f99a 	bl	8002948 <HAL_RCC_GetSysClockFreq>
 8003614:	4603      	mov	r3, r0
 8003616:	4619      	mov	r1, r3
 8003618:	f04f 0200 	mov.w	r2, #0
 800361c:	f04f 0300 	mov.w	r3, #0
 8003620:	f04f 0400 	mov.w	r4, #0
 8003624:	0214      	lsls	r4, r2, #8
 8003626:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800362a:	020b      	lsls	r3, r1, #8
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	6852      	ldr	r2, [r2, #4]
 8003630:	0852      	lsrs	r2, r2, #1
 8003632:	4611      	mov	r1, r2
 8003634:	f04f 0200 	mov.w	r2, #0
 8003638:	eb13 0b01 	adds.w	fp, r3, r1
 800363c:	eb44 0c02 	adc.w	ip, r4, r2
 8003640:	4658      	mov	r0, fp
 8003642:	4661      	mov	r1, ip
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f04f 0400 	mov.w	r4, #0
 800364c:	461a      	mov	r2, r3
 800364e:	4623      	mov	r3, r4
 8003650:	f7fc fdc4 	bl	80001dc <__aeabi_uldivmod>
 8003654:	4603      	mov	r3, r0
 8003656:	460c      	mov	r4, r1
 8003658:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800365a:	e025      	b.n	80036a8 <UART_SetConfig+0x374>
 800365c:	efff69f3 	.word	0xefff69f3
 8003660:	40008000 	.word	0x40008000
 8003664:	40013800 	.word	0x40013800
 8003668:	40021000 	.word	0x40021000
 800366c:	40004400 	.word	0x40004400
 8003670:	00f42400 	.word	0x00f42400
 8003674:	f4240000 	.word	0xf4240000
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	085b      	lsrs	r3, r3, #1
 800367e:	f04f 0400 	mov.w	r4, #0
 8003682:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8003686:	f144 0100 	adc.w	r1, r4, #0
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f04f 0400 	mov.w	r4, #0
 8003692:	461a      	mov	r2, r3
 8003694:	4623      	mov	r3, r4
 8003696:	f7fc fda1 	bl	80001dc <__aeabi_uldivmod>
 800369a:	4603      	mov	r3, r0
 800369c:	460c      	mov	r4, r1
 800369e:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80036a0:	e002      	b.n	80036a8 <UART_SetConfig+0x374>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	74fb      	strb	r3, [r7, #19]
            break;
 80036a6:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036ae:	d308      	bcc.n	80036c2 <UART_SetConfig+0x38e>
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036b6:	d204      	bcs.n	80036c2 <UART_SetConfig+0x38e>
        {
          huart->Instance->BRR = usartdiv;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	697a      	ldr	r2, [r7, #20]
 80036be:	60da      	str	r2, [r3, #12]
 80036c0:	e0f5      	b.n	80038ae <UART_SetConfig+0x57a>
        }
        else
        {
          ret = HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	74fb      	strb	r3, [r7, #19]
 80036c6:	e0f2      	b.n	80038ae <UART_SetConfig+0x57a>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	69db      	ldr	r3, [r3, #28]
 80036cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036d0:	d17f      	bne.n	80037d2 <UART_SetConfig+0x49e>
  {
    switch (clocksource)
 80036d2:	7efb      	ldrb	r3, [r7, #27]
 80036d4:	2b08      	cmp	r3, #8
 80036d6:	d85c      	bhi.n	8003792 <UART_SetConfig+0x45e>
 80036d8:	a201      	add	r2, pc, #4	; (adr r2, 80036e0 <UART_SetConfig+0x3ac>)
 80036da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036de:	bf00      	nop
 80036e0:	08003705 	.word	0x08003705
 80036e4:	08003723 	.word	0x08003723
 80036e8:	08003741 	.word	0x08003741
 80036ec:	08003793 	.word	0x08003793
 80036f0:	0800375d 	.word	0x0800375d
 80036f4:	08003793 	.word	0x08003793
 80036f8:	08003793 	.word	0x08003793
 80036fc:	08003793 	.word	0x08003793
 8003700:	0800377b 	.word	0x0800377b
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003704:	f7ff f9b6 	bl	8002a74 <HAL_RCC_GetPCLK1Freq>
 8003708:	4603      	mov	r3, r0
 800370a:	005a      	lsls	r2, r3, #1
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	085b      	lsrs	r3, r3, #1
 8003712:	441a      	add	r2, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	fbb2 f3f3 	udiv	r3, r2, r3
 800371c:	b29b      	uxth	r3, r3
 800371e:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003720:	e03a      	b.n	8003798 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003722:	f7ff f9bd 	bl	8002aa0 <HAL_RCC_GetPCLK2Freq>
 8003726:	4603      	mov	r3, r0
 8003728:	005a      	lsls	r2, r3, #1
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	085b      	lsrs	r3, r3, #1
 8003730:	441a      	add	r2, r3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	fbb2 f3f3 	udiv	r3, r2, r3
 800373a:	b29b      	uxth	r3, r3
 800373c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800373e:	e02b      	b.n	8003798 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	085b      	lsrs	r3, r3, #1
 8003746:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800374a:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	6852      	ldr	r2, [r2, #4]
 8003752:	fbb3 f3f2 	udiv	r3, r3, r2
 8003756:	b29b      	uxth	r3, r3
 8003758:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800375a:	e01d      	b.n	8003798 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800375c:	f7ff f8f4 	bl	8002948 <HAL_RCC_GetSysClockFreq>
 8003760:	4603      	mov	r3, r0
 8003762:	005a      	lsls	r2, r3, #1
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	085b      	lsrs	r3, r3, #1
 800376a:	441a      	add	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	fbb2 f3f3 	udiv	r3, r2, r3
 8003774:	b29b      	uxth	r3, r3
 8003776:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003778:	e00e      	b.n	8003798 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	085b      	lsrs	r3, r3, #1
 8003780:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	fbb2 f3f3 	udiv	r3, r2, r3
 800378c:	b29b      	uxth	r3, r3
 800378e:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003790:	e002      	b.n	8003798 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	74fb      	strb	r3, [r7, #19]
        break;
 8003796:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	2b0f      	cmp	r3, #15
 800379c:	d916      	bls.n	80037cc <UART_SetConfig+0x498>
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037a4:	d212      	bcs.n	80037cc <UART_SetConfig+0x498>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	f023 030f 	bic.w	r3, r3, #15
 80037ae:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	085b      	lsrs	r3, r3, #1
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	f003 0307 	and.w	r3, r3, #7
 80037ba:	b29a      	uxth	r2, r3
 80037bc:	897b      	ldrh	r3, [r7, #10]
 80037be:	4313      	orrs	r3, r2
 80037c0:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	897a      	ldrh	r2, [r7, #10]
 80037c8:	60da      	str	r2, [r3, #12]
 80037ca:	e070      	b.n	80038ae <UART_SetConfig+0x57a>
    }
    else
    {
      ret = HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	74fb      	strb	r3, [r7, #19]
 80037d0:	e06d      	b.n	80038ae <UART_SetConfig+0x57a>
    }
  }
  else
  {
    switch (clocksource)
 80037d2:	7efb      	ldrb	r3, [r7, #27]
 80037d4:	2b08      	cmp	r3, #8
 80037d6:	d859      	bhi.n	800388c <UART_SetConfig+0x558>
 80037d8:	a201      	add	r2, pc, #4	; (adr r2, 80037e0 <UART_SetConfig+0x4ac>)
 80037da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037de:	bf00      	nop
 80037e0:	08003805 	.word	0x08003805
 80037e4:	08003821 	.word	0x08003821
 80037e8:	0800383d 	.word	0x0800383d
 80037ec:	0800388d 	.word	0x0800388d
 80037f0:	08003859 	.word	0x08003859
 80037f4:	0800388d 	.word	0x0800388d
 80037f8:	0800388d 	.word	0x0800388d
 80037fc:	0800388d 	.word	0x0800388d
 8003800:	08003875 	.word	0x08003875
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003804:	f7ff f936 	bl	8002a74 <HAL_RCC_GetPCLK1Freq>
 8003808:	4602      	mov	r2, r0
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	085b      	lsrs	r3, r3, #1
 8003810:	441a      	add	r2, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	fbb2 f3f3 	udiv	r3, r2, r3
 800381a:	b29b      	uxth	r3, r3
 800381c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800381e:	e038      	b.n	8003892 <UART_SetConfig+0x55e>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003820:	f7ff f93e 	bl	8002aa0 <HAL_RCC_GetPCLK2Freq>
 8003824:	4602      	mov	r2, r0
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	085b      	lsrs	r3, r3, #1
 800382c:	441a      	add	r2, r3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	fbb2 f3f3 	udiv	r3, r2, r3
 8003836:	b29b      	uxth	r3, r3
 8003838:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800383a:	e02a      	b.n	8003892 <UART_SetConfig+0x55e>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	085b      	lsrs	r3, r3, #1
 8003842:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8003846:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	6852      	ldr	r2, [r2, #4]
 800384e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003852:	b29b      	uxth	r3, r3
 8003854:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003856:	e01c      	b.n	8003892 <UART_SetConfig+0x55e>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003858:	f7ff f876 	bl	8002948 <HAL_RCC_GetSysClockFreq>
 800385c:	4602      	mov	r2, r0
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	085b      	lsrs	r3, r3, #1
 8003864:	441a      	add	r2, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	fbb2 f3f3 	udiv	r3, r2, r3
 800386e:	b29b      	uxth	r3, r3
 8003870:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003872:	e00e      	b.n	8003892 <UART_SetConfig+0x55e>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	085b      	lsrs	r3, r3, #1
 800387a:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	fbb2 f3f3 	udiv	r3, r2, r3
 8003886:	b29b      	uxth	r3, r3
 8003888:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800388a:	e002      	b.n	8003892 <UART_SetConfig+0x55e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	74fb      	strb	r3, [r7, #19]
        break;
 8003890:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	2b0f      	cmp	r3, #15
 8003896:	d908      	bls.n	80038aa <UART_SetConfig+0x576>
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800389e:	d204      	bcs.n	80038aa <UART_SetConfig+0x576>
    {
      huart->Instance->BRR = usartdiv;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	697a      	ldr	r2, [r7, #20]
 80038a6:	60da      	str	r2, [r3, #12]
 80038a8:	e001      	b.n	80038ae <UART_SetConfig+0x57a>
    }
    else
    {
      ret = HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80038ba:	7cfb      	ldrb	r3, [r7, #19]
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3720      	adds	r7, #32
 80038c0:	46bd      	mov	sp, r7
 80038c2:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80038c6:	bf00      	nop

080038c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d4:	f003 0301 	and.w	r3, r3, #1
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d00a      	beq.n	80038f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	430a      	orrs	r2, r1
 80038f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f6:	f003 0302 	and.w	r3, r3, #2
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d00a      	beq.n	8003914 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	430a      	orrs	r2, r1
 8003912:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003918:	f003 0304 	and.w	r3, r3, #4
 800391c:	2b00      	cmp	r3, #0
 800391e:	d00a      	beq.n	8003936 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	430a      	orrs	r2, r1
 8003934:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393a:	f003 0308 	and.w	r3, r3, #8
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00a      	beq.n	8003958 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	430a      	orrs	r2, r1
 8003956:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395c:	f003 0310 	and.w	r3, r3, #16
 8003960:	2b00      	cmp	r3, #0
 8003962:	d00a      	beq.n	800397a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	430a      	orrs	r2, r1
 8003978:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397e:	f003 0320 	and.w	r3, r3, #32
 8003982:	2b00      	cmp	r3, #0
 8003984:	d00a      	beq.n	800399c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	430a      	orrs	r2, r1
 800399a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d01a      	beq.n	80039de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	430a      	orrs	r2, r1
 80039bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039c6:	d10a      	bne.n	80039de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	430a      	orrs	r2, r1
 80039dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d00a      	beq.n	8003a00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	430a      	orrs	r2, r1
 80039fe:	605a      	str	r2, [r3, #4]
  }
}
 8003a00:	bf00      	nop
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b086      	sub	sp, #24
 8003a10:	af02      	add	r7, sp, #8
 8003a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003a1a:	f7fd fbb7 	bl	800118c <HAL_GetTick>
 8003a1e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0308 	and.w	r3, r3, #8
 8003a2a:	2b08      	cmp	r3, #8
 8003a2c:	d10e      	bne.n	8003a4c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a2e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a32:	9300      	str	r3, [sp, #0]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f000 f82a 	bl	8003a96 <UART_WaitOnFlagUntilTimeout>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d001      	beq.n	8003a4c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	e020      	b.n	8003a8e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 0304 	and.w	r3, r3, #4
 8003a56:	2b04      	cmp	r3, #4
 8003a58:	d10e      	bne.n	8003a78 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a5a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a5e:	9300      	str	r3, [sp, #0]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2200      	movs	r2, #0
 8003a64:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f000 f814 	bl	8003a96 <UART_WaitOnFlagUntilTimeout>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d001      	beq.n	8003a78 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	e00a      	b.n	8003a8e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2220      	movs	r2, #32
 8003a7c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2220      	movs	r2, #32
 8003a82:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3710      	adds	r7, #16
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}

08003a96 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a96:	b580      	push	{r7, lr}
 8003a98:	b084      	sub	sp, #16
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	60f8      	str	r0, [r7, #12]
 8003a9e:	60b9      	str	r1, [r7, #8]
 8003aa0:	603b      	str	r3, [r7, #0]
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003aa6:	e02a      	b.n	8003afe <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aa8:	69bb      	ldr	r3, [r7, #24]
 8003aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aae:	d026      	beq.n	8003afe <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ab0:	f7fd fb6c 	bl	800118c <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	69ba      	ldr	r2, [r7, #24]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d302      	bcc.n	8003ac6 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ac0:	69bb      	ldr	r3, [r7, #24]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d11b      	bne.n	8003afe <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003ad4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	689a      	ldr	r2, [r3, #8]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f022 0201 	bic.w	r2, r2, #1
 8003ae4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2220      	movs	r2, #32
 8003aea:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2220      	movs	r2, #32
 8003af0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e00f      	b.n	8003b1e <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	69da      	ldr	r2, [r3, #28]
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	4013      	ands	r3, r2
 8003b08:	68ba      	ldr	r2, [r7, #8]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	bf0c      	ite	eq
 8003b0e:	2301      	moveq	r3, #1
 8003b10:	2300      	movne	r3, #0
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	461a      	mov	r2, r3
 8003b16:	79fb      	ldrb	r3, [r7, #7]
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d0c5      	beq.n	8003aa8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b1c:	2300      	movs	r3, #0
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3710      	adds	r7, #16
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
	...

08003b28 <__libc_init_array>:
 8003b28:	b570      	push	{r4, r5, r6, lr}
 8003b2a:	4e0d      	ldr	r6, [pc, #52]	; (8003b60 <__libc_init_array+0x38>)
 8003b2c:	4c0d      	ldr	r4, [pc, #52]	; (8003b64 <__libc_init_array+0x3c>)
 8003b2e:	1ba4      	subs	r4, r4, r6
 8003b30:	10a4      	asrs	r4, r4, #2
 8003b32:	2500      	movs	r5, #0
 8003b34:	42a5      	cmp	r5, r4
 8003b36:	d109      	bne.n	8003b4c <__libc_init_array+0x24>
 8003b38:	4e0b      	ldr	r6, [pc, #44]	; (8003b68 <__libc_init_array+0x40>)
 8003b3a:	4c0c      	ldr	r4, [pc, #48]	; (8003b6c <__libc_init_array+0x44>)
 8003b3c:	f000 f820 	bl	8003b80 <_init>
 8003b40:	1ba4      	subs	r4, r4, r6
 8003b42:	10a4      	asrs	r4, r4, #2
 8003b44:	2500      	movs	r5, #0
 8003b46:	42a5      	cmp	r5, r4
 8003b48:	d105      	bne.n	8003b56 <__libc_init_array+0x2e>
 8003b4a:	bd70      	pop	{r4, r5, r6, pc}
 8003b4c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b50:	4798      	blx	r3
 8003b52:	3501      	adds	r5, #1
 8003b54:	e7ee      	b.n	8003b34 <__libc_init_array+0xc>
 8003b56:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b5a:	4798      	blx	r3
 8003b5c:	3501      	adds	r5, #1
 8003b5e:	e7f2      	b.n	8003b46 <__libc_init_array+0x1e>
 8003b60:	08003c70 	.word	0x08003c70
 8003b64:	08003c70 	.word	0x08003c70
 8003b68:	08003c70 	.word	0x08003c70
 8003b6c:	08003c74 	.word	0x08003c74

08003b70 <memset>:
 8003b70:	4402      	add	r2, r0
 8003b72:	4603      	mov	r3, r0
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d100      	bne.n	8003b7a <memset+0xa>
 8003b78:	4770      	bx	lr
 8003b7a:	f803 1b01 	strb.w	r1, [r3], #1
 8003b7e:	e7f9      	b.n	8003b74 <memset+0x4>

08003b80 <_init>:
 8003b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b82:	bf00      	nop
 8003b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b86:	bc08      	pop	{r3}
 8003b88:	469e      	mov	lr, r3
 8003b8a:	4770      	bx	lr

08003b8c <_fini>:
 8003b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b8e:	bf00      	nop
 8003b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b92:	bc08      	pop	{r3}
 8003b94:	469e      	mov	lr, r3
 8003b96:	4770      	bx	lr
