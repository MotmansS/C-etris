
stm32L432KC_SSD1306.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a08  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003b94  08003b94  00013b94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bdc  08003bdc  0002003c  2**0
                  CONTENTS
  4 .ARM          00000008  08003bdc  08003bdc  00013bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003be4  08003be4  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003be4  08003be4  00013be4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003be8  08003be8  00013be8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  08003bec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  2000003c  08003c28  0002003c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001bc  08003c28  000201bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f287  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d53  00000000  00000000  0002f2f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e00  00000000  00000000  00031048  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d08  00000000  00000000  00031e48  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021ae0  00000000  00000000  00032b50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b7eb  00000000  00000000  00054630  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d15e0  00000000  00000000  0005fe1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001313fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a9c  00000000  00000000  00131478  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000003c 	.word	0x2000003c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08003b7c 	.word	0x08003b7c

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000040 	.word	0x20000040
 80001c8:	08003b7c 	.word	0x08003b7c

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b972 	b.w	80004c8 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9e08      	ldr	r6, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	4688      	mov	r8, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14b      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020a:	428a      	cmp	r2, r1
 800020c:	4615      	mov	r5, r2
 800020e:	d967      	bls.n	80002e0 <__udivmoddi4+0xe4>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b14a      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000216:	f1c2 0720 	rsb	r7, r2, #32
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	fa20 f707 	lsr.w	r7, r0, r7
 8000222:	4095      	lsls	r5, r2
 8000224:	ea47 0803 	orr.w	r8, r7, r3
 8000228:	4094      	lsls	r4, r2
 800022a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022e:	0c23      	lsrs	r3, r4, #16
 8000230:	fbb8 f7fe 	udiv	r7, r8, lr
 8000234:	fa1f fc85 	uxth.w	ip, r5
 8000238:	fb0e 8817 	mls	r8, lr, r7, r8
 800023c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000240:	fb07 f10c 	mul.w	r1, r7, ip
 8000244:	4299      	cmp	r1, r3
 8000246:	d909      	bls.n	800025c <__udivmoddi4+0x60>
 8000248:	18eb      	adds	r3, r5, r3
 800024a:	f107 30ff 	add.w	r0, r7, #4294967295
 800024e:	f080 811b 	bcs.w	8000488 <__udivmoddi4+0x28c>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 8118 	bls.w	8000488 <__udivmoddi4+0x28c>
 8000258:	3f02      	subs	r7, #2
 800025a:	442b      	add	r3, r5
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0fe 	udiv	r0, r3, lr
 8000264:	fb0e 3310 	mls	r3, lr, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000270:	45a4      	cmp	ip, r4
 8000272:	d909      	bls.n	8000288 <__udivmoddi4+0x8c>
 8000274:	192c      	adds	r4, r5, r4
 8000276:	f100 33ff 	add.w	r3, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x290>
 800027e:	45a4      	cmp	ip, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x290>
 8000284:	3802      	subs	r0, #2
 8000286:	442c      	add	r4, r5
 8000288:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800028c:	eba4 040c 	sub.w	r4, r4, ip
 8000290:	2700      	movs	r7, #0
 8000292:	b11e      	cbz	r6, 800029c <__udivmoddi4+0xa0>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c6 4300 	strd	r4, r3, [r6]
 800029c:	4639      	mov	r1, r7
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xbe>
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	f000 80eb 	beq.w	8000482 <__udivmoddi4+0x286>
 80002ac:	2700      	movs	r7, #0
 80002ae:	e9c6 0100 	strd	r0, r1, [r6]
 80002b2:	4638      	mov	r0, r7
 80002b4:	4639      	mov	r1, r7
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f783 	clz	r7, r3
 80002be:	2f00      	cmp	r7, #0
 80002c0:	d147      	bne.n	8000352 <__udivmoddi4+0x156>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd0>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80fa 	bhi.w	80004c0 <__udivmoddi4+0x2c4>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4698      	mov	r8, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa0>
 80002da:	e9c6 4800 	strd	r4, r8, [r6]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa0>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xe8>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 808f 	bne.w	800040c <__udivmoddi4+0x210>
 80002ee:	1b49      	subs	r1, r1, r5
 80002f0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f4:	fa1f f885 	uxth.w	r8, r5
 80002f8:	2701      	movs	r7, #1
 80002fa:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fe:	0c23      	lsrs	r3, r4, #16
 8000300:	fb0e 111c 	mls	r1, lr, ip, r1
 8000304:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000308:	fb08 f10c 	mul.w	r1, r8, ip
 800030c:	4299      	cmp	r1, r3
 800030e:	d907      	bls.n	8000320 <__udivmoddi4+0x124>
 8000310:	18eb      	adds	r3, r5, r3
 8000312:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x122>
 8000318:	4299      	cmp	r1, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2bc>
 800031e:	4684      	mov	ip, r0
 8000320:	1a59      	subs	r1, r3, r1
 8000322:	b2a3      	uxth	r3, r4
 8000324:	fbb1 f0fe 	udiv	r0, r1, lr
 8000328:	fb0e 1410 	mls	r4, lr, r0, r1
 800032c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000330:	fb08 f800 	mul.w	r8, r8, r0
 8000334:	45a0      	cmp	r8, r4
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x14c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x14a>
 8000340:	45a0      	cmp	r8, r4
 8000342:	f200 80b6 	bhi.w	80004b2 <__udivmoddi4+0x2b6>
 8000346:	4618      	mov	r0, r3
 8000348:	eba4 0408 	sub.w	r4, r4, r8
 800034c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000350:	e79f      	b.n	8000292 <__udivmoddi4+0x96>
 8000352:	f1c7 0c20 	rsb	ip, r7, #32
 8000356:	40bb      	lsls	r3, r7
 8000358:	fa22 fe0c 	lsr.w	lr, r2, ip
 800035c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000360:	fa01 f407 	lsl.w	r4, r1, r7
 8000364:	fa20 f50c 	lsr.w	r5, r0, ip
 8000368:	fa21 f30c 	lsr.w	r3, r1, ip
 800036c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000370:	4325      	orrs	r5, r4
 8000372:	fbb3 f9f8 	udiv	r9, r3, r8
 8000376:	0c2c      	lsrs	r4, r5, #16
 8000378:	fb08 3319 	mls	r3, r8, r9, r3
 800037c:	fa1f fa8e 	uxth.w	sl, lr
 8000380:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000384:	fb09 f40a 	mul.w	r4, r9, sl
 8000388:	429c      	cmp	r4, r3
 800038a:	fa02 f207 	lsl.w	r2, r2, r7
 800038e:	fa00 f107 	lsl.w	r1, r0, r7
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b0>
 8000394:	eb1e 0303 	adds.w	r3, lr, r3
 8000398:	f109 30ff 	add.w	r0, r9, #4294967295
 800039c:	f080 8087 	bcs.w	80004ae <__udivmoddi4+0x2b2>
 80003a0:	429c      	cmp	r4, r3
 80003a2:	f240 8084 	bls.w	80004ae <__udivmoddi4+0x2b2>
 80003a6:	f1a9 0902 	sub.w	r9, r9, #2
 80003aa:	4473      	add	r3, lr
 80003ac:	1b1b      	subs	r3, r3, r4
 80003ae:	b2ad      	uxth	r5, r5
 80003b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b4:	fb08 3310 	mls	r3, r8, r0, r3
 80003b8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003bc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c0:	45a2      	cmp	sl, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1da>
 80003c4:	eb1e 0404 	adds.w	r4, lr, r4
 80003c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003cc:	d26b      	bcs.n	80004a6 <__udivmoddi4+0x2aa>
 80003ce:	45a2      	cmp	sl, r4
 80003d0:	d969      	bls.n	80004a6 <__udivmoddi4+0x2aa>
 80003d2:	3802      	subs	r0, #2
 80003d4:	4474      	add	r4, lr
 80003d6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003da:	fba0 8902 	umull	r8, r9, r0, r2
 80003de:	eba4 040a 	sub.w	r4, r4, sl
 80003e2:	454c      	cmp	r4, r9
 80003e4:	46c2      	mov	sl, r8
 80003e6:	464b      	mov	r3, r9
 80003e8:	d354      	bcc.n	8000494 <__udivmoddi4+0x298>
 80003ea:	d051      	beq.n	8000490 <__udivmoddi4+0x294>
 80003ec:	2e00      	cmp	r6, #0
 80003ee:	d069      	beq.n	80004c4 <__udivmoddi4+0x2c8>
 80003f0:	ebb1 050a 	subs.w	r5, r1, sl
 80003f4:	eb64 0403 	sbc.w	r4, r4, r3
 80003f8:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003fc:	40fd      	lsrs	r5, r7
 80003fe:	40fc      	lsrs	r4, r7
 8000400:	ea4c 0505 	orr.w	r5, ip, r5
 8000404:	e9c6 5400 	strd	r5, r4, [r6]
 8000408:	2700      	movs	r7, #0
 800040a:	e747      	b.n	800029c <__udivmoddi4+0xa0>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f703 	lsr.w	r7, r0, r3
 8000414:	4095      	lsls	r5, r2
 8000416:	fa01 f002 	lsl.w	r0, r1, r2
 800041a:	fa21 f303 	lsr.w	r3, r1, r3
 800041e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000422:	4338      	orrs	r0, r7
 8000424:	0c01      	lsrs	r1, r0, #16
 8000426:	fbb3 f7fe 	udiv	r7, r3, lr
 800042a:	fa1f f885 	uxth.w	r8, r5
 800042e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000432:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000436:	fb07 f308 	mul.w	r3, r7, r8
 800043a:	428b      	cmp	r3, r1
 800043c:	fa04 f402 	lsl.w	r4, r4, r2
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x256>
 8000442:	1869      	adds	r1, r5, r1
 8000444:	f107 3cff 	add.w	ip, r7, #4294967295
 8000448:	d22f      	bcs.n	80004aa <__udivmoddi4+0x2ae>
 800044a:	428b      	cmp	r3, r1
 800044c:	d92d      	bls.n	80004aa <__udivmoddi4+0x2ae>
 800044e:	3f02      	subs	r7, #2
 8000450:	4429      	add	r1, r5
 8000452:	1acb      	subs	r3, r1, r3
 8000454:	b281      	uxth	r1, r0
 8000456:	fbb3 f0fe 	udiv	r0, r3, lr
 800045a:	fb0e 3310 	mls	r3, lr, r0, r3
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb00 f308 	mul.w	r3, r0, r8
 8000466:	428b      	cmp	r3, r1
 8000468:	d907      	bls.n	800047a <__udivmoddi4+0x27e>
 800046a:	1869      	adds	r1, r5, r1
 800046c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000470:	d217      	bcs.n	80004a2 <__udivmoddi4+0x2a6>
 8000472:	428b      	cmp	r3, r1
 8000474:	d915      	bls.n	80004a2 <__udivmoddi4+0x2a6>
 8000476:	3802      	subs	r0, #2
 8000478:	4429      	add	r1, r5
 800047a:	1ac9      	subs	r1, r1, r3
 800047c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000480:	e73b      	b.n	80002fa <__udivmoddi4+0xfe>
 8000482:	4637      	mov	r7, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e709      	b.n	800029c <__udivmoddi4+0xa0>
 8000488:	4607      	mov	r7, r0
 800048a:	e6e7      	b.n	800025c <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x8c>
 8000490:	4541      	cmp	r1, r8
 8000492:	d2ab      	bcs.n	80003ec <__udivmoddi4+0x1f0>
 8000494:	ebb8 0a02 	subs.w	sl, r8, r2
 8000498:	eb69 020e 	sbc.w	r2, r9, lr
 800049c:	3801      	subs	r0, #1
 800049e:	4613      	mov	r3, r2
 80004a0:	e7a4      	b.n	80003ec <__udivmoddi4+0x1f0>
 80004a2:	4660      	mov	r0, ip
 80004a4:	e7e9      	b.n	800047a <__udivmoddi4+0x27e>
 80004a6:	4618      	mov	r0, r3
 80004a8:	e795      	b.n	80003d6 <__udivmoddi4+0x1da>
 80004aa:	4667      	mov	r7, ip
 80004ac:	e7d1      	b.n	8000452 <__udivmoddi4+0x256>
 80004ae:	4681      	mov	r9, r0
 80004b0:	e77c      	b.n	80003ac <__udivmoddi4+0x1b0>
 80004b2:	3802      	subs	r0, #2
 80004b4:	442c      	add	r4, r5
 80004b6:	e747      	b.n	8000348 <__udivmoddi4+0x14c>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	442b      	add	r3, r5
 80004be:	e72f      	b.n	8000320 <__udivmoddi4+0x124>
 80004c0:	4638      	mov	r0, r7
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xda>
 80004c4:	4637      	mov	r7, r6
 80004c6:	e6e9      	b.n	800029c <__udivmoddi4+0xa0>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	blocks[0] = longBlock;
 80004d0:	4b11      	ldr	r3, [pc, #68]	; (8000518 <main+0x4c>)
 80004d2:	4a12      	ldr	r2, [pc, #72]	; (800051c <main+0x50>)
 80004d4:	ca07      	ldmia	r2, {r0, r1, r2}
 80004d6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	blocks[1] = blitzBlock;
 80004da:	4b0f      	ldr	r3, [pc, #60]	; (8000518 <main+0x4c>)
 80004dc:	4a10      	ldr	r2, [pc, #64]	; (8000520 <main+0x54>)
 80004de:	330c      	adds	r3, #12
 80004e0:	ca07      	ldmia	r2, {r0, r1, r2}
 80004e2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	blocks[2] = Lblock;
 80004e6:	4b0c      	ldr	r3, [pc, #48]	; (8000518 <main+0x4c>)
 80004e8:	4a0e      	ldr	r2, [pc, #56]	; (8000524 <main+0x58>)
 80004ea:	3318      	adds	r3, #24
 80004ec:	ca07      	ldmia	r2, {r0, r1, r2}
 80004ee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	blocks[3] = Tblock;
 80004f2:	4b09      	ldr	r3, [pc, #36]	; (8000518 <main+0x4c>)
 80004f4:	4a0c      	ldr	r2, [pc, #48]	; (8000528 <main+0x5c>)
 80004f6:	3324      	adds	r3, #36	; 0x24
 80004f8:	ca07      	ldmia	r2, {r0, r1, r2}
 80004fa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fe:	f000 fb58 	bl	8000bb2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000502:	f000 f813 	bl	800052c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000506:	f000 f97b 	bl	8000800 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800050a:	f000 f949 	bl	80007a0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800050e:	f000 f8a3 	bl	8000658 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000512:	f000 f905 	bl	8000720 <MX_I2C1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000516:	e7fe      	b.n	8000516 <main+0x4a>
 8000518:	200000a4 	.word	0x200000a4
 800051c:	20000000 	.word	0x20000000
 8000520:	2000000c 	.word	0x2000000c
 8000524:	20000018 	.word	0x20000018
 8000528:	20000024 	.word	0x20000024

0800052c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b0ac      	sub	sp, #176	; 0xb0
 8000530:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000532:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000536:	2244      	movs	r2, #68	; 0x44
 8000538:	2100      	movs	r1, #0
 800053a:	4618      	mov	r0, r3
 800053c:	f003 fb16 	bl	8003b6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000540:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	60da      	str	r2, [r3, #12]
 800054e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000550:	1d3b      	adds	r3, r7, #4
 8000552:	2254      	movs	r2, #84	; 0x54
 8000554:	2100      	movs	r1, #0
 8000556:	4618      	mov	r0, r3
 8000558:	f003 fb08 	bl	8003b6c <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 800055c:	f001 fd42 	bl	8001fe4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000560:	4b3c      	ldr	r3, [pc, #240]	; (8000654 <SystemClock_Config+0x128>)
 8000562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000566:	4a3b      	ldr	r2, [pc, #236]	; (8000654 <SystemClock_Config+0x128>)
 8000568:	f023 0318 	bic.w	r3, r3, #24
 800056c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000570:	2314      	movs	r3, #20
 8000572:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000574:	2301      	movs	r3, #1
 8000576:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000578:	2301      	movs	r3, #1
 800057a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800057e:	2300      	movs	r3, #0
 8000580:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000584:	2360      	movs	r3, #96	; 0x60
 8000586:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058a:	2302      	movs	r3, #2
 800058c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000590:	2301      	movs	r3, #1
 8000592:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000596:	2301      	movs	r3, #1
 8000598:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 16;
 800059c:	2310      	movs	r3, #16
 800059e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005a2:	2307      	movs	r3, #7
 80005a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005a8:	2302      	movs	r3, #2
 80005aa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005ae:	2302      	movs	r3, #2
 80005b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80005b8:	4618      	mov	r0, r3
 80005ba:	f001 fd87 	bl	80020cc <HAL_RCC_OscConfig>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80005c4:	f000 f966 	bl	8000894 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c8:	230f      	movs	r3, #15
 80005ca:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005cc:	2303      	movs	r3, #3
 80005ce:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d0:	2300      	movs	r3, #0
 80005d2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005d4:	2300      	movs	r3, #0
 80005d6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d8:	2300      	movs	r3, #0
 80005da:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005dc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80005e0:	2101      	movs	r1, #1
 80005e2:	4618      	mov	r0, r3
 80005e4:	f002 f960 	bl	80028a8 <HAL_RCC_ClockConfig>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80005ee:	f000 f951 	bl	8000894 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 80005f2:	f244 0342 	movw	r3, #16450	; 0x4042
 80005f6:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005f8:	2300      	movs	r3, #0
 80005fa:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80005fc:	2300      	movs	r3, #0
 80005fe:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000600:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000604:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000606:	2301      	movs	r3, #1
 8000608:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800060a:	2301      	movs	r3, #1
 800060c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 800060e:	2310      	movs	r3, #16
 8000610:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000612:	2307      	movs	r3, #7
 8000614:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000616:	2302      	movs	r3, #2
 8000618:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800061a:	2302      	movs	r3, #2
 800061c:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800061e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000622:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000624:	1d3b      	adds	r3, r7, #4
 8000626:	4618      	mov	r0, r3
 8000628:	f002 fb42 	bl	8002cb0 <HAL_RCCEx_PeriphCLKConfig>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <SystemClock_Config+0x10a>
  {
    Error_Handler();
 8000632:	f000 f92f 	bl	8000894 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000636:	f44f 7000 	mov.w	r0, #512	; 0x200
 800063a:	f001 fcf1 	bl	8002020 <HAL_PWREx_ControlVoltageScaling>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <SystemClock_Config+0x11c>
  {
    Error_Handler();
 8000644:	f000 f926 	bl	8000894 <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000648:	f002 fd24 	bl	8003094 <HAL_RCCEx_EnableMSIPLLMode>
}
 800064c:	bf00      	nop
 800064e:	37b0      	adds	r7, #176	; 0xb0
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	40021000 	.word	0x40021000

08000658 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b086      	sub	sp, #24
 800065c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800065e:	463b      	mov	r3, r7
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]
 800066c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 800066e:	4b29      	ldr	r3, [pc, #164]	; (8000714 <MX_ADC1_Init+0xbc>)
 8000670:	4a29      	ldr	r2, [pc, #164]	; (8000718 <MX_ADC1_Init+0xc0>)
 8000672:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000674:	4b27      	ldr	r3, [pc, #156]	; (8000714 <MX_ADC1_Init+0xbc>)
 8000676:	2200      	movs	r2, #0
 8000678:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800067a:	4b26      	ldr	r3, [pc, #152]	; (8000714 <MX_ADC1_Init+0xbc>)
 800067c:	2200      	movs	r2, #0
 800067e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000680:	4b24      	ldr	r3, [pc, #144]	; (8000714 <MX_ADC1_Init+0xbc>)
 8000682:	2200      	movs	r2, #0
 8000684:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000686:	4b23      	ldr	r3, [pc, #140]	; (8000714 <MX_ADC1_Init+0xbc>)
 8000688:	2200      	movs	r2, #0
 800068a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800068c:	4b21      	ldr	r3, [pc, #132]	; (8000714 <MX_ADC1_Init+0xbc>)
 800068e:	2204      	movs	r2, #4
 8000690:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000692:	4b20      	ldr	r3, [pc, #128]	; (8000714 <MX_ADC1_Init+0xbc>)
 8000694:	2200      	movs	r2, #0
 8000696:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000698:	4b1e      	ldr	r3, [pc, #120]	; (8000714 <MX_ADC1_Init+0xbc>)
 800069a:	2201      	movs	r2, #1
 800069c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800069e:	4b1d      	ldr	r3, [pc, #116]	; (8000714 <MX_ADC1_Init+0xbc>)
 80006a0:	2201      	movs	r2, #1
 80006a2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006a4:	4b1b      	ldr	r3, [pc, #108]	; (8000714 <MX_ADC1_Init+0xbc>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006ac:	4b19      	ldr	r3, [pc, #100]	; (8000714 <MX_ADC1_Init+0xbc>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006b2:	4b18      	ldr	r3, [pc, #96]	; (8000714 <MX_ADC1_Init+0xbc>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006b8:	4b16      	ldr	r3, [pc, #88]	; (8000714 <MX_ADC1_Init+0xbc>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006c0:	4b14      	ldr	r3, [pc, #80]	; (8000714 <MX_ADC1_Init+0xbc>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80006c6:	4b13      	ldr	r3, [pc, #76]	; (8000714 <MX_ADC1_Init+0xbc>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006ce:	4811      	ldr	r0, [pc, #68]	; (8000714 <MX_ADC1_Init+0xbc>)
 80006d0:	f000 fc60 	bl	8000f94 <HAL_ADC_Init>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80006da:	f000 f8db 	bl	8000894 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80006de:	4b0f      	ldr	r3, [pc, #60]	; (800071c <MX_ADC1_Init+0xc4>)
 80006e0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006e2:	2306      	movs	r3, #6
 80006e4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006e6:	2300      	movs	r3, #0
 80006e8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006ea:	237f      	movs	r3, #127	; 0x7f
 80006ec:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006ee:	2304      	movs	r3, #4
 80006f0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006f2:	2300      	movs	r3, #0
 80006f4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006f6:	463b      	mov	r3, r7
 80006f8:	4619      	mov	r1, r3
 80006fa:	4806      	ldr	r0, [pc, #24]	; (8000714 <MX_ADC1_Init+0xbc>)
 80006fc:	f000 fd90 	bl	8001220 <HAL_ADC_ConfigChannel>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000706:	f000 f8c5 	bl	8000894 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800070a:	bf00      	nop
 800070c:	3718      	adds	r7, #24
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	200000d4 	.word	0x200000d4
 8000718:	50040000 	.word	0x50040000
 800071c:	21800100 	.word	0x21800100

08000720 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000724:	4b1b      	ldr	r3, [pc, #108]	; (8000794 <MX_I2C1_Init+0x74>)
 8000726:	4a1c      	ldr	r2, [pc, #112]	; (8000798 <MX_I2C1_Init+0x78>)
 8000728:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 800072a:	4b1a      	ldr	r3, [pc, #104]	; (8000794 <MX_I2C1_Init+0x74>)
 800072c:	4a1b      	ldr	r2, [pc, #108]	; (800079c <MX_I2C1_Init+0x7c>)
 800072e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000730:	4b18      	ldr	r3, [pc, #96]	; (8000794 <MX_I2C1_Init+0x74>)
 8000732:	2200      	movs	r2, #0
 8000734:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000736:	4b17      	ldr	r3, [pc, #92]	; (8000794 <MX_I2C1_Init+0x74>)
 8000738:	2201      	movs	r2, #1
 800073a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800073c:	4b15      	ldr	r3, [pc, #84]	; (8000794 <MX_I2C1_Init+0x74>)
 800073e:	2200      	movs	r2, #0
 8000740:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000742:	4b14      	ldr	r3, [pc, #80]	; (8000794 <MX_I2C1_Init+0x74>)
 8000744:	2200      	movs	r2, #0
 8000746:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000748:	4b12      	ldr	r3, [pc, #72]	; (8000794 <MX_I2C1_Init+0x74>)
 800074a:	2200      	movs	r2, #0
 800074c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800074e:	4b11      	ldr	r3, [pc, #68]	; (8000794 <MX_I2C1_Init+0x74>)
 8000750:	2200      	movs	r2, #0
 8000752:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000754:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <MX_I2C1_Init+0x74>)
 8000756:	2200      	movs	r2, #0
 8000758:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800075a:	480e      	ldr	r0, [pc, #56]	; (8000794 <MX_I2C1_Init+0x74>)
 800075c:	f001 fb1c 	bl	8001d98 <HAL_I2C_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000766:	f000 f895 	bl	8000894 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800076a:	2100      	movs	r1, #0
 800076c:	4809      	ldr	r0, [pc, #36]	; (8000794 <MX_I2C1_Init+0x74>)
 800076e:	f001 fba2 	bl	8001eb6 <HAL_I2CEx_ConfigAnalogFilter>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000778:	f000 f88c 	bl	8000894 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800077c:	2100      	movs	r1, #0
 800077e:	4805      	ldr	r0, [pc, #20]	; (8000794 <MX_I2C1_Init+0x74>)
 8000780:	f001 fbe4 	bl	8001f4c <HAL_I2CEx_ConfigDigitalFilter>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800078a:	f000 f883 	bl	8000894 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000058 	.word	0x20000058
 8000798:	40005400 	.word	0x40005400
 800079c:	00707cbb 	.word	0x00707cbb

080007a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007a4:	4b14      	ldr	r3, [pc, #80]	; (80007f8 <MX_USART2_UART_Init+0x58>)
 80007a6:	4a15      	ldr	r2, [pc, #84]	; (80007fc <MX_USART2_UART_Init+0x5c>)
 80007a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007aa:	4b13      	ldr	r3, [pc, #76]	; (80007f8 <MX_USART2_UART_Init+0x58>)
 80007ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007b2:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <MX_USART2_UART_Init+0x58>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007b8:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <MX_USART2_UART_Init+0x58>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007be:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <MX_USART2_UART_Init+0x58>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007c4:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <MX_USART2_UART_Init+0x58>)
 80007c6:	220c      	movs	r2, #12
 80007c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ca:	4b0b      	ldr	r3, [pc, #44]	; (80007f8 <MX_USART2_UART_Init+0x58>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d0:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <MX_USART2_UART_Init+0x58>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007d6:	4b08      	ldr	r3, [pc, #32]	; (80007f8 <MX_USART2_UART_Init+0x58>)
 80007d8:	2200      	movs	r2, #0
 80007da:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007dc:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <MX_USART2_UART_Init+0x58>)
 80007de:	2200      	movs	r2, #0
 80007e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007e2:	4805      	ldr	r0, [pc, #20]	; (80007f8 <MX_USART2_UART_Init+0x58>)
 80007e4:	f002 fd56 	bl	8003294 <HAL_UART_Init>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007ee:	f000 f851 	bl	8000894 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	20000138 	.word	0x20000138
 80007fc:	40004400 	.word	0x40004400

08000800 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b088      	sub	sp, #32
 8000804:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000806:	f107 030c 	add.w	r3, r7, #12
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	605a      	str	r2, [r3, #4]
 8000810:	609a      	str	r2, [r3, #8]
 8000812:	60da      	str	r2, [r3, #12]
 8000814:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000816:	4b1d      	ldr	r3, [pc, #116]	; (800088c <MX_GPIO_Init+0x8c>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081a:	4a1c      	ldr	r2, [pc, #112]	; (800088c <MX_GPIO_Init+0x8c>)
 800081c:	f043 0304 	orr.w	r3, r3, #4
 8000820:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000822:	4b1a      	ldr	r3, [pc, #104]	; (800088c <MX_GPIO_Init+0x8c>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000826:	f003 0304 	and.w	r3, r3, #4
 800082a:	60bb      	str	r3, [r7, #8]
 800082c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800082e:	4b17      	ldr	r3, [pc, #92]	; (800088c <MX_GPIO_Init+0x8c>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000832:	4a16      	ldr	r2, [pc, #88]	; (800088c <MX_GPIO_Init+0x8c>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	64d3      	str	r3, [r2, #76]	; 0x4c
 800083a:	4b14      	ldr	r3, [pc, #80]	; (800088c <MX_GPIO_Init+0x8c>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000846:	4b11      	ldr	r3, [pc, #68]	; (800088c <MX_GPIO_Init+0x8c>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084a:	4a10      	ldr	r2, [pc, #64]	; (800088c <MX_GPIO_Init+0x8c>)
 800084c:	f043 0302 	orr.w	r3, r3, #2
 8000850:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000852:	4b0e      	ldr	r3, [pc, #56]	; (800088c <MX_GPIO_Init+0x8c>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000856:	f003 0302 	and.w	r3, r3, #2
 800085a:	603b      	str	r3, [r7, #0]
 800085c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800085e:	2200      	movs	r2, #0
 8000860:	2108      	movs	r1, #8
 8000862:	480b      	ldr	r0, [pc, #44]	; (8000890 <MX_GPIO_Init+0x90>)
 8000864:	f001 fa80 	bl	8001d68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000868:	2308      	movs	r3, #8
 800086a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086c:	2301      	movs	r3, #1
 800086e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	2300      	movs	r3, #0
 8000872:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000874:	2300      	movs	r3, #0
 8000876:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000878:	f107 030c 	add.w	r3, r7, #12
 800087c:	4619      	mov	r1, r3
 800087e:	4804      	ldr	r0, [pc, #16]	; (8000890 <MX_GPIO_Init+0x90>)
 8000880:	f001 f908 	bl	8001a94 <HAL_GPIO_Init>

}
 8000884:	bf00      	nop
 8000886:	3720      	adds	r7, #32
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	40021000 	.word	0x40021000
 8000890:	48000400 	.word	0x48000400

08000894 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000898:	bf00      	nop
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr
	...

080008a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008aa:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <HAL_MspInit+0x44>)
 80008ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008ae:	4a0e      	ldr	r2, [pc, #56]	; (80008e8 <HAL_MspInit+0x44>)
 80008b0:	f043 0301 	orr.w	r3, r3, #1
 80008b4:	6613      	str	r3, [r2, #96]	; 0x60
 80008b6:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <HAL_MspInit+0x44>)
 80008b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c2:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <HAL_MspInit+0x44>)
 80008c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008c6:	4a08      	ldr	r2, [pc, #32]	; (80008e8 <HAL_MspInit+0x44>)
 80008c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008cc:	6593      	str	r3, [r2, #88]	; 0x58
 80008ce:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <HAL_MspInit+0x44>)
 80008d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008d6:	603b      	str	r3, [r7, #0]
 80008d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008da:	bf00      	nop
 80008dc:	370c      	adds	r7, #12
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	40021000 	.word	0x40021000

080008ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b08a      	sub	sp, #40	; 0x28
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f4:	f107 0314 	add.w	r3, r7, #20
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]
 80008fe:	609a      	str	r2, [r3, #8]
 8000900:	60da      	str	r2, [r3, #12]
 8000902:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a15      	ldr	r2, [pc, #84]	; (8000960 <HAL_ADC_MspInit+0x74>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d124      	bne.n	8000958 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800090e:	4b15      	ldr	r3, [pc, #84]	; (8000964 <HAL_ADC_MspInit+0x78>)
 8000910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000912:	4a14      	ldr	r2, [pc, #80]	; (8000964 <HAL_ADC_MspInit+0x78>)
 8000914:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000918:	64d3      	str	r3, [r2, #76]	; 0x4c
 800091a:	4b12      	ldr	r3, [pc, #72]	; (8000964 <HAL_ADC_MspInit+0x78>)
 800091c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000922:	613b      	str	r3, [r7, #16]
 8000924:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000926:	4b0f      	ldr	r3, [pc, #60]	; (8000964 <HAL_ADC_MspInit+0x78>)
 8000928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092a:	4a0e      	ldr	r2, [pc, #56]	; (8000964 <HAL_ADC_MspInit+0x78>)
 800092c:	f043 0301 	orr.w	r3, r3, #1
 8000930:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000932:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <HAL_ADC_MspInit+0x78>)
 8000934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000936:	f003 0301 	and.w	r3, r3, #1
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA3     ------> ADC1_IN8 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800093e:	2308      	movs	r3, #8
 8000940:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000942:	230b      	movs	r3, #11
 8000944:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094a:	f107 0314 	add.w	r3, r7, #20
 800094e:	4619      	mov	r1, r3
 8000950:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000954:	f001 f89e 	bl	8001a94 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000958:	bf00      	nop
 800095a:	3728      	adds	r7, #40	; 0x28
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	50040000 	.word	0x50040000
 8000964:	40021000 	.word	0x40021000

08000968 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b08a      	sub	sp, #40	; 0x28
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000970:	f107 0314 	add.w	r3, r7, #20
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
 800097c:	60da      	str	r2, [r3, #12]
 800097e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a18      	ldr	r2, [pc, #96]	; (80009e8 <HAL_I2C_MspInit+0x80>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d129      	bne.n	80009de <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800098a:	4b18      	ldr	r3, [pc, #96]	; (80009ec <HAL_I2C_MspInit+0x84>)
 800098c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098e:	4a17      	ldr	r2, [pc, #92]	; (80009ec <HAL_I2C_MspInit+0x84>)
 8000990:	f043 0301 	orr.w	r3, r3, #1
 8000994:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000996:	4b15      	ldr	r3, [pc, #84]	; (80009ec <HAL_I2C_MspInit+0x84>)
 8000998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800099a:	f003 0301 	and.w	r3, r3, #1
 800099e:	613b      	str	r3, [r7, #16]
 80009a0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80009a2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80009a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009a8:	2312      	movs	r3, #18
 80009aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009ac:	2301      	movs	r3, #1
 80009ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b0:	2303      	movs	r3, #3
 80009b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009b4:	2304      	movs	r3, #4
 80009b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b8:	f107 0314 	add.w	r3, r7, #20
 80009bc:	4619      	mov	r1, r3
 80009be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009c2:	f001 f867 	bl	8001a94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009c6:	4b09      	ldr	r3, [pc, #36]	; (80009ec <HAL_I2C_MspInit+0x84>)
 80009c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ca:	4a08      	ldr	r2, [pc, #32]	; (80009ec <HAL_I2C_MspInit+0x84>)
 80009cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009d0:	6593      	str	r3, [r2, #88]	; 0x58
 80009d2:	4b06      	ldr	r3, [pc, #24]	; (80009ec <HAL_I2C_MspInit+0x84>)
 80009d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80009de:	bf00      	nop
 80009e0:	3728      	adds	r7, #40	; 0x28
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40005400 	.word	0x40005400
 80009ec:	40021000 	.word	0x40021000

080009f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b08a      	sub	sp, #40	; 0x28
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f8:	f107 0314 	add.w	r3, r7, #20
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	605a      	str	r2, [r3, #4]
 8000a02:	609a      	str	r2, [r3, #8]
 8000a04:	60da      	str	r2, [r3, #12]
 8000a06:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a20      	ldr	r2, [pc, #128]	; (8000a90 <HAL_UART_MspInit+0xa0>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d13a      	bne.n	8000a88 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a12:	4b20      	ldr	r3, [pc, #128]	; (8000a94 <HAL_UART_MspInit+0xa4>)
 8000a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a16:	4a1f      	ldr	r2, [pc, #124]	; (8000a94 <HAL_UART_MspInit+0xa4>)
 8000a18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a1c:	6593      	str	r3, [r2, #88]	; 0x58
 8000a1e:	4b1d      	ldr	r3, [pc, #116]	; (8000a94 <HAL_UART_MspInit+0xa4>)
 8000a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a26:	613b      	str	r3, [r7, #16]
 8000a28:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2a:	4b1a      	ldr	r3, [pc, #104]	; (8000a94 <HAL_UART_MspInit+0xa4>)
 8000a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2e:	4a19      	ldr	r2, [pc, #100]	; (8000a94 <HAL_UART_MspInit+0xa4>)
 8000a30:	f043 0301 	orr.w	r3, r3, #1
 8000a34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a36:	4b17      	ldr	r3, [pc, #92]	; (8000a94 <HAL_UART_MspInit+0xa4>)
 8000a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3a:	f003 0301 	and.w	r3, r3, #1
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000a42:	2304      	movs	r3, #4
 8000a44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a46:	2302      	movs	r3, #2
 8000a48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a4e:	2303      	movs	r3, #3
 8000a50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a52:	2307      	movs	r3, #7
 8000a54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000a56:	f107 0314 	add.w	r3, r7, #20
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a60:	f001 f818 	bl	8001a94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000a64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a72:	2303      	movs	r3, #3
 8000a74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000a76:	2303      	movs	r3, #3
 8000a78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000a7a:	f107 0314 	add.w	r3, r7, #20
 8000a7e:	4619      	mov	r1, r3
 8000a80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a84:	f001 f806 	bl	8001a94 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a88:	bf00      	nop
 8000a8a:	3728      	adds	r7, #40	; 0x28
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	40004400 	.word	0x40004400
 8000a94:	40021000 	.word	0x40021000

08000a98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a9c:	bf00      	nop
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr

08000aa6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aaa:	e7fe      	b.n	8000aaa <HardFault_Handler+0x4>

08000aac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab0:	e7fe      	b.n	8000ab0 <MemManage_Handler+0x4>

08000ab2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ab6:	e7fe      	b.n	8000ab6 <BusFault_Handler+0x4>

08000ab8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000abc:	e7fe      	b.n	8000abc <UsageFault_Handler+0x4>

08000abe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr

08000acc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ad0:	bf00      	nop
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr

08000ada <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ada:	b480      	push	{r7}
 8000adc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr

08000ae8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aec:	f000 f8b4 	bl	8000c58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000af0:	bf00      	nop
 8000af2:	bd80      	pop	{r7, pc}

08000af4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000af8:	4b17      	ldr	r3, [pc, #92]	; (8000b58 <SystemInit+0x64>)
 8000afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000afe:	4a16      	ldr	r2, [pc, #88]	; (8000b58 <SystemInit+0x64>)
 8000b00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000b08:	4b14      	ldr	r3, [pc, #80]	; (8000b5c <SystemInit+0x68>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a13      	ldr	r2, [pc, #76]	; (8000b5c <SystemInit+0x68>)
 8000b0e:	f043 0301 	orr.w	r3, r3, #1
 8000b12:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000b14:	4b11      	ldr	r3, [pc, #68]	; (8000b5c <SystemInit+0x68>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000b1a:	4b10      	ldr	r3, [pc, #64]	; (8000b5c <SystemInit+0x68>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4a0f      	ldr	r2, [pc, #60]	; (8000b5c <SystemInit+0x68>)
 8000b20:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000b24:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000b28:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000b2a:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <SystemInit+0x68>)
 8000b2c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b30:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b32:	4b0a      	ldr	r3, [pc, #40]	; (8000b5c <SystemInit+0x68>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4a09      	ldr	r2, [pc, #36]	; (8000b5c <SystemInit+0x68>)
 8000b38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b3c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000b3e:	4b07      	ldr	r3, [pc, #28]	; (8000b5c <SystemInit+0x68>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b44:	4b04      	ldr	r3, [pc, #16]	; (8000b58 <SystemInit+0x64>)
 8000b46:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b4a:	609a      	str	r2, [r3, #8]
#endif
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	e000ed00 	.word	0xe000ed00
 8000b5c:	40021000 	.word	0x40021000

08000b60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b98 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000b64:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000b66:	e003      	b.n	8000b70 <LoopCopyDataInit>

08000b68 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000b68:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000b6a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000b6c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000b6e:	3104      	adds	r1, #4

08000b70 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000b70:	480b      	ldr	r0, [pc, #44]	; (8000ba0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000b72:	4b0c      	ldr	r3, [pc, #48]	; (8000ba4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000b74:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000b76:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000b78:	d3f6      	bcc.n	8000b68 <CopyDataInit>
	ldr	r2, =_sbss
 8000b7a:	4a0b      	ldr	r2, [pc, #44]	; (8000ba8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000b7c:	e002      	b.n	8000b84 <LoopFillZerobss>

08000b7e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000b7e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000b80:	f842 3b04 	str.w	r3, [r2], #4

08000b84 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000b84:	4b09      	ldr	r3, [pc, #36]	; (8000bac <LoopForever+0x16>)
	cmp	r2, r3
 8000b86:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000b88:	d3f9      	bcc.n	8000b7e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b8a:	f7ff ffb3 	bl	8000af4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b8e:	f002 ffc9 	bl	8003b24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b92:	f7ff fc9b 	bl	80004cc <main>

08000b96 <LoopForever>:

LoopForever:
    b LoopForever
 8000b96:	e7fe      	b.n	8000b96 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b98:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000b9c:	08003bec 	.word	0x08003bec
	ldr	r0, =_sdata
 8000ba0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000ba4:	2000003c 	.word	0x2000003c
	ldr	r2, =_sbss
 8000ba8:	2000003c 	.word	0x2000003c
	ldr	r3, = _ebss
 8000bac:	200001bc 	.word	0x200001bc

08000bb0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bb0:	e7fe      	b.n	8000bb0 <ADC1_IRQHandler>

08000bb2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	b082      	sub	sp, #8
 8000bb6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bbc:	2003      	movs	r0, #3
 8000bbe:	f000 ff35 	bl	8001a2c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bc2:	2000      	movs	r0, #0
 8000bc4:	f000 f80e 	bl	8000be4 <HAL_InitTick>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d002      	beq.n	8000bd4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	71fb      	strb	r3, [r7, #7]
 8000bd2:	e001      	b.n	8000bd8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bd4:	f7ff fe66 	bl	80008a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
	...

08000be4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b084      	sub	sp, #16
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bec:	2300      	movs	r3, #0
 8000bee:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000bf0:	4b16      	ldr	r3, [pc, #88]	; (8000c4c <HAL_InitTick+0x68>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d022      	beq.n	8000c3e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000bf8:	4b15      	ldr	r3, [pc, #84]	; (8000c50 <HAL_InitTick+0x6c>)
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	4b13      	ldr	r3, [pc, #76]	; (8000c4c <HAL_InitTick+0x68>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c04:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f000 ff34 	bl	8001a7a <HAL_SYSTICK_Config>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d10f      	bne.n	8000c38 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2b0f      	cmp	r3, #15
 8000c1c:	d809      	bhi.n	8000c32 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	6879      	ldr	r1, [r7, #4]
 8000c22:	f04f 30ff 	mov.w	r0, #4294967295
 8000c26:	f000 ff0c 	bl	8001a42 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c2a:	4a0a      	ldr	r2, [pc, #40]	; (8000c54 <HAL_InitTick+0x70>)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	6013      	str	r3, [r2, #0]
 8000c30:	e007      	b.n	8000c42 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000c32:	2301      	movs	r3, #1
 8000c34:	73fb      	strb	r3, [r7, #15]
 8000c36:	e004      	b.n	8000c42 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	73fb      	strb	r3, [r7, #15]
 8000c3c:	e001      	b.n	8000c42 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c42:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	3710      	adds	r7, #16
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	20000038 	.word	0x20000038
 8000c50:	20000030 	.word	0x20000030
 8000c54:	20000034 	.word	0x20000034

08000c58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c5c:	4b05      	ldr	r3, [pc, #20]	; (8000c74 <HAL_IncTick+0x1c>)
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	4b05      	ldr	r3, [pc, #20]	; (8000c78 <HAL_IncTick+0x20>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4413      	add	r3, r2
 8000c66:	4a03      	ldr	r2, [pc, #12]	; (8000c74 <HAL_IncTick+0x1c>)
 8000c68:	6013      	str	r3, [r2, #0]
}
 8000c6a:	bf00      	nop
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr
 8000c74:	200001b8 	.word	0x200001b8
 8000c78:	20000038 	.word	0x20000038

08000c7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c80:	4b03      	ldr	r3, [pc, #12]	; (8000c90 <HAL_GetTick+0x14>)
 8000c82:	681b      	ldr	r3, [r3, #0]
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	200001b8 	.word	0x200001b8

08000c94 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	689b      	ldr	r3, [r3, #8]
 8000ca2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	431a      	orrs	r2, r3
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	609a      	str	r2, [r3, #8]
}
 8000cae:	bf00      	nop
 8000cb0:	370c      	adds	r7, #12
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr

08000cba <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	b083      	sub	sp, #12
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	6078      	str	r0, [r7, #4]
 8000cc2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	689b      	ldr	r3, [r3, #8]
 8000cc8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	431a      	orrs	r2, r3
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	609a      	str	r2, [r3, #8]
}
 8000cd4:	bf00      	nop
 8000cd6:	370c      	adds	r7, #12
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr

08000ce0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	689b      	ldr	r3, [r3, #8]
 8000cec:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	370c      	adds	r7, #12
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr

08000cfc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000cfc:	b490      	push	{r4, r7}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	60f8      	str	r0, [r7, #12]
 8000d04:	60b9      	str	r1, [r7, #8]
 8000d06:	607a      	str	r2, [r7, #4]
 8000d08:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	3360      	adds	r3, #96	; 0x60
 8000d0e:	461a      	mov	r2, r3
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	009b      	lsls	r3, r3, #2
 8000d14:	4413      	add	r3, r2
 8000d16:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000d18:	6822      	ldr	r2, [r4, #0]
 8000d1a:	4b08      	ldr	r3, [pc, #32]	; (8000d3c <LL_ADC_SetOffset+0x40>)
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	687a      	ldr	r2, [r7, #4]
 8000d20:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000d24:	683a      	ldr	r2, [r7, #0]
 8000d26:	430a      	orrs	r2, r1
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d2e:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000d30:	bf00      	nop
 8000d32:	3710      	adds	r7, #16
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bc90      	pop	{r4, r7}
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	03fff000 	.word	0x03fff000

08000d40 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000d40:	b490      	push	{r4, r7}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
 8000d48:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	3360      	adds	r3, #96	; 0x60
 8000d4e:	461a      	mov	r2, r3
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	4413      	add	r3, r2
 8000d56:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000d58:	6823      	ldr	r3, [r4, #0]
 8000d5a:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bc90      	pop	{r4, r7}
 8000d66:	4770      	bx	lr

08000d68 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000d68:	b490      	push	{r4, r7}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	60f8      	str	r0, [r7, #12]
 8000d70:	60b9      	str	r1, [r7, #8]
 8000d72:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	3360      	adds	r3, #96	; 0x60
 8000d78:	461a      	mov	r2, r3
 8000d7a:	68bb      	ldr	r3, [r7, #8]
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	4413      	add	r3, r2
 8000d80:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000d82:	6823      	ldr	r3, [r4, #0]
 8000d84:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000d8e:	bf00      	nop
 8000d90:	3710      	adds	r7, #16
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bc90      	pop	{r4, r7}
 8000d96:	4770      	bx	lr

08000d98 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000d98:	b490      	push	{r4, r7}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	60f8      	str	r0, [r7, #12]
 8000da0:	60b9      	str	r1, [r7, #8]
 8000da2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	3330      	adds	r3, #48	; 0x30
 8000da8:	461a      	mov	r2, r3
 8000daa:	68bb      	ldr	r3, [r7, #8]
 8000dac:	0a1b      	lsrs	r3, r3, #8
 8000dae:	009b      	lsls	r3, r3, #2
 8000db0:	f003 030c 	and.w	r3, r3, #12
 8000db4:	4413      	add	r3, r2
 8000db6:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000db8:	6822      	ldr	r2, [r4, #0]
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	f003 031f 	and.w	r3, r3, #31
 8000dc0:	211f      	movs	r1, #31
 8000dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000dc6:	43db      	mvns	r3, r3
 8000dc8:	401a      	ands	r2, r3
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	0e9b      	lsrs	r3, r3, #26
 8000dce:	f003 011f 	and.w	r1, r3, #31
 8000dd2:	68bb      	ldr	r3, [r7, #8]
 8000dd4:	f003 031f 	and.w	r3, r3, #31
 8000dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000de0:	bf00      	nop
 8000de2:	3710      	adds	r7, #16
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bc90      	pop	{r4, r7}
 8000de8:	4770      	bx	lr

08000dea <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000dea:	b490      	push	{r4, r7}
 8000dec:	b084      	sub	sp, #16
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	60f8      	str	r0, [r7, #12]
 8000df2:	60b9      	str	r1, [r7, #8]
 8000df4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	3314      	adds	r3, #20
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	0e5b      	lsrs	r3, r3, #25
 8000e00:	009b      	lsls	r3, r3, #2
 8000e02:	f003 0304 	and.w	r3, r3, #4
 8000e06:	4413      	add	r3, r2
 8000e08:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000e0a:	6822      	ldr	r2, [r4, #0]
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	0d1b      	lsrs	r3, r3, #20
 8000e10:	f003 031f 	and.w	r3, r3, #31
 8000e14:	2107      	movs	r1, #7
 8000e16:	fa01 f303 	lsl.w	r3, r1, r3
 8000e1a:	43db      	mvns	r3, r3
 8000e1c:	401a      	ands	r2, r3
 8000e1e:	68bb      	ldr	r3, [r7, #8]
 8000e20:	0d1b      	lsrs	r3, r3, #20
 8000e22:	f003 031f 	and.w	r3, r3, #31
 8000e26:	6879      	ldr	r1, [r7, #4]
 8000e28:	fa01 f303 	lsl.w	r3, r1, r3
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000e30:	bf00      	nop
 8000e32:	3710      	adds	r7, #16
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bc90      	pop	{r4, r7}
 8000e38:	4770      	bx	lr
	...

08000e3c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b085      	sub	sp, #20
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	60f8      	str	r0, [r7, #12]
 8000e44:	60b9      	str	r1, [r7, #8]
 8000e46:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000e4e:	68bb      	ldr	r3, [r7, #8]
 8000e50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e54:	43db      	mvns	r3, r3
 8000e56:	401a      	ands	r2, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	f003 0318 	and.w	r3, r3, #24
 8000e5e:	4908      	ldr	r1, [pc, #32]	; (8000e80 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000e60:	40d9      	lsrs	r1, r3
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	400b      	ands	r3, r1
 8000e66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e6a:	431a      	orrs	r2, r3
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000e72:	bf00      	nop
 8000e74:	3714      	adds	r7, #20
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	0007ffff 	.word	0x0007ffff

08000e84 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	689b      	ldr	r3, [r3, #8]
 8000e90:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000e94:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000e98:	687a      	ldr	r2, [r7, #4]
 8000e9a:	6093      	str	r3, [r2, #8]
}
 8000e9c:	bf00      	nop
 8000e9e:	370c      	adds	r7, #12
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr

08000ea8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	689b      	ldr	r3, [r3, #8]
 8000eb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000eb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000ebc:	d101      	bne.n	8000ec2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e000      	b.n	8000ec4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000ec2:	2300      	movs	r3, #0
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	370c      	adds	r7, #12
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr

08000ed0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	689b      	ldr	r3, [r3, #8]
 8000edc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000ee0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000ee4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000eec:	bf00      	nop
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	689b      	ldr	r3, [r3, #8]
 8000f04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f08:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000f0c:	d101      	bne.n	8000f12 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e000      	b.n	8000f14 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000f12:	2300      	movs	r3, #0
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr

08000f20 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	689b      	ldr	r3, [r3, #8]
 8000f2c:	f003 0301 	and.w	r3, r3, #1
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d101      	bne.n	8000f38 <LL_ADC_IsEnabled+0x18>
 8000f34:	2301      	movs	r3, #1
 8000f36:	e000      	b.n	8000f3a <LL_ADC_IsEnabled+0x1a>
 8000f38:	2300      	movs	r3, #0
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr

08000f46 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000f46:	b480      	push	{r7}
 8000f48:	b083      	sub	sp, #12
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	689b      	ldr	r3, [r3, #8]
 8000f52:	f003 0304 	and.w	r3, r3, #4
 8000f56:	2b04      	cmp	r3, #4
 8000f58:	d101      	bne.n	8000f5e <LL_ADC_REG_IsConversionOngoing+0x18>
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e000      	b.n	8000f60 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000f5e:	2300      	movs	r3, #0
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	689b      	ldr	r3, [r3, #8]
 8000f78:	f003 0308 	and.w	r3, r3, #8
 8000f7c:	2b08      	cmp	r3, #8
 8000f7e:	d101      	bne.n	8000f84 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000f80:	2301      	movs	r3, #1
 8000f82:	e000      	b.n	8000f86 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000f84:	2300      	movs	r3, #0
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
	...

08000f94 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b088      	sub	sp, #32
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d101      	bne.n	8000fae <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000faa:	2301      	movs	r3, #1
 8000fac:	e12a      	b.n	8001204 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	691b      	ldr	r3, [r3, #16]
 8000fb2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d109      	bne.n	8000fd0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f7ff fc95 	bl	80008ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2200      	movs	r2, #0
 8000fcc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff ff67 	bl	8000ea8 <LL_ADC_IsDeepPowerDownEnabled>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d004      	beq.n	8000fea <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff ff4d 	bl	8000e84 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff ff82 	bl	8000ef8 <LL_ADC_IsInternalRegulatorEnabled>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d113      	bne.n	8001022 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff ff66 	bl	8000ed0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001004:	4b81      	ldr	r3, [pc, #516]	; (800120c <HAL_ADC_Init+0x278>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	099b      	lsrs	r3, r3, #6
 800100a:	4a81      	ldr	r2, [pc, #516]	; (8001210 <HAL_ADC_Init+0x27c>)
 800100c:	fba2 2303 	umull	r2, r3, r2, r3
 8001010:	099b      	lsrs	r3, r3, #6
 8001012:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001014:	e002      	b.n	800101c <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	3b01      	subs	r3, #1
 800101a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d1f9      	bne.n	8001016 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff ff66 	bl	8000ef8 <LL_ADC_IsInternalRegulatorEnabled>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d10d      	bne.n	800104e <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001036:	f043 0210 	orr.w	r2, r3, #16
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001042:	f043 0201 	orr.w	r2, r3, #1
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff ff77 	bl	8000f46 <LL_ADC_REG_IsConversionOngoing>
 8001058:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800105e:	f003 0310 	and.w	r3, r3, #16
 8001062:	2b00      	cmp	r3, #0
 8001064:	f040 80c5 	bne.w	80011f2 <HAL_ADC_Init+0x25e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	2b00      	cmp	r3, #0
 800106c:	f040 80c1 	bne.w	80011f2 <HAL_ADC_Init+0x25e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001074:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001078:	f043 0202 	orr.w	r2, r3, #2
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff ff4b 	bl	8000f20 <LL_ADC_IsEnabled>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d10b      	bne.n	80010a8 <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001090:	4860      	ldr	r0, [pc, #384]	; (8001214 <HAL_ADC_Init+0x280>)
 8001092:	f7ff ff45 	bl	8000f20 <LL_ADC_IsEnabled>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d105      	bne.n	80010a8 <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	4619      	mov	r1, r3
 80010a2:	485d      	ldr	r0, [pc, #372]	; (8001218 <HAL_ADC_Init+0x284>)
 80010a4:	f7ff fdf6 	bl	8000c94 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	7e5b      	ldrb	r3, [r3, #25]
 80010ac:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80010b2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80010b8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80010be:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010c6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80010c8:	4313      	orrs	r3, r2
 80010ca:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d106      	bne.n	80010e4 <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010da:	3b01      	subs	r3, #1
 80010dc:	045b      	lsls	r3, r3, #17
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d009      	beq.n	8001100 <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010f0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010f8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	68da      	ldr	r2, [r3, #12]
 8001106:	4b45      	ldr	r3, [pc, #276]	; (800121c <HAL_ADC_Init+0x288>)
 8001108:	4013      	ands	r3, r2
 800110a:	687a      	ldr	r2, [r7, #4]
 800110c:	6812      	ldr	r2, [r2, #0]
 800110e:	69b9      	ldr	r1, [r7, #24]
 8001110:	430b      	orrs	r3, r1
 8001112:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff ff14 	bl	8000f46 <LL_ADC_REG_IsConversionOngoing>
 800111e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff ff21 	bl	8000f6c <LL_ADC_INJ_IsConversionOngoing>
 800112a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d13d      	bne.n	80011ae <HAL_ADC_Init+0x21a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d13a      	bne.n	80011ae <HAL_ADC_Init+0x21a>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800113c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001144:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001146:	4313      	orrs	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001154:	f023 0302 	bic.w	r3, r3, #2
 8001158:	687a      	ldr	r2, [r7, #4]
 800115a:	6812      	ldr	r2, [r2, #0]
 800115c:	69b9      	ldr	r1, [r7, #24]
 800115e:	430b      	orrs	r3, r1
 8001160:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001168:	2b01      	cmp	r3, #1
 800116a:	d118      	bne.n	800119e <HAL_ADC_Init+0x20a>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	691b      	ldr	r3, [r3, #16]
 8001172:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001176:	f023 0304 	bic.w	r3, r3, #4
 800117a:	687a      	ldr	r2, [r7, #4]
 800117c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800117e:	687a      	ldr	r2, [r7, #4]
 8001180:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001182:	4311      	orrs	r1, r2
 8001184:	687a      	ldr	r2, [r7, #4]
 8001186:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001188:	4311      	orrs	r1, r2
 800118a:	687a      	ldr	r2, [r7, #4]
 800118c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800118e:	430a      	orrs	r2, r1
 8001190:	431a      	orrs	r2, r3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f042 0201 	orr.w	r2, r2, #1
 800119a:	611a      	str	r2, [r3, #16]
 800119c:	e007      	b.n	80011ae <HAL_ADC_Init+0x21a>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	691a      	ldr	r2, [r3, #16]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f022 0201 	bic.w	r2, r2, #1
 80011ac:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	691b      	ldr	r3, [r3, #16]
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d10c      	bne.n	80011d0 <HAL_ADC_Init+0x23c>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011bc:	f023 010f 	bic.w	r1, r3, #15
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	69db      	ldr	r3, [r3, #28]
 80011c4:	1e5a      	subs	r2, r3, #1
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	430a      	orrs	r2, r1
 80011cc:	631a      	str	r2, [r3, #48]	; 0x30
 80011ce:	e007      	b.n	80011e0 <HAL_ADC_Init+0x24c>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f022 020f 	bic.w	r2, r2, #15
 80011de:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011e4:	f023 0303 	bic.w	r3, r3, #3
 80011e8:	f043 0201 	orr.w	r2, r3, #1
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	655a      	str	r2, [r3, #84]	; 0x54
 80011f0:	e007      	b.n	8001202 <HAL_ADC_Init+0x26e>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011f6:	f043 0210 	orr.w	r2, r3, #16
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001202:	7ffb      	ldrb	r3, [r7, #31]
}
 8001204:	4618      	mov	r0, r3
 8001206:	3720      	adds	r7, #32
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	20000030 	.word	0x20000030
 8001210:	053e2d63 	.word	0x053e2d63
 8001214:	50040000 	.word	0x50040000
 8001218:	50040300 	.word	0x50040300
 800121c:	fff0c007 	.word	0xfff0c007

08001220 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b0a6      	sub	sp, #152	; 0x98
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800122a:	2300      	movs	r3, #0
 800122c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001230:	2300      	movs	r3, #0
 8001232:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800123a:	2b01      	cmp	r3, #1
 800123c:	d101      	bne.n	8001242 <HAL_ADC_ConfigChannel+0x22>
 800123e:	2302      	movs	r3, #2
 8001240:	e338      	b.n	80018b4 <HAL_ADC_ConfigChannel+0x694>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2201      	movs	r2, #1
 8001246:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff fe79 	bl	8000f46 <LL_ADC_REG_IsConversionOngoing>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	f040 831d 	bne.w	8001896 <HAL_ADC_ConfigChannel+0x676>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	2b05      	cmp	r3, #5
 8001262:	d824      	bhi.n	80012ae <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	3b02      	subs	r3, #2
 800126a:	2b03      	cmp	r3, #3
 800126c:	d81b      	bhi.n	80012a6 <HAL_ADC_ConfigChannel+0x86>
 800126e:	a201      	add	r2, pc, #4	; (adr r2, 8001274 <HAL_ADC_ConfigChannel+0x54>)
 8001270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001274:	08001285 	.word	0x08001285
 8001278:	0800128d 	.word	0x0800128d
 800127c:	08001295 	.word	0x08001295
 8001280:	0800129d 	.word	0x0800129d
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	220c      	movs	r2, #12
 8001288:	605a      	str	r2, [r3, #4]
 800128a:	e011      	b.n	80012b0 <HAL_ADC_ConfigChannel+0x90>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	2212      	movs	r2, #18
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	e00d      	b.n	80012b0 <HAL_ADC_ConfigChannel+0x90>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	2218      	movs	r2, #24
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	e009      	b.n	80012b0 <HAL_ADC_ConfigChannel+0x90>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012a2:	605a      	str	r2, [r3, #4]
 80012a4:	e004      	b.n	80012b0 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	2206      	movs	r2, #6
 80012aa:	605a      	str	r2, [r3, #4]
 80012ac:	e000      	b.n	80012b0 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80012ae:	bf00      	nop
    #endif
    
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6818      	ldr	r0, [r3, #0]
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	6859      	ldr	r1, [r3, #4]
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	461a      	mov	r2, r3
 80012be:	f7ff fd6b 	bl	8000d98 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff fe3d 	bl	8000f46 <LL_ADC_REG_IsConversionOngoing>
 80012cc:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff fe49 	bl	8000f6c <LL_ADC_INJ_IsConversionOngoing>
 80012da:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80012de:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	f040 8148 	bne.w	8001578 <HAL_ADC_ConfigChannel+0x358>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80012e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	f040 8143 	bne.w	8001578 <HAL_ADC_ConfigChannel+0x358>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6818      	ldr	r0, [r3, #0]
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	6819      	ldr	r1, [r3, #0]
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	461a      	mov	r2, r3
 8001300:	f7ff fd73 	bl	8000dea <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	695a      	ldr	r2, [r3, #20]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	68db      	ldr	r3, [r3, #12]
 800130e:	08db      	lsrs	r3, r3, #3
 8001310:	f003 0303 	and.w	r3, r3, #3
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	fa02 f303 	lsl.w	r3, r2, r3
 800131a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	691b      	ldr	r3, [r3, #16]
 8001322:	2b04      	cmp	r3, #4
 8001324:	d00a      	beq.n	800133c <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6818      	ldr	r0, [r3, #0]
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	6919      	ldr	r1, [r3, #16]
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001336:	f7ff fce1 	bl	8000cfc <LL_ADC_SetOffset>
 800133a:	e11d      	b.n	8001578 <HAL_ADC_ConfigChannel+0x358>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2100      	movs	r1, #0
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff fcfc 	bl	8000d40 <LL_ADC_GetOffsetChannel>
 8001348:	4603      	mov	r3, r0
 800134a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800134e:	2b00      	cmp	r3, #0
 8001350:	d10a      	bne.n	8001368 <HAL_ADC_ConfigChannel+0x148>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2100      	movs	r1, #0
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff fcf1 	bl	8000d40 <LL_ADC_GetOffsetChannel>
 800135e:	4603      	mov	r3, r0
 8001360:	0e9b      	lsrs	r3, r3, #26
 8001362:	f003 021f 	and.w	r2, r3, #31
 8001366:	e012      	b.n	800138e <HAL_ADC_ConfigChannel+0x16e>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2100      	movs	r1, #0
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff fce6 	bl	8000d40 <LL_ADC_GetOffsetChannel>
 8001374:	4603      	mov	r3, r0
 8001376:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800137a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800137e:	fa93 f3a3 	rbit	r3, r3
 8001382:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001384:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001386:	fab3 f383 	clz	r3, r3
 800138a:	b2db      	uxtb	r3, r3
 800138c:	461a      	mov	r2, r3
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001396:	2b00      	cmp	r3, #0
 8001398:	d105      	bne.n	80013a6 <HAL_ADC_ConfigChannel+0x186>
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	0e9b      	lsrs	r3, r3, #26
 80013a0:	f003 031f 	and.w	r3, r3, #31
 80013a4:	e00a      	b.n	80013bc <HAL_ADC_ConfigChannel+0x19c>
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80013ae:	fa93 f3a3 	rbit	r3, r3
 80013b2:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 80013b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80013b6:	fab3 f383 	clz	r3, r3
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	429a      	cmp	r2, r3
 80013be:	d106      	bne.n	80013ce <HAL_ADC_ConfigChannel+0x1ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2200      	movs	r2, #0
 80013c6:	2100      	movs	r1, #0
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff fccd 	bl	8000d68 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2101      	movs	r1, #1
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff fcb3 	bl	8000d40 <LL_ADC_GetOffsetChannel>
 80013da:	4603      	mov	r3, r0
 80013dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d10a      	bne.n	80013fa <HAL_ADC_ConfigChannel+0x1da>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2101      	movs	r1, #1
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff fca8 	bl	8000d40 <LL_ADC_GetOffsetChannel>
 80013f0:	4603      	mov	r3, r0
 80013f2:	0e9b      	lsrs	r3, r3, #26
 80013f4:	f003 021f 	and.w	r2, r3, #31
 80013f8:	e010      	b.n	800141c <HAL_ADC_ConfigChannel+0x1fc>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	2101      	movs	r1, #1
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff fc9d 	bl	8000d40 <LL_ADC_GetOffsetChannel>
 8001406:	4603      	mov	r3, r0
 8001408:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800140a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800140c:	fa93 f3a3 	rbit	r3, r3
 8001410:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001412:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001414:	fab3 f383 	clz	r3, r3
 8001418:	b2db      	uxtb	r3, r3
 800141a:	461a      	mov	r2, r3
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001424:	2b00      	cmp	r3, #0
 8001426:	d105      	bne.n	8001434 <HAL_ADC_ConfigChannel+0x214>
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	0e9b      	lsrs	r3, r3, #26
 800142e:	f003 031f 	and.w	r3, r3, #31
 8001432:	e00a      	b.n	800144a <HAL_ADC_ConfigChannel+0x22a>
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800143a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800143c:	fa93 f3a3 	rbit	r3, r3
 8001440:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001442:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001444:	fab3 f383 	clz	r3, r3
 8001448:	b2db      	uxtb	r3, r3
 800144a:	429a      	cmp	r2, r3
 800144c:	d106      	bne.n	800145c <HAL_ADC_ConfigChannel+0x23c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2200      	movs	r2, #0
 8001454:	2101      	movs	r1, #1
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff fc86 	bl	8000d68 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2102      	movs	r1, #2
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff fc6c 	bl	8000d40 <LL_ADC_GetOffsetChannel>
 8001468:	4603      	mov	r3, r0
 800146a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800146e:	2b00      	cmp	r3, #0
 8001470:	d10a      	bne.n	8001488 <HAL_ADC_ConfigChannel+0x268>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	2102      	movs	r1, #2
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff fc61 	bl	8000d40 <LL_ADC_GetOffsetChannel>
 800147e:	4603      	mov	r3, r0
 8001480:	0e9b      	lsrs	r3, r3, #26
 8001482:	f003 021f 	and.w	r2, r3, #31
 8001486:	e010      	b.n	80014aa <HAL_ADC_ConfigChannel+0x28a>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2102      	movs	r1, #2
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff fc56 	bl	8000d40 <LL_ADC_GetOffsetChannel>
 8001494:	4603      	mov	r3, r0
 8001496:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001498:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800149a:	fa93 f3a3 	rbit	r3, r3
 800149e:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 80014a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014a2:	fab3 f383 	clz	r3, r3
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	461a      	mov	r2, r3
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d105      	bne.n	80014c2 <HAL_ADC_ConfigChannel+0x2a2>
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	0e9b      	lsrs	r3, r3, #26
 80014bc:	f003 031f 	and.w	r3, r3, #31
 80014c0:	e00a      	b.n	80014d8 <HAL_ADC_ConfigChannel+0x2b8>
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80014ca:	fa93 f3a3 	rbit	r3, r3
 80014ce:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80014d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014d2:	fab3 f383 	clz	r3, r3
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	429a      	cmp	r2, r3
 80014da:	d106      	bne.n	80014ea <HAL_ADC_ConfigChannel+0x2ca>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2200      	movs	r2, #0
 80014e2:	2102      	movs	r1, #2
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff fc3f 	bl	8000d68 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	2103      	movs	r1, #3
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff fc25 	bl	8000d40 <LL_ADC_GetOffsetChannel>
 80014f6:	4603      	mov	r3, r0
 80014f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d10a      	bne.n	8001516 <HAL_ADC_ConfigChannel+0x2f6>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2103      	movs	r1, #3
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff fc1a 	bl	8000d40 <LL_ADC_GetOffsetChannel>
 800150c:	4603      	mov	r3, r0
 800150e:	0e9b      	lsrs	r3, r3, #26
 8001510:	f003 021f 	and.w	r2, r3, #31
 8001514:	e010      	b.n	8001538 <HAL_ADC_ConfigChannel+0x318>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	2103      	movs	r1, #3
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff fc0f 	bl	8000d40 <LL_ADC_GetOffsetChannel>
 8001522:	4603      	mov	r3, r0
 8001524:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001526:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001528:	fa93 f3a3 	rbit	r3, r3
 800152c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800152e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001530:	fab3 f383 	clz	r3, r3
 8001534:	b2db      	uxtb	r3, r3
 8001536:	461a      	mov	r2, r3
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001540:	2b00      	cmp	r3, #0
 8001542:	d105      	bne.n	8001550 <HAL_ADC_ConfigChannel+0x330>
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	0e9b      	lsrs	r3, r3, #26
 800154a:	f003 031f 	and.w	r3, r3, #31
 800154e:	e00a      	b.n	8001566 <HAL_ADC_ConfigChannel+0x346>
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001556:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001558:	fa93 f3a3 	rbit	r3, r3
 800155c:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 800155e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001560:	fab3 f383 	clz	r3, r3
 8001564:	b2db      	uxtb	r3, r3
 8001566:	429a      	cmp	r2, r3
 8001568:	d106      	bne.n	8001578 <HAL_ADC_ConfigChannel+0x358>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2200      	movs	r2, #0
 8001570:	2103      	movs	r1, #3
 8001572:	4618      	mov	r0, r3
 8001574:	f7ff fbf8 	bl	8000d68 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff fccf 	bl	8000f20 <LL_ADC_IsEnabled>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	f040 810c 	bne.w	80017a2 <HAL_ADC_ConfigChannel+0x582>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6818      	ldr	r0, [r3, #0]
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	6819      	ldr	r1, [r3, #0]
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	68db      	ldr	r3, [r3, #12]
 8001596:	461a      	mov	r2, r3
 8001598:	f7ff fc50 	bl	8000e3c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	4aa8      	ldr	r2, [pc, #672]	; (8001844 <HAL_ADC_ConfigChannel+0x624>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	f040 80fd 	bne.w	80017a2 <HAL_ADC_ConfigChannel+0x582>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d10b      	bne.n	80015d0 <HAL_ADC_ConfigChannel+0x3b0>
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	0e9b      	lsrs	r3, r3, #26
 80015be:	3301      	adds	r3, #1
 80015c0:	f003 031f 	and.w	r3, r3, #31
 80015c4:	2b09      	cmp	r3, #9
 80015c6:	bf94      	ite	ls
 80015c8:	2301      	movls	r3, #1
 80015ca:	2300      	movhi	r3, #0
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	e012      	b.n	80015f6 <HAL_ADC_ConfigChannel+0x3d6>
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015d8:	fa93 f3a3 	rbit	r3, r3
 80015dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80015de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015e0:	fab3 f383 	clz	r3, r3
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	3301      	adds	r3, #1
 80015e8:	f003 031f 	and.w	r3, r3, #31
 80015ec:	2b09      	cmp	r3, #9
 80015ee:	bf94      	ite	ls
 80015f0:	2301      	movls	r3, #1
 80015f2:	2300      	movhi	r3, #0
 80015f4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d064      	beq.n	80016c4 <HAL_ADC_ConfigChannel+0x4a4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001602:	2b00      	cmp	r3, #0
 8001604:	d107      	bne.n	8001616 <HAL_ADC_ConfigChannel+0x3f6>
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	0e9b      	lsrs	r3, r3, #26
 800160c:	3301      	adds	r3, #1
 800160e:	069b      	lsls	r3, r3, #26
 8001610:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001614:	e00e      	b.n	8001634 <HAL_ADC_ConfigChannel+0x414>
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800161c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800161e:	fa93 f3a3 	rbit	r3, r3
 8001622:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001626:	fab3 f383 	clz	r3, r3
 800162a:	b2db      	uxtb	r3, r3
 800162c:	3301      	adds	r3, #1
 800162e:	069b      	lsls	r3, r3, #26
 8001630:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800163c:	2b00      	cmp	r3, #0
 800163e:	d109      	bne.n	8001654 <HAL_ADC_ConfigChannel+0x434>
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	0e9b      	lsrs	r3, r3, #26
 8001646:	3301      	adds	r3, #1
 8001648:	f003 031f 	and.w	r3, r3, #31
 800164c:	2101      	movs	r1, #1
 800164e:	fa01 f303 	lsl.w	r3, r1, r3
 8001652:	e010      	b.n	8001676 <HAL_ADC_ConfigChannel+0x456>
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800165a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800165c:	fa93 f3a3 	rbit	r3, r3
 8001660:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001664:	fab3 f383 	clz	r3, r3
 8001668:	b2db      	uxtb	r3, r3
 800166a:	3301      	adds	r3, #1
 800166c:	f003 031f 	and.w	r3, r3, #31
 8001670:	2101      	movs	r1, #1
 8001672:	fa01 f303 	lsl.w	r3, r1, r3
 8001676:	ea42 0103 	orr.w	r1, r2, r3
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001682:	2b00      	cmp	r3, #0
 8001684:	d10a      	bne.n	800169c <HAL_ADC_ConfigChannel+0x47c>
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	0e9b      	lsrs	r3, r3, #26
 800168c:	3301      	adds	r3, #1
 800168e:	f003 021f 	and.w	r2, r3, #31
 8001692:	4613      	mov	r3, r2
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	4413      	add	r3, r2
 8001698:	051b      	lsls	r3, r3, #20
 800169a:	e011      	b.n	80016c0 <HAL_ADC_ConfigChannel+0x4a0>
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016a4:	fa93 f3a3 	rbit	r3, r3
 80016a8:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80016aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ac:	fab3 f383 	clz	r3, r3
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	3301      	adds	r3, #1
 80016b4:	f003 021f 	and.w	r2, r3, #31
 80016b8:	4613      	mov	r3, r2
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	4413      	add	r3, r2
 80016be:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80016c0:	430b      	orrs	r3, r1
 80016c2:	e069      	b.n	8001798 <HAL_ADC_ConfigChannel+0x578>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d107      	bne.n	80016e0 <HAL_ADC_ConfigChannel+0x4c0>
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	0e9b      	lsrs	r3, r3, #26
 80016d6:	3301      	adds	r3, #1
 80016d8:	069b      	lsls	r3, r3, #26
 80016da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80016de:	e00e      	b.n	80016fe <HAL_ADC_ConfigChannel+0x4de>
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e6:	6a3b      	ldr	r3, [r7, #32]
 80016e8:	fa93 f3a3 	rbit	r3, r3
 80016ec:	61fb      	str	r3, [r7, #28]
  return result;
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	fab3 f383 	clz	r3, r3
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	3301      	adds	r3, #1
 80016f8:	069b      	lsls	r3, r3, #26
 80016fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001706:	2b00      	cmp	r3, #0
 8001708:	d109      	bne.n	800171e <HAL_ADC_ConfigChannel+0x4fe>
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	0e9b      	lsrs	r3, r3, #26
 8001710:	3301      	adds	r3, #1
 8001712:	f003 031f 	and.w	r3, r3, #31
 8001716:	2101      	movs	r1, #1
 8001718:	fa01 f303 	lsl.w	r3, r1, r3
 800171c:	e010      	b.n	8001740 <HAL_ADC_ConfigChannel+0x520>
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001724:	69bb      	ldr	r3, [r7, #24]
 8001726:	fa93 f3a3 	rbit	r3, r3
 800172a:	617b      	str	r3, [r7, #20]
  return result;
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	fab3 f383 	clz	r3, r3
 8001732:	b2db      	uxtb	r3, r3
 8001734:	3301      	adds	r3, #1
 8001736:	f003 031f 	and.w	r3, r3, #31
 800173a:	2101      	movs	r1, #1
 800173c:	fa01 f303 	lsl.w	r3, r1, r3
 8001740:	ea42 0103 	orr.w	r1, r2, r3
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800174c:	2b00      	cmp	r3, #0
 800174e:	d10d      	bne.n	800176c <HAL_ADC_ConfigChannel+0x54c>
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	0e9b      	lsrs	r3, r3, #26
 8001756:	3301      	adds	r3, #1
 8001758:	f003 021f 	and.w	r2, r3, #31
 800175c:	4613      	mov	r3, r2
 800175e:	005b      	lsls	r3, r3, #1
 8001760:	4413      	add	r3, r2
 8001762:	3b1e      	subs	r3, #30
 8001764:	051b      	lsls	r3, r3, #20
 8001766:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800176a:	e014      	b.n	8001796 <HAL_ADC_ConfigChannel+0x576>
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	fa93 f3a3 	rbit	r3, r3
 8001778:	60fb      	str	r3, [r7, #12]
  return result;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	fab3 f383 	clz	r3, r3
 8001780:	b2db      	uxtb	r3, r3
 8001782:	3301      	adds	r3, #1
 8001784:	f003 021f 	and.w	r2, r3, #31
 8001788:	4613      	mov	r3, r2
 800178a:	005b      	lsls	r3, r3, #1
 800178c:	4413      	add	r3, r2
 800178e:	3b1e      	subs	r3, #30
 8001790:	051b      	lsls	r3, r3, #20
 8001792:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001796:	430b      	orrs	r3, r1
 8001798:	683a      	ldr	r2, [r7, #0]
 800179a:	6892      	ldr	r2, [r2, #8]
 800179c:	4619      	mov	r1, r3
 800179e:	f7ff fb24 	bl	8000dea <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	4b28      	ldr	r3, [pc, #160]	; (8001848 <HAL_ADC_ConfigChannel+0x628>)
 80017a8:	4013      	ands	r3, r2
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d07c      	beq.n	80018a8 <HAL_ADC_ConfigChannel+0x688>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80017ae:	4827      	ldr	r0, [pc, #156]	; (800184c <HAL_ADC_ConfigChannel+0x62c>)
 80017b0:	f7ff fa96 	bl	8000ce0 <LL_ADC_GetCommonPathInternalCh>
 80017b4:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a24      	ldr	r2, [pc, #144]	; (8001850 <HAL_ADC_ConfigChannel+0x630>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d126      	bne.n	8001810 <HAL_ADC_ConfigChannel+0x5f0>
 80017c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80017c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d120      	bne.n	8001810 <HAL_ADC_ConfigChannel+0x5f0>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a20      	ldr	r2, [pc, #128]	; (8001854 <HAL_ADC_ConfigChannel+0x634>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d167      	bne.n	80018a8 <HAL_ADC_ConfigChannel+0x688>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80017d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80017dc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80017e0:	4619      	mov	r1, r3
 80017e2:	481a      	ldr	r0, [pc, #104]	; (800184c <HAL_ADC_ConfigChannel+0x62c>)
 80017e4:	f7ff fa69 	bl	8000cba <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80017e8:	4b1b      	ldr	r3, [pc, #108]	; (8001858 <HAL_ADC_ConfigChannel+0x638>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	099b      	lsrs	r3, r3, #6
 80017ee:	4a1b      	ldr	r2, [pc, #108]	; (800185c <HAL_ADC_ConfigChannel+0x63c>)
 80017f0:	fba2 2303 	umull	r2, r3, r2, r3
 80017f4:	099a      	lsrs	r2, r3, #6
 80017f6:	4613      	mov	r3, r2
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	4413      	add	r3, r2
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001800:	e002      	b.n	8001808 <HAL_ADC_ConfigChannel+0x5e8>
          {
            wait_loop_index--;
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	3b01      	subs	r3, #1
 8001806:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d1f9      	bne.n	8001802 <HAL_ADC_ConfigChannel+0x5e2>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800180e:	e04b      	b.n	80018a8 <HAL_ADC_ConfigChannel+0x688>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a12      	ldr	r2, [pc, #72]	; (8001860 <HAL_ADC_ConfigChannel+0x640>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d124      	bne.n	8001864 <HAL_ADC_ConfigChannel+0x644>
 800181a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800181e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d11e      	bne.n	8001864 <HAL_ADC_ConfigChannel+0x644>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a0a      	ldr	r2, [pc, #40]	; (8001854 <HAL_ADC_ConfigChannel+0x634>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d13b      	bne.n	80018a8 <HAL_ADC_ConfigChannel+0x688>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001830:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001834:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001838:	4619      	mov	r1, r3
 800183a:	4804      	ldr	r0, [pc, #16]	; (800184c <HAL_ADC_ConfigChannel+0x62c>)
 800183c:	f7ff fa3d 	bl	8000cba <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001840:	e032      	b.n	80018a8 <HAL_ADC_ConfigChannel+0x688>
 8001842:	bf00      	nop
 8001844:	407f0000 	.word	0x407f0000
 8001848:	80080000 	.word	0x80080000
 800184c:	50040300 	.word	0x50040300
 8001850:	c7520000 	.word	0xc7520000
 8001854:	50040000 	.word	0x50040000
 8001858:	20000030 	.word	0x20000030
 800185c:	053e2d63 	.word	0x053e2d63
 8001860:	cb840000 	.word	0xcb840000
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a14      	ldr	r2, [pc, #80]	; (80018bc <HAL_ADC_ConfigChannel+0x69c>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d11c      	bne.n	80018a8 <HAL_ADC_ConfigChannel+0x688>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800186e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001872:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d116      	bne.n	80018a8 <HAL_ADC_ConfigChannel+0x688>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a10      	ldr	r2, [pc, #64]	; (80018c0 <HAL_ADC_ConfigChannel+0x6a0>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d111      	bne.n	80018a8 <HAL_ADC_ConfigChannel+0x688>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001884:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001888:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800188c:	4619      	mov	r1, r3
 800188e:	480d      	ldr	r0, [pc, #52]	; (80018c4 <HAL_ADC_ConfigChannel+0x6a4>)
 8001890:	f7ff fa13 	bl	8000cba <LL_ADC_SetCommonPathInternalCh>
 8001894:	e008      	b.n	80018a8 <HAL_ADC_ConfigChannel+0x688>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800189a:	f043 0220 	orr.w	r2, r3, #32
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2200      	movs	r2, #0
 80018ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80018b0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3798      	adds	r7, #152	; 0x98
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	80000001 	.word	0x80000001
 80018c0:	50040000 	.word	0x50040000
 80018c4:	50040300 	.word	0x50040300

080018c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f003 0307 	and.w	r3, r3, #7
 80018d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018d8:	4b0c      	ldr	r3, [pc, #48]	; (800190c <__NVIC_SetPriorityGrouping+0x44>)
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018de:	68ba      	ldr	r2, [r7, #8]
 80018e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018e4:	4013      	ands	r3, r2
 80018e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018fa:	4a04      	ldr	r2, [pc, #16]	; (800190c <__NVIC_SetPriorityGrouping+0x44>)
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	60d3      	str	r3, [r2, #12]
}
 8001900:	bf00      	nop
 8001902:	3714      	adds	r7, #20
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr
 800190c:	e000ed00 	.word	0xe000ed00

08001910 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001914:	4b04      	ldr	r3, [pc, #16]	; (8001928 <__NVIC_GetPriorityGrouping+0x18>)
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	0a1b      	lsrs	r3, r3, #8
 800191a:	f003 0307 	and.w	r3, r3, #7
}
 800191e:	4618      	mov	r0, r3
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr
 8001928:	e000ed00 	.word	0xe000ed00

0800192c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	4603      	mov	r3, r0
 8001934:	6039      	str	r1, [r7, #0]
 8001936:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193c:	2b00      	cmp	r3, #0
 800193e:	db0a      	blt.n	8001956 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	b2da      	uxtb	r2, r3
 8001944:	490c      	ldr	r1, [pc, #48]	; (8001978 <__NVIC_SetPriority+0x4c>)
 8001946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194a:	0112      	lsls	r2, r2, #4
 800194c:	b2d2      	uxtb	r2, r2
 800194e:	440b      	add	r3, r1
 8001950:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001954:	e00a      	b.n	800196c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	b2da      	uxtb	r2, r3
 800195a:	4908      	ldr	r1, [pc, #32]	; (800197c <__NVIC_SetPriority+0x50>)
 800195c:	79fb      	ldrb	r3, [r7, #7]
 800195e:	f003 030f 	and.w	r3, r3, #15
 8001962:	3b04      	subs	r3, #4
 8001964:	0112      	lsls	r2, r2, #4
 8001966:	b2d2      	uxtb	r2, r2
 8001968:	440b      	add	r3, r1
 800196a:	761a      	strb	r2, [r3, #24]
}
 800196c:	bf00      	nop
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr
 8001978:	e000e100 	.word	0xe000e100
 800197c:	e000ed00 	.word	0xe000ed00

08001980 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001980:	b480      	push	{r7}
 8001982:	b089      	sub	sp, #36	; 0x24
 8001984:	af00      	add	r7, sp, #0
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	60b9      	str	r1, [r7, #8]
 800198a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	f003 0307 	and.w	r3, r3, #7
 8001992:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	f1c3 0307 	rsb	r3, r3, #7
 800199a:	2b04      	cmp	r3, #4
 800199c:	bf28      	it	cs
 800199e:	2304      	movcs	r3, #4
 80019a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	3304      	adds	r3, #4
 80019a6:	2b06      	cmp	r3, #6
 80019a8:	d902      	bls.n	80019b0 <NVIC_EncodePriority+0x30>
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	3b03      	subs	r3, #3
 80019ae:	e000      	b.n	80019b2 <NVIC_EncodePriority+0x32>
 80019b0:	2300      	movs	r3, #0
 80019b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b4:	f04f 32ff 	mov.w	r2, #4294967295
 80019b8:	69bb      	ldr	r3, [r7, #24]
 80019ba:	fa02 f303 	lsl.w	r3, r2, r3
 80019be:	43da      	mvns	r2, r3
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	401a      	ands	r2, r3
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019c8:	f04f 31ff 	mov.w	r1, #4294967295
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	fa01 f303 	lsl.w	r3, r1, r3
 80019d2:	43d9      	mvns	r1, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d8:	4313      	orrs	r3, r2
         );
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3724      	adds	r7, #36	; 0x24
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
	...

080019e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	3b01      	subs	r3, #1
 80019f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019f8:	d301      	bcc.n	80019fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019fa:	2301      	movs	r3, #1
 80019fc:	e00f      	b.n	8001a1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019fe:	4a0a      	ldr	r2, [pc, #40]	; (8001a28 <SysTick_Config+0x40>)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	3b01      	subs	r3, #1
 8001a04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a06:	210f      	movs	r1, #15
 8001a08:	f04f 30ff 	mov.w	r0, #4294967295
 8001a0c:	f7ff ff8e 	bl	800192c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a10:	4b05      	ldr	r3, [pc, #20]	; (8001a28 <SysTick_Config+0x40>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a16:	4b04      	ldr	r3, [pc, #16]	; (8001a28 <SysTick_Config+0x40>)
 8001a18:	2207      	movs	r2, #7
 8001a1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	e000e010 	.word	0xe000e010

08001a2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f7ff ff47 	bl	80018c8 <__NVIC_SetPriorityGrouping>
}
 8001a3a:	bf00      	nop
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b086      	sub	sp, #24
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	4603      	mov	r3, r0
 8001a4a:	60b9      	str	r1, [r7, #8]
 8001a4c:	607a      	str	r2, [r7, #4]
 8001a4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a50:	2300      	movs	r3, #0
 8001a52:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a54:	f7ff ff5c 	bl	8001910 <__NVIC_GetPriorityGrouping>
 8001a58:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	68b9      	ldr	r1, [r7, #8]
 8001a5e:	6978      	ldr	r0, [r7, #20]
 8001a60:	f7ff ff8e 	bl	8001980 <NVIC_EncodePriority>
 8001a64:	4602      	mov	r2, r0
 8001a66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a6a:	4611      	mov	r1, r2
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff ff5d 	bl	800192c <__NVIC_SetPriority>
}
 8001a72:	bf00      	nop
 8001a74:	3718      	adds	r7, #24
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b082      	sub	sp, #8
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f7ff ffb0 	bl	80019e8 <SysTick_Config>
 8001a88:	4603      	mov	r3, r0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
	...

08001a94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b087      	sub	sp, #28
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aa2:	e148      	b.n	8001d36 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	2101      	movs	r1, #1
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	f000 813a 	beq.w	8001d30 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d003      	beq.n	8001acc <HAL_GPIO_Init+0x38>
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	2b12      	cmp	r3, #18
 8001aca:	d123      	bne.n	8001b14 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	08da      	lsrs	r2, r3, #3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	3208      	adds	r2, #8
 8001ad4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ad8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	f003 0307 	and.w	r3, r3, #7
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	220f      	movs	r2, #15
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	693a      	ldr	r2, [r7, #16]
 8001aec:	4013      	ands	r3, r2
 8001aee:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	691a      	ldr	r2, [r3, #16]
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	f003 0307 	and.w	r3, r3, #7
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	693a      	ldr	r2, [r7, #16]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	08da      	lsrs	r2, r3, #3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	3208      	adds	r2, #8
 8001b0e:	6939      	ldr	r1, [r7, #16]
 8001b10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	2203      	movs	r2, #3
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	43db      	mvns	r3, r3
 8001b26:	693a      	ldr	r2, [r7, #16]
 8001b28:	4013      	ands	r3, r2
 8001b2a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f003 0203 	and.w	r2, r3, #3
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	693a      	ldr	r2, [r7, #16]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	693a      	ldr	r2, [r7, #16]
 8001b46:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d00b      	beq.n	8001b68 <HAL_GPIO_Init+0xd4>
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d007      	beq.n	8001b68 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b5c:	2b11      	cmp	r3, #17
 8001b5e:	d003      	beq.n	8001b68 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	2b12      	cmp	r3, #18
 8001b66:	d130      	bne.n	8001bca <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	2203      	movs	r2, #3
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	43db      	mvns	r3, r3
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	68da      	ldr	r2, [r3, #12]
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	005b      	lsls	r3, r3, #1
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	693a      	ldr	r2, [r7, #16]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	693a      	ldr	r2, [r7, #16]
 8001b96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba6:	43db      	mvns	r3, r3
 8001ba8:	693a      	ldr	r2, [r7, #16]
 8001baa:	4013      	ands	r3, r2
 8001bac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	091b      	lsrs	r3, r3, #4
 8001bb4:	f003 0201 	and.w	r2, r3, #1
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	693a      	ldr	r2, [r7, #16]
 8001bc8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	2203      	movs	r2, #3
 8001bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bda:	43db      	mvns	r3, r3
 8001bdc:	693a      	ldr	r2, [r7, #16]
 8001bde:	4013      	ands	r3, r2
 8001be0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	689a      	ldr	r2, [r3, #8]
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	fa02 f303 	lsl.w	r3, r2, r3
 8001bee:	693a      	ldr	r2, [r7, #16]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	693a      	ldr	r2, [r7, #16]
 8001bf8:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	f000 8094 	beq.w	8001d30 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c08:	4b52      	ldr	r3, [pc, #328]	; (8001d54 <HAL_GPIO_Init+0x2c0>)
 8001c0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c0c:	4a51      	ldr	r2, [pc, #324]	; (8001d54 <HAL_GPIO_Init+0x2c0>)
 8001c0e:	f043 0301 	orr.w	r3, r3, #1
 8001c12:	6613      	str	r3, [r2, #96]	; 0x60
 8001c14:	4b4f      	ldr	r3, [pc, #316]	; (8001d54 <HAL_GPIO_Init+0x2c0>)
 8001c16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c18:	f003 0301 	and.w	r3, r3, #1
 8001c1c:	60bb      	str	r3, [r7, #8]
 8001c1e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c20:	4a4d      	ldr	r2, [pc, #308]	; (8001d58 <HAL_GPIO_Init+0x2c4>)
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	089b      	lsrs	r3, r3, #2
 8001c26:	3302      	adds	r3, #2
 8001c28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	f003 0303 	and.w	r3, r3, #3
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	220f      	movs	r2, #15
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	43db      	mvns	r3, r3
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	4013      	ands	r3, r2
 8001c42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c4a:	d00d      	beq.n	8001c68 <HAL_GPIO_Init+0x1d4>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	4a43      	ldr	r2, [pc, #268]	; (8001d5c <HAL_GPIO_Init+0x2c8>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d007      	beq.n	8001c64 <HAL_GPIO_Init+0x1d0>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	4a42      	ldr	r2, [pc, #264]	; (8001d60 <HAL_GPIO_Init+0x2cc>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d101      	bne.n	8001c60 <HAL_GPIO_Init+0x1cc>
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	e004      	b.n	8001c6a <HAL_GPIO_Init+0x1d6>
 8001c60:	2307      	movs	r3, #7
 8001c62:	e002      	b.n	8001c6a <HAL_GPIO_Init+0x1d6>
 8001c64:	2301      	movs	r3, #1
 8001c66:	e000      	b.n	8001c6a <HAL_GPIO_Init+0x1d6>
 8001c68:	2300      	movs	r3, #0
 8001c6a:	697a      	ldr	r2, [r7, #20]
 8001c6c:	f002 0203 	and.w	r2, r2, #3
 8001c70:	0092      	lsls	r2, r2, #2
 8001c72:	4093      	lsls	r3, r2
 8001c74:	693a      	ldr	r2, [r7, #16]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c7a:	4937      	ldr	r1, [pc, #220]	; (8001d58 <HAL_GPIO_Init+0x2c4>)
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	089b      	lsrs	r3, r3, #2
 8001c80:	3302      	adds	r3, #2
 8001c82:	693a      	ldr	r2, [r7, #16]
 8001c84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001c88:	4b36      	ldr	r3, [pc, #216]	; (8001d64 <HAL_GPIO_Init+0x2d0>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	43db      	mvns	r3, r3
 8001c92:	693a      	ldr	r2, [r7, #16]
 8001c94:	4013      	ands	r3, r2
 8001c96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d003      	beq.n	8001cac <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001cac:	4a2d      	ldr	r2, [pc, #180]	; (8001d64 <HAL_GPIO_Init+0x2d0>)
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001cb2:	4b2c      	ldr	r3, [pc, #176]	; (8001d64 <HAL_GPIO_Init+0x2d0>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	43db      	mvns	r3, r3
 8001cbc:	693a      	ldr	r2, [r7, #16]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d003      	beq.n	8001cd6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001cd6:	4a23      	ldr	r2, [pc, #140]	; (8001d64 <HAL_GPIO_Init+0x2d0>)
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001cdc:	4b21      	ldr	r3, [pc, #132]	; (8001d64 <HAL_GPIO_Init+0x2d0>)
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	43db      	mvns	r3, r3
 8001ce6:	693a      	ldr	r2, [r7, #16]
 8001ce8:	4013      	ands	r3, r2
 8001cea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d003      	beq.n	8001d00 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001cf8:	693a      	ldr	r2, [r7, #16]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d00:	4a18      	ldr	r2, [pc, #96]	; (8001d64 <HAL_GPIO_Init+0x2d0>)
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d06:	4b17      	ldr	r3, [pc, #92]	; (8001d64 <HAL_GPIO_Init+0x2d0>)
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	43db      	mvns	r3, r3
 8001d10:	693a      	ldr	r2, [r7, #16]
 8001d12:	4013      	ands	r3, r2
 8001d14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d003      	beq.n	8001d2a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001d22:	693a      	ldr	r2, [r7, #16]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d2a:	4a0e      	ldr	r2, [pc, #56]	; (8001d64 <HAL_GPIO_Init+0x2d0>)
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	3301      	adds	r3, #1
 8001d34:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	f47f aeaf 	bne.w	8001aa4 <HAL_GPIO_Init+0x10>
  }
}
 8001d46:	bf00      	nop
 8001d48:	371c      	adds	r7, #28
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	40021000 	.word	0x40021000
 8001d58:	40010000 	.word	0x40010000
 8001d5c:	48000400 	.word	0x48000400
 8001d60:	48000800 	.word	0x48000800
 8001d64:	40010400 	.word	0x40010400

08001d68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	460b      	mov	r3, r1
 8001d72:	807b      	strh	r3, [r7, #2]
 8001d74:	4613      	mov	r3, r2
 8001d76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d78:	787b      	ldrb	r3, [r7, #1]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d003      	beq.n	8001d86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d7e:	887a      	ldrh	r2, [r7, #2]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d84:	e002      	b.n	8001d8c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d86:	887a      	ldrh	r2, [r7, #2]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d8c:	bf00      	nop
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d101      	bne.n	8001daa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e081      	b.n	8001eae <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d106      	bne.n	8001dc4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f7fe fdd2 	bl	8000968 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2224      	movs	r2, #36	; 0x24
 8001dc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f022 0201 	bic.w	r2, r2, #1
 8001dda:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	685a      	ldr	r2, [r3, #4]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001de8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	689a      	ldr	r2, [r3, #8]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001df8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d107      	bne.n	8001e12 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	689a      	ldr	r2, [r3, #8]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e0e:	609a      	str	r2, [r3, #8]
 8001e10:	e006      	b.n	8001e20 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	689a      	ldr	r2, [r3, #8]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001e1e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d104      	bne.n	8001e32 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e30:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	6812      	ldr	r2, [r2, #0]
 8001e3c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e44:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	68da      	ldr	r2, [r3, #12]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e54:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	691a      	ldr	r2, [r3, #16]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	695b      	ldr	r3, [r3, #20]
 8001e5e:	ea42 0103 	orr.w	r1, r2, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	699b      	ldr	r3, [r3, #24]
 8001e66:	021a      	lsls	r2, r3, #8
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	430a      	orrs	r2, r1
 8001e6e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	69d9      	ldr	r1, [r3, #28]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6a1a      	ldr	r2, [r3, #32]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f042 0201 	orr.w	r2, r2, #1
 8001e8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2220      	movs	r2, #32
 8001e9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	b083      	sub	sp, #12
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
 8001ebe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	2b20      	cmp	r3, #32
 8001eca:	d138      	bne.n	8001f3e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d101      	bne.n	8001eda <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	e032      	b.n	8001f40 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2201      	movs	r2, #1
 8001ede:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2224      	movs	r2, #36	; 0x24
 8001ee6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f022 0201 	bic.w	r2, r2, #1
 8001ef8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f08:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	6819      	ldr	r1, [r3, #0]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	683a      	ldr	r2, [r7, #0]
 8001f16:	430a      	orrs	r2, r1
 8001f18:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f042 0201 	orr.w	r2, r2, #1
 8001f28:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2220      	movs	r2, #32
 8001f2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	e000      	b.n	8001f40 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001f3e:	2302      	movs	r3, #2
  }
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b085      	sub	sp, #20
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	2b20      	cmp	r3, #32
 8001f60:	d139      	bne.n	8001fd6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d101      	bne.n	8001f70 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	e033      	b.n	8001fd8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2201      	movs	r2, #1
 8001f74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2224      	movs	r2, #36	; 0x24
 8001f7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f022 0201 	bic.w	r2, r2, #1
 8001f8e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001f9e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	021b      	lsls	r3, r3, #8
 8001fa4:	68fa      	ldr	r2, [r7, #12]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	68fa      	ldr	r2, [r7, #12]
 8001fb0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f042 0201 	orr.w	r2, r2, #1
 8001fc0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2220      	movs	r2, #32
 8001fc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	e000      	b.n	8001fd8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001fd6:	2302      	movs	r3, #2
  }
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3714      	adds	r7, #20
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fe8:	4b05      	ldr	r3, [pc, #20]	; (8002000 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a04      	ldr	r2, [pc, #16]	; (8002000 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001fee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ff2:	6013      	str	r3, [r2, #0]
}
 8001ff4:	bf00      	nop
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	40007000 	.word	0x40007000

08002004 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002008:	4b04      	ldr	r3, [pc, #16]	; (800201c <HAL_PWREx_GetVoltageRange+0x18>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002010:	4618      	mov	r0, r3
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	40007000 	.word	0x40007000

08002020 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002020:	b480      	push	{r7}
 8002022:	b085      	sub	sp, #20
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800202e:	d130      	bne.n	8002092 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002030:	4b23      	ldr	r3, [pc, #140]	; (80020c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002038:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800203c:	d038      	beq.n	80020b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800203e:	4b20      	ldr	r3, [pc, #128]	; (80020c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002046:	4a1e      	ldr	r2, [pc, #120]	; (80020c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002048:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800204c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800204e:	4b1d      	ldr	r3, [pc, #116]	; (80020c4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	2232      	movs	r2, #50	; 0x32
 8002054:	fb02 f303 	mul.w	r3, r2, r3
 8002058:	4a1b      	ldr	r2, [pc, #108]	; (80020c8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800205a:	fba2 2303 	umull	r2, r3, r2, r3
 800205e:	0c9b      	lsrs	r3, r3, #18
 8002060:	3301      	adds	r3, #1
 8002062:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002064:	e002      	b.n	800206c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	3b01      	subs	r3, #1
 800206a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800206c:	4b14      	ldr	r3, [pc, #80]	; (80020c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800206e:	695b      	ldr	r3, [r3, #20]
 8002070:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002074:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002078:	d102      	bne.n	8002080 <HAL_PWREx_ControlVoltageScaling+0x60>
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d1f2      	bne.n	8002066 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002080:	4b0f      	ldr	r3, [pc, #60]	; (80020c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002082:	695b      	ldr	r3, [r3, #20]
 8002084:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002088:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800208c:	d110      	bne.n	80020b0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e00f      	b.n	80020b2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002092:	4b0b      	ldr	r3, [pc, #44]	; (80020c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800209a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800209e:	d007      	beq.n	80020b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80020a0:	4b07      	ldr	r3, [pc, #28]	; (80020c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80020a8:	4a05      	ldr	r2, [pc, #20]	; (80020c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020ae:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3714      	adds	r7, #20
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	40007000 	.word	0x40007000
 80020c4:	20000030 	.word	0x20000030
 80020c8:	431bde83 	.word	0x431bde83

080020cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b088      	sub	sp, #32
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d101      	bne.n	80020de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e3db      	b.n	8002896 <HAL_RCC_OscConfig+0x7ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020de:	4ba4      	ldr	r3, [pc, #656]	; (8002370 <HAL_RCC_OscConfig+0x2a4>)
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	f003 030c 	and.w	r3, r3, #12
 80020e6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020e8:	4ba1      	ldr	r3, [pc, #644]	; (8002370 <HAL_RCC_OscConfig+0x2a4>)
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	f003 0303 	and.w	r3, r3, #3
 80020f0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0310 	and.w	r3, r3, #16
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	f000 80e1 	beq.w	80022c2 <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d007      	beq.n	8002116 <HAL_RCC_OscConfig+0x4a>
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	2b0c      	cmp	r3, #12
 800210a:	f040 8088 	bne.w	800221e <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	2b01      	cmp	r3, #1
 8002112:	f040 8084 	bne.w	800221e <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002116:	4b96      	ldr	r3, [pc, #600]	; (8002370 <HAL_RCC_OscConfig+0x2a4>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	2b00      	cmp	r3, #0
 8002120:	d005      	beq.n	800212e <HAL_RCC_OscConfig+0x62>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	699b      	ldr	r3, [r3, #24]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d101      	bne.n	800212e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e3b3      	b.n	8002896 <HAL_RCC_OscConfig+0x7ca>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6a1a      	ldr	r2, [r3, #32]
 8002132:	4b8f      	ldr	r3, [pc, #572]	; (8002370 <HAL_RCC_OscConfig+0x2a4>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0308 	and.w	r3, r3, #8
 800213a:	2b00      	cmp	r3, #0
 800213c:	d004      	beq.n	8002148 <HAL_RCC_OscConfig+0x7c>
 800213e:	4b8c      	ldr	r3, [pc, #560]	; (8002370 <HAL_RCC_OscConfig+0x2a4>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002146:	e005      	b.n	8002154 <HAL_RCC_OscConfig+0x88>
 8002148:	4b89      	ldr	r3, [pc, #548]	; (8002370 <HAL_RCC_OscConfig+0x2a4>)
 800214a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800214e:	091b      	lsrs	r3, r3, #4
 8002150:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002154:	4293      	cmp	r3, r2
 8002156:	d223      	bcs.n	80021a0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6a1b      	ldr	r3, [r3, #32]
 800215c:	4618      	mov	r0, r3
 800215e:	f000 fd47 	bl	8002bf0 <RCC_SetFlashLatencyFromMSIRange>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e394      	b.n	8002896 <HAL_RCC_OscConfig+0x7ca>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800216c:	4b80      	ldr	r3, [pc, #512]	; (8002370 <HAL_RCC_OscConfig+0x2a4>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a7f      	ldr	r2, [pc, #508]	; (8002370 <HAL_RCC_OscConfig+0x2a4>)
 8002172:	f043 0308 	orr.w	r3, r3, #8
 8002176:	6013      	str	r3, [r2, #0]
 8002178:	4b7d      	ldr	r3, [pc, #500]	; (8002370 <HAL_RCC_OscConfig+0x2a4>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6a1b      	ldr	r3, [r3, #32]
 8002184:	497a      	ldr	r1, [pc, #488]	; (8002370 <HAL_RCC_OscConfig+0x2a4>)
 8002186:	4313      	orrs	r3, r2
 8002188:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800218a:	4b79      	ldr	r3, [pc, #484]	; (8002370 <HAL_RCC_OscConfig+0x2a4>)
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	69db      	ldr	r3, [r3, #28]
 8002196:	021b      	lsls	r3, r3, #8
 8002198:	4975      	ldr	r1, [pc, #468]	; (8002370 <HAL_RCC_OscConfig+0x2a4>)
 800219a:	4313      	orrs	r3, r2
 800219c:	604b      	str	r3, [r1, #4]
 800219e:	e022      	b.n	80021e6 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021a0:	4b73      	ldr	r3, [pc, #460]	; (8002370 <HAL_RCC_OscConfig+0x2a4>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a72      	ldr	r2, [pc, #456]	; (8002370 <HAL_RCC_OscConfig+0x2a4>)
 80021a6:	f043 0308 	orr.w	r3, r3, #8
 80021aa:	6013      	str	r3, [r2, #0]
 80021ac:	4b70      	ldr	r3, [pc, #448]	; (8002370 <HAL_RCC_OscConfig+0x2a4>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6a1b      	ldr	r3, [r3, #32]
 80021b8:	496d      	ldr	r1, [pc, #436]	; (8002370 <HAL_RCC_OscConfig+0x2a4>)
 80021ba:	4313      	orrs	r3, r2
 80021bc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021be:	4b6c      	ldr	r3, [pc, #432]	; (8002370 <HAL_RCC_OscConfig+0x2a4>)
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	69db      	ldr	r3, [r3, #28]
 80021ca:	021b      	lsls	r3, r3, #8
 80021cc:	4968      	ldr	r1, [pc, #416]	; (8002370 <HAL_RCC_OscConfig+0x2a4>)
 80021ce:	4313      	orrs	r3, r2
 80021d0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a1b      	ldr	r3, [r3, #32]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f000 fd0a 	bl	8002bf0 <RCC_SetFlashLatencyFromMSIRange>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e357      	b.n	8002896 <HAL_RCC_OscConfig+0x7ca>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021e6:	f000 fc41 	bl	8002a6c <HAL_RCC_GetSysClockFreq>
 80021ea:	4601      	mov	r1, r0
 80021ec:	4b60      	ldr	r3, [pc, #384]	; (8002370 <HAL_RCC_OscConfig+0x2a4>)
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	091b      	lsrs	r3, r3, #4
 80021f2:	f003 030f 	and.w	r3, r3, #15
 80021f6:	4a5f      	ldr	r2, [pc, #380]	; (8002374 <HAL_RCC_OscConfig+0x2a8>)
 80021f8:	5cd3      	ldrb	r3, [r2, r3]
 80021fa:	f003 031f 	and.w	r3, r3, #31
 80021fe:	fa21 f303 	lsr.w	r3, r1, r3
 8002202:	4a5d      	ldr	r2, [pc, #372]	; (8002378 <HAL_RCC_OscConfig+0x2ac>)
 8002204:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002206:	4b5d      	ldr	r3, [pc, #372]	; (800237c <HAL_RCC_OscConfig+0x2b0>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4618      	mov	r0, r3
 800220c:	f7fe fcea 	bl	8000be4 <HAL_InitTick>
 8002210:	4603      	mov	r3, r0
 8002212:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002214:	7bfb      	ldrb	r3, [r7, #15]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d052      	beq.n	80022c0 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 800221a:	7bfb      	ldrb	r3, [r7, #15]
 800221c:	e33b      	b.n	8002896 <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	699b      	ldr	r3, [r3, #24]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d032      	beq.n	800228c <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002226:	4b52      	ldr	r3, [pc, #328]	; (8002370 <HAL_RCC_OscConfig+0x2a4>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a51      	ldr	r2, [pc, #324]	; (8002370 <HAL_RCC_OscConfig+0x2a4>)
 800222c:	f043 0301 	orr.w	r3, r3, #1
 8002230:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002232:	f7fe fd23 	bl	8000c7c <HAL_GetTick>
 8002236:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002238:	e008      	b.n	800224c <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800223a:	f7fe fd1f 	bl	8000c7c <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	2b02      	cmp	r3, #2
 8002246:	d901      	bls.n	800224c <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e324      	b.n	8002896 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800224c:	4b48      	ldr	r3, [pc, #288]	; (8002370 <HAL_RCC_OscConfig+0x2a4>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0302 	and.w	r3, r3, #2
 8002254:	2b00      	cmp	r3, #0
 8002256:	d0f0      	beq.n	800223a <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002258:	4b45      	ldr	r3, [pc, #276]	; (8002370 <HAL_RCC_OscConfig+0x2a4>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a44      	ldr	r2, [pc, #272]	; (8002370 <HAL_RCC_OscConfig+0x2a4>)
 800225e:	f043 0308 	orr.w	r3, r3, #8
 8002262:	6013      	str	r3, [r2, #0]
 8002264:	4b42      	ldr	r3, [pc, #264]	; (8002370 <HAL_RCC_OscConfig+0x2a4>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6a1b      	ldr	r3, [r3, #32]
 8002270:	493f      	ldr	r1, [pc, #252]	; (8002370 <HAL_RCC_OscConfig+0x2a4>)
 8002272:	4313      	orrs	r3, r2
 8002274:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002276:	4b3e      	ldr	r3, [pc, #248]	; (8002370 <HAL_RCC_OscConfig+0x2a4>)
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	69db      	ldr	r3, [r3, #28]
 8002282:	021b      	lsls	r3, r3, #8
 8002284:	493a      	ldr	r1, [pc, #232]	; (8002370 <HAL_RCC_OscConfig+0x2a4>)
 8002286:	4313      	orrs	r3, r2
 8002288:	604b      	str	r3, [r1, #4]
 800228a:	e01a      	b.n	80022c2 <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800228c:	4b38      	ldr	r3, [pc, #224]	; (8002370 <HAL_RCC_OscConfig+0x2a4>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a37      	ldr	r2, [pc, #220]	; (8002370 <HAL_RCC_OscConfig+0x2a4>)
 8002292:	f023 0301 	bic.w	r3, r3, #1
 8002296:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002298:	f7fe fcf0 	bl	8000c7c <HAL_GetTick>
 800229c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800229e:	e008      	b.n	80022b2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022a0:	f7fe fcec 	bl	8000c7c <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e2f1      	b.n	8002896 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80022b2:	4b2f      	ldr	r3, [pc, #188]	; (8002370 <HAL_RCC_OscConfig+0x2a4>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d1f0      	bne.n	80022a0 <HAL_RCC_OscConfig+0x1d4>
 80022be:	e000      	b.n	80022c2 <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80022c0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d074      	beq.n	80023b8 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	2b08      	cmp	r3, #8
 80022d2:	d005      	beq.n	80022e0 <HAL_RCC_OscConfig+0x214>
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	2b0c      	cmp	r3, #12
 80022d8:	d10e      	bne.n	80022f8 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	2b03      	cmp	r3, #3
 80022de:	d10b      	bne.n	80022f8 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022e0:	4b23      	ldr	r3, [pc, #140]	; (8002370 <HAL_RCC_OscConfig+0x2a4>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d064      	beq.n	80023b6 <HAL_RCC_OscConfig+0x2ea>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d160      	bne.n	80023b6 <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e2ce      	b.n	8002896 <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002300:	d106      	bne.n	8002310 <HAL_RCC_OscConfig+0x244>
 8002302:	4b1b      	ldr	r3, [pc, #108]	; (8002370 <HAL_RCC_OscConfig+0x2a4>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a1a      	ldr	r2, [pc, #104]	; (8002370 <HAL_RCC_OscConfig+0x2a4>)
 8002308:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800230c:	6013      	str	r3, [r2, #0]
 800230e:	e01d      	b.n	800234c <HAL_RCC_OscConfig+0x280>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002318:	d10c      	bne.n	8002334 <HAL_RCC_OscConfig+0x268>
 800231a:	4b15      	ldr	r3, [pc, #84]	; (8002370 <HAL_RCC_OscConfig+0x2a4>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a14      	ldr	r2, [pc, #80]	; (8002370 <HAL_RCC_OscConfig+0x2a4>)
 8002320:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002324:	6013      	str	r3, [r2, #0]
 8002326:	4b12      	ldr	r3, [pc, #72]	; (8002370 <HAL_RCC_OscConfig+0x2a4>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a11      	ldr	r2, [pc, #68]	; (8002370 <HAL_RCC_OscConfig+0x2a4>)
 800232c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002330:	6013      	str	r3, [r2, #0]
 8002332:	e00b      	b.n	800234c <HAL_RCC_OscConfig+0x280>
 8002334:	4b0e      	ldr	r3, [pc, #56]	; (8002370 <HAL_RCC_OscConfig+0x2a4>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a0d      	ldr	r2, [pc, #52]	; (8002370 <HAL_RCC_OscConfig+0x2a4>)
 800233a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800233e:	6013      	str	r3, [r2, #0]
 8002340:	4b0b      	ldr	r3, [pc, #44]	; (8002370 <HAL_RCC_OscConfig+0x2a4>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a0a      	ldr	r2, [pc, #40]	; (8002370 <HAL_RCC_OscConfig+0x2a4>)
 8002346:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800234a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d01c      	beq.n	800238e <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002354:	f7fe fc92 	bl	8000c7c <HAL_GetTick>
 8002358:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800235a:	e011      	b.n	8002380 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800235c:	f7fe fc8e 	bl	8000c7c <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	2b64      	cmp	r3, #100	; 0x64
 8002368:	d90a      	bls.n	8002380 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e293      	b.n	8002896 <HAL_RCC_OscConfig+0x7ca>
 800236e:	bf00      	nop
 8002370:	40021000 	.word	0x40021000
 8002374:	08003b94 	.word	0x08003b94
 8002378:	20000030 	.word	0x20000030
 800237c:	20000034 	.word	0x20000034
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002380:	4bae      	ldr	r3, [pc, #696]	; (800263c <HAL_RCC_OscConfig+0x570>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d0e7      	beq.n	800235c <HAL_RCC_OscConfig+0x290>
 800238c:	e014      	b.n	80023b8 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800238e:	f7fe fc75 	bl	8000c7c <HAL_GetTick>
 8002392:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002394:	e008      	b.n	80023a8 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002396:	f7fe fc71 	bl	8000c7c <HAL_GetTick>
 800239a:	4602      	mov	r2, r0
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	2b64      	cmp	r3, #100	; 0x64
 80023a2:	d901      	bls.n	80023a8 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	e276      	b.n	8002896 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023a8:	4ba4      	ldr	r3, [pc, #656]	; (800263c <HAL_RCC_OscConfig+0x570>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d1f0      	bne.n	8002396 <HAL_RCC_OscConfig+0x2ca>
 80023b4:	e000      	b.n	80023b8 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023b6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0302 	and.w	r3, r3, #2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d060      	beq.n	8002486 <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	2b04      	cmp	r3, #4
 80023c8:	d005      	beq.n	80023d6 <HAL_RCC_OscConfig+0x30a>
 80023ca:	69bb      	ldr	r3, [r7, #24]
 80023cc:	2b0c      	cmp	r3, #12
 80023ce:	d119      	bne.n	8002404 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d116      	bne.n	8002404 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023d6:	4b99      	ldr	r3, [pc, #612]	; (800263c <HAL_RCC_OscConfig+0x570>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d005      	beq.n	80023ee <HAL_RCC_OscConfig+0x322>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d101      	bne.n	80023ee <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e253      	b.n	8002896 <HAL_RCC_OscConfig+0x7ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ee:	4b93      	ldr	r3, [pc, #588]	; (800263c <HAL_RCC_OscConfig+0x570>)
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	061b      	lsls	r3, r3, #24
 80023fc:	498f      	ldr	r1, [pc, #572]	; (800263c <HAL_RCC_OscConfig+0x570>)
 80023fe:	4313      	orrs	r3, r2
 8002400:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002402:	e040      	b.n	8002486 <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d023      	beq.n	8002454 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800240c:	4b8b      	ldr	r3, [pc, #556]	; (800263c <HAL_RCC_OscConfig+0x570>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a8a      	ldr	r2, [pc, #552]	; (800263c <HAL_RCC_OscConfig+0x570>)
 8002412:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002416:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002418:	f7fe fc30 	bl	8000c7c <HAL_GetTick>
 800241c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800241e:	e008      	b.n	8002432 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002420:	f7fe fc2c 	bl	8000c7c <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b02      	cmp	r3, #2
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e231      	b.n	8002896 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002432:	4b82      	ldr	r3, [pc, #520]	; (800263c <HAL_RCC_OscConfig+0x570>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800243a:	2b00      	cmp	r3, #0
 800243c:	d0f0      	beq.n	8002420 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800243e:	4b7f      	ldr	r3, [pc, #508]	; (800263c <HAL_RCC_OscConfig+0x570>)
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	691b      	ldr	r3, [r3, #16]
 800244a:	061b      	lsls	r3, r3, #24
 800244c:	497b      	ldr	r1, [pc, #492]	; (800263c <HAL_RCC_OscConfig+0x570>)
 800244e:	4313      	orrs	r3, r2
 8002450:	604b      	str	r3, [r1, #4]
 8002452:	e018      	b.n	8002486 <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002454:	4b79      	ldr	r3, [pc, #484]	; (800263c <HAL_RCC_OscConfig+0x570>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a78      	ldr	r2, [pc, #480]	; (800263c <HAL_RCC_OscConfig+0x570>)
 800245a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800245e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002460:	f7fe fc0c 	bl	8000c7c <HAL_GetTick>
 8002464:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002466:	e008      	b.n	800247a <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002468:	f7fe fc08 	bl	8000c7c <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	2b02      	cmp	r3, #2
 8002474:	d901      	bls.n	800247a <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e20d      	b.n	8002896 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800247a:	4b70      	ldr	r3, [pc, #448]	; (800263c <HAL_RCC_OscConfig+0x570>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002482:	2b00      	cmp	r3, #0
 8002484:	d1f0      	bne.n	8002468 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0308 	and.w	r3, r3, #8
 800248e:	2b00      	cmp	r3, #0
 8002490:	d03c      	beq.n	800250c <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	695b      	ldr	r3, [r3, #20]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d01c      	beq.n	80024d4 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800249a:	4b68      	ldr	r3, [pc, #416]	; (800263c <HAL_RCC_OscConfig+0x570>)
 800249c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024a0:	4a66      	ldr	r2, [pc, #408]	; (800263c <HAL_RCC_OscConfig+0x570>)
 80024a2:	f043 0301 	orr.w	r3, r3, #1
 80024a6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024aa:	f7fe fbe7 	bl	8000c7c <HAL_GetTick>
 80024ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024b0:	e008      	b.n	80024c4 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024b2:	f7fe fbe3 	bl	8000c7c <HAL_GetTick>
 80024b6:	4602      	mov	r2, r0
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d901      	bls.n	80024c4 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 80024c0:	2303      	movs	r3, #3
 80024c2:	e1e8      	b.n	8002896 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024c4:	4b5d      	ldr	r3, [pc, #372]	; (800263c <HAL_RCC_OscConfig+0x570>)
 80024c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d0ef      	beq.n	80024b2 <HAL_RCC_OscConfig+0x3e6>
 80024d2:	e01b      	b.n	800250c <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024d4:	4b59      	ldr	r3, [pc, #356]	; (800263c <HAL_RCC_OscConfig+0x570>)
 80024d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024da:	4a58      	ldr	r2, [pc, #352]	; (800263c <HAL_RCC_OscConfig+0x570>)
 80024dc:	f023 0301 	bic.w	r3, r3, #1
 80024e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024e4:	f7fe fbca 	bl	8000c7c <HAL_GetTick>
 80024e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024ea:	e008      	b.n	80024fe <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024ec:	f7fe fbc6 	bl	8000c7c <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d901      	bls.n	80024fe <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e1cb      	b.n	8002896 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024fe:	4b4f      	ldr	r3, [pc, #316]	; (800263c <HAL_RCC_OscConfig+0x570>)
 8002500:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002504:	f003 0302 	and.w	r3, r3, #2
 8002508:	2b00      	cmp	r3, #0
 800250a:	d1ef      	bne.n	80024ec <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0304 	and.w	r3, r3, #4
 8002514:	2b00      	cmp	r3, #0
 8002516:	f000 80a5 	beq.w	8002664 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 800251a:	2300      	movs	r3, #0
 800251c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800251e:	4b47      	ldr	r3, [pc, #284]	; (800263c <HAL_RCC_OscConfig+0x570>)
 8002520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d10d      	bne.n	8002546 <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800252a:	4b44      	ldr	r3, [pc, #272]	; (800263c <HAL_RCC_OscConfig+0x570>)
 800252c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800252e:	4a43      	ldr	r2, [pc, #268]	; (800263c <HAL_RCC_OscConfig+0x570>)
 8002530:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002534:	6593      	str	r3, [r2, #88]	; 0x58
 8002536:	4b41      	ldr	r3, [pc, #260]	; (800263c <HAL_RCC_OscConfig+0x570>)
 8002538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800253a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800253e:	60bb      	str	r3, [r7, #8]
 8002540:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002542:	2301      	movs	r3, #1
 8002544:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002546:	4b3e      	ldr	r3, [pc, #248]	; (8002640 <HAL_RCC_OscConfig+0x574>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800254e:	2b00      	cmp	r3, #0
 8002550:	d118      	bne.n	8002584 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002552:	4b3b      	ldr	r3, [pc, #236]	; (8002640 <HAL_RCC_OscConfig+0x574>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a3a      	ldr	r2, [pc, #232]	; (8002640 <HAL_RCC_OscConfig+0x574>)
 8002558:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800255c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800255e:	f7fe fb8d 	bl	8000c7c <HAL_GetTick>
 8002562:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002564:	e008      	b.n	8002578 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002566:	f7fe fb89 	bl	8000c7c <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	2b02      	cmp	r3, #2
 8002572:	d901      	bls.n	8002578 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e18e      	b.n	8002896 <HAL_RCC_OscConfig+0x7ca>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002578:	4b31      	ldr	r3, [pc, #196]	; (8002640 <HAL_RCC_OscConfig+0x574>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002580:	2b00      	cmp	r3, #0
 8002582:	d0f0      	beq.n	8002566 <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	2b01      	cmp	r3, #1
 800258a:	d108      	bne.n	800259e <HAL_RCC_OscConfig+0x4d2>
 800258c:	4b2b      	ldr	r3, [pc, #172]	; (800263c <HAL_RCC_OscConfig+0x570>)
 800258e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002592:	4a2a      	ldr	r2, [pc, #168]	; (800263c <HAL_RCC_OscConfig+0x570>)
 8002594:	f043 0301 	orr.w	r3, r3, #1
 8002598:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800259c:	e024      	b.n	80025e8 <HAL_RCC_OscConfig+0x51c>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	2b05      	cmp	r3, #5
 80025a4:	d110      	bne.n	80025c8 <HAL_RCC_OscConfig+0x4fc>
 80025a6:	4b25      	ldr	r3, [pc, #148]	; (800263c <HAL_RCC_OscConfig+0x570>)
 80025a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ac:	4a23      	ldr	r2, [pc, #140]	; (800263c <HAL_RCC_OscConfig+0x570>)
 80025ae:	f043 0304 	orr.w	r3, r3, #4
 80025b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025b6:	4b21      	ldr	r3, [pc, #132]	; (800263c <HAL_RCC_OscConfig+0x570>)
 80025b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025bc:	4a1f      	ldr	r2, [pc, #124]	; (800263c <HAL_RCC_OscConfig+0x570>)
 80025be:	f043 0301 	orr.w	r3, r3, #1
 80025c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025c6:	e00f      	b.n	80025e8 <HAL_RCC_OscConfig+0x51c>
 80025c8:	4b1c      	ldr	r3, [pc, #112]	; (800263c <HAL_RCC_OscConfig+0x570>)
 80025ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ce:	4a1b      	ldr	r2, [pc, #108]	; (800263c <HAL_RCC_OscConfig+0x570>)
 80025d0:	f023 0301 	bic.w	r3, r3, #1
 80025d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025d8:	4b18      	ldr	r3, [pc, #96]	; (800263c <HAL_RCC_OscConfig+0x570>)
 80025da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025de:	4a17      	ldr	r2, [pc, #92]	; (800263c <HAL_RCC_OscConfig+0x570>)
 80025e0:	f023 0304 	bic.w	r3, r3, #4
 80025e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d016      	beq.n	800261e <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025f0:	f7fe fb44 	bl	8000c7c <HAL_GetTick>
 80025f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025f6:	e00a      	b.n	800260e <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025f8:	f7fe fb40 	bl	8000c7c <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	f241 3288 	movw	r2, #5000	; 0x1388
 8002606:	4293      	cmp	r3, r2
 8002608:	d901      	bls.n	800260e <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e143      	b.n	8002896 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800260e:	4b0b      	ldr	r3, [pc, #44]	; (800263c <HAL_RCC_OscConfig+0x570>)
 8002610:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002614:	f003 0302 	and.w	r3, r3, #2
 8002618:	2b00      	cmp	r3, #0
 800261a:	d0ed      	beq.n	80025f8 <HAL_RCC_OscConfig+0x52c>
 800261c:	e019      	b.n	8002652 <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800261e:	f7fe fb2d 	bl	8000c7c <HAL_GetTick>
 8002622:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002624:	e00e      	b.n	8002644 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002626:	f7fe fb29 	bl	8000c7c <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	f241 3288 	movw	r2, #5000	; 0x1388
 8002634:	4293      	cmp	r3, r2
 8002636:	d905      	bls.n	8002644 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	e12c      	b.n	8002896 <HAL_RCC_OscConfig+0x7ca>
 800263c:	40021000 	.word	0x40021000
 8002640:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002644:	4b96      	ldr	r3, [pc, #600]	; (80028a0 <HAL_RCC_OscConfig+0x7d4>)
 8002646:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d1e9      	bne.n	8002626 <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002652:	7ffb      	ldrb	r3, [r7, #31]
 8002654:	2b01      	cmp	r3, #1
 8002656:	d105      	bne.n	8002664 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002658:	4b91      	ldr	r3, [pc, #580]	; (80028a0 <HAL_RCC_OscConfig+0x7d4>)
 800265a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800265c:	4a90      	ldr	r2, [pc, #576]	; (80028a0 <HAL_RCC_OscConfig+0x7d4>)
 800265e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002662:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0320 	and.w	r3, r3, #32
 800266c:	2b00      	cmp	r3, #0
 800266e:	d03c      	beq.n	80026ea <HAL_RCC_OscConfig+0x61e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002674:	2b00      	cmp	r3, #0
 8002676:	d01c      	beq.n	80026b2 <HAL_RCC_OscConfig+0x5e6>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002678:	4b89      	ldr	r3, [pc, #548]	; (80028a0 <HAL_RCC_OscConfig+0x7d4>)
 800267a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800267e:	4a88      	ldr	r2, [pc, #544]	; (80028a0 <HAL_RCC_OscConfig+0x7d4>)
 8002680:	f043 0301 	orr.w	r3, r3, #1
 8002684:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002688:	f7fe faf8 	bl	8000c7c <HAL_GetTick>
 800268c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800268e:	e008      	b.n	80026a2 <HAL_RCC_OscConfig+0x5d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002690:	f7fe faf4 	bl	8000c7c <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b02      	cmp	r3, #2
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_OscConfig+0x5d6>
        {
          return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e0f9      	b.n	8002896 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80026a2:	4b7f      	ldr	r3, [pc, #508]	; (80028a0 <HAL_RCC_OscConfig+0x7d4>)
 80026a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80026a8:	f003 0302 	and.w	r3, r3, #2
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d0ef      	beq.n	8002690 <HAL_RCC_OscConfig+0x5c4>
 80026b0:	e01b      	b.n	80026ea <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80026b2:	4b7b      	ldr	r3, [pc, #492]	; (80028a0 <HAL_RCC_OscConfig+0x7d4>)
 80026b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80026b8:	4a79      	ldr	r2, [pc, #484]	; (80028a0 <HAL_RCC_OscConfig+0x7d4>)
 80026ba:	f023 0301 	bic.w	r3, r3, #1
 80026be:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026c2:	f7fe fadb 	bl	8000c7c <HAL_GetTick>
 80026c6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80026c8:	e008      	b.n	80026dc <HAL_RCC_OscConfig+0x610>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026ca:	f7fe fad7 	bl	8000c7c <HAL_GetTick>
 80026ce:	4602      	mov	r2, r0
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d901      	bls.n	80026dc <HAL_RCC_OscConfig+0x610>
        {
          return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e0dc      	b.n	8002896 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80026dc:	4b70      	ldr	r3, [pc, #448]	; (80028a0 <HAL_RCC_OscConfig+0x7d4>)
 80026de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d1ef      	bne.n	80026ca <HAL_RCC_OscConfig+0x5fe>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	f000 80d0 	beq.w	8002894 <HAL_RCC_OscConfig+0x7c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	2b0c      	cmp	r3, #12
 80026f8:	f000 808d 	beq.w	8002816 <HAL_RCC_OscConfig+0x74a>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002700:	2b02      	cmp	r3, #2
 8002702:	d15a      	bne.n	80027ba <HAL_RCC_OscConfig+0x6ee>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002704:	4b66      	ldr	r3, [pc, #408]	; (80028a0 <HAL_RCC_OscConfig+0x7d4>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a65      	ldr	r2, [pc, #404]	; (80028a0 <HAL_RCC_OscConfig+0x7d4>)
 800270a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800270e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002710:	f7fe fab4 	bl	8000c7c <HAL_GetTick>
 8002714:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002716:	e008      	b.n	800272a <HAL_RCC_OscConfig+0x65e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002718:	f7fe fab0 	bl	8000c7c <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b02      	cmp	r3, #2
 8002724:	d901      	bls.n	800272a <HAL_RCC_OscConfig+0x65e>
          {
            return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e0b5      	b.n	8002896 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800272a:	4b5d      	ldr	r3, [pc, #372]	; (80028a0 <HAL_RCC_OscConfig+0x7d4>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d1f0      	bne.n	8002718 <HAL_RCC_OscConfig+0x64c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002736:	4b5a      	ldr	r3, [pc, #360]	; (80028a0 <HAL_RCC_OscConfig+0x7d4>)
 8002738:	68da      	ldr	r2, [r3, #12]
 800273a:	4b5a      	ldr	r3, [pc, #360]	; (80028a4 <HAL_RCC_OscConfig+0x7d8>)
 800273c:	4013      	ands	r3, r2
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002746:	3a01      	subs	r2, #1
 8002748:	0112      	lsls	r2, r2, #4
 800274a:	4311      	orrs	r1, r2
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002750:	0212      	lsls	r2, r2, #8
 8002752:	4311      	orrs	r1, r2
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002758:	0852      	lsrs	r2, r2, #1
 800275a:	3a01      	subs	r2, #1
 800275c:	0552      	lsls	r2, r2, #21
 800275e:	4311      	orrs	r1, r2
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002764:	0852      	lsrs	r2, r2, #1
 8002766:	3a01      	subs	r2, #1
 8002768:	0652      	lsls	r2, r2, #25
 800276a:	4311      	orrs	r1, r2
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002770:	06d2      	lsls	r2, r2, #27
 8002772:	430a      	orrs	r2, r1
 8002774:	494a      	ldr	r1, [pc, #296]	; (80028a0 <HAL_RCC_OscConfig+0x7d4>)
 8002776:	4313      	orrs	r3, r2
 8002778:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800277a:	4b49      	ldr	r3, [pc, #292]	; (80028a0 <HAL_RCC_OscConfig+0x7d4>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a48      	ldr	r2, [pc, #288]	; (80028a0 <HAL_RCC_OscConfig+0x7d4>)
 8002780:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002784:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002786:	4b46      	ldr	r3, [pc, #280]	; (80028a0 <HAL_RCC_OscConfig+0x7d4>)
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	4a45      	ldr	r2, [pc, #276]	; (80028a0 <HAL_RCC_OscConfig+0x7d4>)
 800278c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002790:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002792:	f7fe fa73 	bl	8000c7c <HAL_GetTick>
 8002796:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002798:	e008      	b.n	80027ac <HAL_RCC_OscConfig+0x6e0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800279a:	f7fe fa6f 	bl	8000c7c <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d901      	bls.n	80027ac <HAL_RCC_OscConfig+0x6e0>
          {
            return HAL_TIMEOUT;
 80027a8:	2303      	movs	r3, #3
 80027aa:	e074      	b.n	8002896 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027ac:	4b3c      	ldr	r3, [pc, #240]	; (80028a0 <HAL_RCC_OscConfig+0x7d4>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d0f0      	beq.n	800279a <HAL_RCC_OscConfig+0x6ce>
 80027b8:	e06c      	b.n	8002894 <HAL_RCC_OscConfig+0x7c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027ba:	4b39      	ldr	r3, [pc, #228]	; (80028a0 <HAL_RCC_OscConfig+0x7d4>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a38      	ldr	r2, [pc, #224]	; (80028a0 <HAL_RCC_OscConfig+0x7d4>)
 80027c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027c4:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80027c6:	4b36      	ldr	r3, [pc, #216]	; (80028a0 <HAL_RCC_OscConfig+0x7d4>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d105      	bne.n	80027de <HAL_RCC_OscConfig+0x712>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80027d2:	4b33      	ldr	r3, [pc, #204]	; (80028a0 <HAL_RCC_OscConfig+0x7d4>)
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	4a32      	ldr	r2, [pc, #200]	; (80028a0 <HAL_RCC_OscConfig+0x7d4>)
 80027d8:	f023 0303 	bic.w	r3, r3, #3
 80027dc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80027de:	4b30      	ldr	r3, [pc, #192]	; (80028a0 <HAL_RCC_OscConfig+0x7d4>)
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	4a2f      	ldr	r2, [pc, #188]	; (80028a0 <HAL_RCC_OscConfig+0x7d4>)
 80027e4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80027e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027ec:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ee:	f7fe fa45 	bl	8000c7c <HAL_GetTick>
 80027f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027f4:	e008      	b.n	8002808 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027f6:	f7fe fa41 	bl	8000c7c <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	2b02      	cmp	r3, #2
 8002802:	d901      	bls.n	8002808 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e046      	b.n	8002896 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002808:	4b25      	ldr	r3, [pc, #148]	; (80028a0 <HAL_RCC_OscConfig+0x7d4>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d1f0      	bne.n	80027f6 <HAL_RCC_OscConfig+0x72a>
 8002814:	e03e      	b.n	8002894 <HAL_RCC_OscConfig+0x7c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800281a:	2b01      	cmp	r3, #1
 800281c:	d101      	bne.n	8002822 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e039      	b.n	8002896 <HAL_RCC_OscConfig+0x7ca>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8002822:	4b1f      	ldr	r3, [pc, #124]	; (80028a0 <HAL_RCC_OscConfig+0x7d4>)
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	f003 0203 	and.w	r2, r3, #3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002832:	429a      	cmp	r2, r3
 8002834:	d12c      	bne.n	8002890 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002840:	3b01      	subs	r3, #1
 8002842:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002844:	429a      	cmp	r2, r3
 8002846:	d123      	bne.n	8002890 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002852:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002854:	429a      	cmp	r2, r3
 8002856:	d11b      	bne.n	8002890 <HAL_RCC_OscConfig+0x7c4>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002862:	06db      	lsls	r3, r3, #27
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002864:	429a      	cmp	r2, r3
 8002866:	d113      	bne.n	8002890 <HAL_RCC_OscConfig+0x7c4>
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002872:	085b      	lsrs	r3, r3, #1
 8002874:	3b01      	subs	r3, #1
 8002876:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002878:	429a      	cmp	r2, r3
 800287a:	d109      	bne.n	8002890 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002886:	085b      	lsrs	r3, r3, #1
 8002888:	3b01      	subs	r3, #1
 800288a:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800288c:	429a      	cmp	r2, r3
 800288e:	d001      	beq.n	8002894 <HAL_RCC_OscConfig+0x7c8>
        {
          return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e000      	b.n	8002896 <HAL_RCC_OscConfig+0x7ca>
        }
      }
    }
  }
  return HAL_OK;
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	3720      	adds	r7, #32
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	40021000 	.word	0x40021000
 80028a4:	019d808c 	.word	0x019d808c

080028a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d101      	bne.n	80028bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e0c8      	b.n	8002a4e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028bc:	4b66      	ldr	r3, [pc, #408]	; (8002a58 <HAL_RCC_ClockConfig+0x1b0>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0307 	and.w	r3, r3, #7
 80028c4:	683a      	ldr	r2, [r7, #0]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d910      	bls.n	80028ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ca:	4b63      	ldr	r3, [pc, #396]	; (8002a58 <HAL_RCC_ClockConfig+0x1b0>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f023 0207 	bic.w	r2, r3, #7
 80028d2:	4961      	ldr	r1, [pc, #388]	; (8002a58 <HAL_RCC_ClockConfig+0x1b0>)
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028da:	4b5f      	ldr	r3, [pc, #380]	; (8002a58 <HAL_RCC_ClockConfig+0x1b0>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0307 	and.w	r3, r3, #7
 80028e2:	683a      	ldr	r2, [r7, #0]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d001      	beq.n	80028ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e0b0      	b.n	8002a4e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0301 	and.w	r3, r3, #1
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d04c      	beq.n	8002992 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	2b03      	cmp	r3, #3
 80028fe:	d107      	bne.n	8002910 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002900:	4b56      	ldr	r3, [pc, #344]	; (8002a5c <HAL_RCC_ClockConfig+0x1b4>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d121      	bne.n	8002950 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e09e      	b.n	8002a4e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	2b02      	cmp	r3, #2
 8002916:	d107      	bne.n	8002928 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002918:	4b50      	ldr	r3, [pc, #320]	; (8002a5c <HAL_RCC_ClockConfig+0x1b4>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d115      	bne.n	8002950 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e092      	b.n	8002a4e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d107      	bne.n	8002940 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002930:	4b4a      	ldr	r3, [pc, #296]	; (8002a5c <HAL_RCC_ClockConfig+0x1b4>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0302 	and.w	r3, r3, #2
 8002938:	2b00      	cmp	r3, #0
 800293a:	d109      	bne.n	8002950 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e086      	b.n	8002a4e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002940:	4b46      	ldr	r3, [pc, #280]	; (8002a5c <HAL_RCC_ClockConfig+0x1b4>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002948:	2b00      	cmp	r3, #0
 800294a:	d101      	bne.n	8002950 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e07e      	b.n	8002a4e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002950:	4b42      	ldr	r3, [pc, #264]	; (8002a5c <HAL_RCC_ClockConfig+0x1b4>)
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f023 0203 	bic.w	r2, r3, #3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	493f      	ldr	r1, [pc, #252]	; (8002a5c <HAL_RCC_ClockConfig+0x1b4>)
 800295e:	4313      	orrs	r3, r2
 8002960:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002962:	f7fe f98b 	bl	8000c7c <HAL_GetTick>
 8002966:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002968:	e00a      	b.n	8002980 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800296a:	f7fe f987 	bl	8000c7c <HAL_GetTick>
 800296e:	4602      	mov	r2, r0
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	f241 3288 	movw	r2, #5000	; 0x1388
 8002978:	4293      	cmp	r3, r2
 800297a:	d901      	bls.n	8002980 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	e066      	b.n	8002a4e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002980:	4b36      	ldr	r3, [pc, #216]	; (8002a5c <HAL_RCC_ClockConfig+0x1b4>)
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f003 020c 	and.w	r2, r3, #12
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	429a      	cmp	r2, r3
 8002990:	d1eb      	bne.n	800296a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	2b00      	cmp	r3, #0
 800299c:	d008      	beq.n	80029b0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800299e:	4b2f      	ldr	r3, [pc, #188]	; (8002a5c <HAL_RCC_ClockConfig+0x1b4>)
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	492c      	ldr	r1, [pc, #176]	; (8002a5c <HAL_RCC_ClockConfig+0x1b4>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029b0:	4b29      	ldr	r3, [pc, #164]	; (8002a58 <HAL_RCC_ClockConfig+0x1b0>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0307 	and.w	r3, r3, #7
 80029b8:	683a      	ldr	r2, [r7, #0]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d210      	bcs.n	80029e0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029be:	4b26      	ldr	r3, [pc, #152]	; (8002a58 <HAL_RCC_ClockConfig+0x1b0>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f023 0207 	bic.w	r2, r3, #7
 80029c6:	4924      	ldr	r1, [pc, #144]	; (8002a58 <HAL_RCC_ClockConfig+0x1b0>)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ce:	4b22      	ldr	r3, [pc, #136]	; (8002a58 <HAL_RCC_ClockConfig+0x1b0>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0307 	and.w	r3, r3, #7
 80029d6:	683a      	ldr	r2, [r7, #0]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d001      	beq.n	80029e0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e036      	b.n	8002a4e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0304 	and.w	r3, r3, #4
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d008      	beq.n	80029fe <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029ec:	4b1b      	ldr	r3, [pc, #108]	; (8002a5c <HAL_RCC_ClockConfig+0x1b4>)
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	4918      	ldr	r1, [pc, #96]	; (8002a5c <HAL_RCC_ClockConfig+0x1b4>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0308 	and.w	r3, r3, #8
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d009      	beq.n	8002a1e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a0a:	4b14      	ldr	r3, [pc, #80]	; (8002a5c <HAL_RCC_ClockConfig+0x1b4>)
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	00db      	lsls	r3, r3, #3
 8002a18:	4910      	ldr	r1, [pc, #64]	; (8002a5c <HAL_RCC_ClockConfig+0x1b4>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a1e:	f000 f825 	bl	8002a6c <HAL_RCC_GetSysClockFreq>
 8002a22:	4601      	mov	r1, r0
 8002a24:	4b0d      	ldr	r3, [pc, #52]	; (8002a5c <HAL_RCC_ClockConfig+0x1b4>)
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	091b      	lsrs	r3, r3, #4
 8002a2a:	f003 030f 	and.w	r3, r3, #15
 8002a2e:	4a0c      	ldr	r2, [pc, #48]	; (8002a60 <HAL_RCC_ClockConfig+0x1b8>)
 8002a30:	5cd3      	ldrb	r3, [r2, r3]
 8002a32:	f003 031f 	and.w	r3, r3, #31
 8002a36:	fa21 f303 	lsr.w	r3, r1, r3
 8002a3a:	4a0a      	ldr	r2, [pc, #40]	; (8002a64 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002a3e:	4b0a      	ldr	r3, [pc, #40]	; (8002a68 <HAL_RCC_ClockConfig+0x1c0>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7fe f8ce 	bl	8000be4 <HAL_InitTick>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	72fb      	strb	r3, [r7, #11]

  return status;
 8002a4c:	7afb      	ldrb	r3, [r7, #11]
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3710      	adds	r7, #16
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	40022000 	.word	0x40022000
 8002a5c:	40021000 	.word	0x40021000
 8002a60:	08003b94 	.word	0x08003b94
 8002a64:	20000030 	.word	0x20000030
 8002a68:	20000034 	.word	0x20000034

08002a6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b089      	sub	sp, #36	; 0x24
 8002a70:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002a72:	2300      	movs	r3, #0
 8002a74:	61fb      	str	r3, [r7, #28]
 8002a76:	2300      	movs	r3, #0
 8002a78:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a7a:	4b3d      	ldr	r3, [pc, #244]	; (8002b70 <HAL_RCC_GetSysClockFreq+0x104>)
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f003 030c 	and.w	r3, r3, #12
 8002a82:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a84:	4b3a      	ldr	r3, [pc, #232]	; (8002b70 <HAL_RCC_GetSysClockFreq+0x104>)
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	f003 0303 	and.w	r3, r3, #3
 8002a8c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d005      	beq.n	8002aa0 <HAL_RCC_GetSysClockFreq+0x34>
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	2b0c      	cmp	r3, #12
 8002a98:	d121      	bne.n	8002ade <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d11e      	bne.n	8002ade <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002aa0:	4b33      	ldr	r3, [pc, #204]	; (8002b70 <HAL_RCC_GetSysClockFreq+0x104>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0308 	and.w	r3, r3, #8
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d107      	bne.n	8002abc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002aac:	4b30      	ldr	r3, [pc, #192]	; (8002b70 <HAL_RCC_GetSysClockFreq+0x104>)
 8002aae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ab2:	0a1b      	lsrs	r3, r3, #8
 8002ab4:	f003 030f 	and.w	r3, r3, #15
 8002ab8:	61fb      	str	r3, [r7, #28]
 8002aba:	e005      	b.n	8002ac8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002abc:	4b2c      	ldr	r3, [pc, #176]	; (8002b70 <HAL_RCC_GetSysClockFreq+0x104>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	091b      	lsrs	r3, r3, #4
 8002ac2:	f003 030f 	and.w	r3, r3, #15
 8002ac6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002ac8:	4a2a      	ldr	r2, [pc, #168]	; (8002b74 <HAL_RCC_GetSysClockFreq+0x108>)
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ad0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d10d      	bne.n	8002af4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002adc:	e00a      	b.n	8002af4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	2b04      	cmp	r3, #4
 8002ae2:	d102      	bne.n	8002aea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002ae4:	4b24      	ldr	r3, [pc, #144]	; (8002b78 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002ae6:	61bb      	str	r3, [r7, #24]
 8002ae8:	e004      	b.n	8002af4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	2b08      	cmp	r3, #8
 8002aee:	d101      	bne.n	8002af4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002af0:	4b22      	ldr	r3, [pc, #136]	; (8002b7c <HAL_RCC_GetSysClockFreq+0x110>)
 8002af2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	2b0c      	cmp	r3, #12
 8002af8:	d133      	bne.n	8002b62 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002afa:	4b1d      	ldr	r3, [pc, #116]	; (8002b70 <HAL_RCC_GetSysClockFreq+0x104>)
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	f003 0303 	and.w	r3, r3, #3
 8002b02:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d002      	beq.n	8002b10 <HAL_RCC_GetSysClockFreq+0xa4>
 8002b0a:	2b03      	cmp	r3, #3
 8002b0c:	d003      	beq.n	8002b16 <HAL_RCC_GetSysClockFreq+0xaa>
 8002b0e:	e005      	b.n	8002b1c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002b10:	4b19      	ldr	r3, [pc, #100]	; (8002b78 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002b12:	617b      	str	r3, [r7, #20]
      break;
 8002b14:	e005      	b.n	8002b22 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002b16:	4b19      	ldr	r3, [pc, #100]	; (8002b7c <HAL_RCC_GetSysClockFreq+0x110>)
 8002b18:	617b      	str	r3, [r7, #20]
      break;
 8002b1a:	e002      	b.n	8002b22 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	617b      	str	r3, [r7, #20]
      break;
 8002b20:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b22:	4b13      	ldr	r3, [pc, #76]	; (8002b70 <HAL_RCC_GetSysClockFreq+0x104>)
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	091b      	lsrs	r3, r3, #4
 8002b28:	f003 0307 	and.w	r3, r3, #7
 8002b2c:	3301      	adds	r3, #1
 8002b2e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002b30:	4b0f      	ldr	r3, [pc, #60]	; (8002b70 <HAL_RCC_GetSysClockFreq+0x104>)
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	0a1b      	lsrs	r3, r3, #8
 8002b36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b3a:	697a      	ldr	r2, [r7, #20]
 8002b3c:	fb02 f203 	mul.w	r2, r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b46:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b48:	4b09      	ldr	r3, [pc, #36]	; (8002b70 <HAL_RCC_GetSysClockFreq+0x104>)
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	0e5b      	lsrs	r3, r3, #25
 8002b4e:	f003 0303 	and.w	r3, r3, #3
 8002b52:	3301      	adds	r3, #1
 8002b54:	005b      	lsls	r3, r3, #1
 8002b56:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002b58:	697a      	ldr	r2, [r7, #20]
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b60:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002b62:	69bb      	ldr	r3, [r7, #24]
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3724      	adds	r7, #36	; 0x24
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr
 8002b70:	40021000 	.word	0x40021000
 8002b74:	08003bac 	.word	0x08003bac
 8002b78:	00f42400 	.word	0x00f42400
 8002b7c:	007a1200 	.word	0x007a1200

08002b80 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b80:	b480      	push	{r7}
 8002b82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b84:	4b03      	ldr	r3, [pc, #12]	; (8002b94 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b86:	681b      	ldr	r3, [r3, #0]
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	20000030 	.word	0x20000030

08002b98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002b9c:	f7ff fff0 	bl	8002b80 <HAL_RCC_GetHCLKFreq>
 8002ba0:	4601      	mov	r1, r0
 8002ba2:	4b06      	ldr	r3, [pc, #24]	; (8002bbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	0a1b      	lsrs	r3, r3, #8
 8002ba8:	f003 0307 	and.w	r3, r3, #7
 8002bac:	4a04      	ldr	r2, [pc, #16]	; (8002bc0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002bae:	5cd3      	ldrb	r3, [r2, r3]
 8002bb0:	f003 031f 	and.w	r3, r3, #31
 8002bb4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	40021000 	.word	0x40021000
 8002bc0:	08003ba4 	.word	0x08003ba4

08002bc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002bc8:	f7ff ffda 	bl	8002b80 <HAL_RCC_GetHCLKFreq>
 8002bcc:	4601      	mov	r1, r0
 8002bce:	4b06      	ldr	r3, [pc, #24]	; (8002be8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	0adb      	lsrs	r3, r3, #11
 8002bd4:	f003 0307 	and.w	r3, r3, #7
 8002bd8:	4a04      	ldr	r2, [pc, #16]	; (8002bec <HAL_RCC_GetPCLK2Freq+0x28>)
 8002bda:	5cd3      	ldrb	r3, [r2, r3]
 8002bdc:	f003 031f 	and.w	r3, r3, #31
 8002be0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	40021000 	.word	0x40021000
 8002bec:	08003ba4 	.word	0x08003ba4

08002bf0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b086      	sub	sp, #24
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002bfc:	4b2a      	ldr	r3, [pc, #168]	; (8002ca8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d003      	beq.n	8002c10 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002c08:	f7ff f9fc 	bl	8002004 <HAL_PWREx_GetVoltageRange>
 8002c0c:	6178      	str	r0, [r7, #20]
 8002c0e:	e014      	b.n	8002c3a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c10:	4b25      	ldr	r3, [pc, #148]	; (8002ca8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c14:	4a24      	ldr	r2, [pc, #144]	; (8002ca8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c1a:	6593      	str	r3, [r2, #88]	; 0x58
 8002c1c:	4b22      	ldr	r3, [pc, #136]	; (8002ca8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c24:	60fb      	str	r3, [r7, #12]
 8002c26:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002c28:	f7ff f9ec 	bl	8002004 <HAL_PWREx_GetVoltageRange>
 8002c2c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002c2e:	4b1e      	ldr	r3, [pc, #120]	; (8002ca8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c32:	4a1d      	ldr	r2, [pc, #116]	; (8002ca8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c38:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c40:	d10b      	bne.n	8002c5a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2b80      	cmp	r3, #128	; 0x80
 8002c46:	d919      	bls.n	8002c7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2ba0      	cmp	r3, #160	; 0xa0
 8002c4c:	d902      	bls.n	8002c54 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c4e:	2302      	movs	r3, #2
 8002c50:	613b      	str	r3, [r7, #16]
 8002c52:	e013      	b.n	8002c7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c54:	2301      	movs	r3, #1
 8002c56:	613b      	str	r3, [r7, #16]
 8002c58:	e010      	b.n	8002c7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2b80      	cmp	r3, #128	; 0x80
 8002c5e:	d902      	bls.n	8002c66 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002c60:	2303      	movs	r3, #3
 8002c62:	613b      	str	r3, [r7, #16]
 8002c64:	e00a      	b.n	8002c7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2b80      	cmp	r3, #128	; 0x80
 8002c6a:	d102      	bne.n	8002c72 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	613b      	str	r3, [r7, #16]
 8002c70:	e004      	b.n	8002c7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2b70      	cmp	r3, #112	; 0x70
 8002c76:	d101      	bne.n	8002c7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c78:	2301      	movs	r3, #1
 8002c7a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002c7c:	4b0b      	ldr	r3, [pc, #44]	; (8002cac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f023 0207 	bic.w	r2, r3, #7
 8002c84:	4909      	ldr	r1, [pc, #36]	; (8002cac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002c8c:	4b07      	ldr	r3, [pc, #28]	; (8002cac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0307 	and.w	r3, r3, #7
 8002c94:	693a      	ldr	r2, [r7, #16]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d001      	beq.n	8002c9e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e000      	b.n	8002ca0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002c9e:	2300      	movs	r3, #0
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3718      	adds	r7, #24
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	40021000 	.word	0x40021000
 8002cac:	40022000 	.word	0x40022000

08002cb0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b086      	sub	sp, #24
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002cb8:	2300      	movs	r3, #0
 8002cba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d02f      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cd0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002cd4:	d005      	beq.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002cd6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002cda:	d015      	beq.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d007      	beq.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002ce0:	e00f      	b.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002ce2:	4bac      	ldr	r3, [pc, #688]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	4aab      	ldr	r2, [pc, #684]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002ce8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cec:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002cee:	e00c      	b.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	3304      	adds	r3, #4
 8002cf4:	2100      	movs	r1, #0
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f000 f9dc 	bl	80030b4 <RCCEx_PLLSAI1_Config>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d00:	e003      	b.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	74fb      	strb	r3, [r7, #19]
      break;
 8002d06:	e000      	b.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8002d08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d0a:	7cfb      	ldrb	r3, [r7, #19]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d10b      	bne.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d10:	4ba0      	ldr	r3, [pc, #640]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d16:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d1e:	499d      	ldr	r1, [pc, #628]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002d20:	4313      	orrs	r3, r2
 8002d22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002d26:	e001      	b.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d28:	7cfb      	ldrb	r3, [r7, #19]
 8002d2a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	f000 8099 	beq.w	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002d3e:	4b95      	ldr	r3, [pc, #596]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d101      	bne.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e000      	b.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8002d4e:	2300      	movs	r3, #0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d00d      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d54:	4b8f      	ldr	r3, [pc, #572]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d58:	4a8e      	ldr	r2, [pc, #568]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002d5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d5e:	6593      	str	r3, [r2, #88]	; 0x58
 8002d60:	4b8c      	ldr	r3, [pc, #560]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002d62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d68:	60bb      	str	r3, [r7, #8]
 8002d6a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d70:	4b89      	ldr	r3, [pc, #548]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a88      	ldr	r2, [pc, #544]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002d76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d7a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d7c:	f7fd ff7e 	bl	8000c7c <HAL_GetTick>
 8002d80:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d82:	e009      	b.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d84:	f7fd ff7a 	bl	8000c7c <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d902      	bls.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	74fb      	strb	r3, [r7, #19]
        break;
 8002d96:	e005      	b.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d98:	4b7f      	ldr	r3, [pc, #508]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d0ef      	beq.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 8002da4:	7cfb      	ldrb	r3, [r7, #19]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d155      	bne.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002daa:	4b7a      	ldr	r3, [pc, #488]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002db0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002db4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d01e      	beq.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dc0:	697a      	ldr	r2, [r7, #20]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d019      	beq.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002dc6:	4b73      	ldr	r3, [pc, #460]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dd0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002dd2:	4b70      	ldr	r3, [pc, #448]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dd8:	4a6e      	ldr	r2, [pc, #440]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002dda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002de2:	4b6c      	ldr	r3, [pc, #432]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002de8:	4a6a      	ldr	r2, [pc, #424]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002dea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002df2:	4a68      	ldr	r2, [pc, #416]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	f003 0301 	and.w	r3, r3, #1
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d016      	beq.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e04:	f7fd ff3a 	bl	8000c7c <HAL_GetTick>
 8002e08:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e0a:	e00b      	b.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e0c:	f7fd ff36 	bl	8000c7c <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d902      	bls.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	74fb      	strb	r3, [r7, #19]
            break;
 8002e22:	e006      	b.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e24:	4b5b      	ldr	r3, [pc, #364]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e2a:	f003 0302 	and.w	r3, r3, #2
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d0ec      	beq.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 8002e32:	7cfb      	ldrb	r3, [r7, #19]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d10b      	bne.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e38:	4b56      	ldr	r3, [pc, #344]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e3e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e46:	4953      	ldr	r1, [pc, #332]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002e4e:	e004      	b.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002e50:	7cfb      	ldrb	r3, [r7, #19]
 8002e52:	74bb      	strb	r3, [r7, #18]
 8002e54:	e001      	b.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e56:	7cfb      	ldrb	r3, [r7, #19]
 8002e58:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e5a:	7c7b      	ldrb	r3, [r7, #17]
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d105      	bne.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e60:	4b4c      	ldr	r3, [pc, #304]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e64:	4a4b      	ldr	r2, [pc, #300]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002e66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e6a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0301 	and.w	r3, r3, #1
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d00a      	beq.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e78:	4b46      	ldr	r3, [pc, #280]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e7e:	f023 0203 	bic.w	r2, r3, #3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a1b      	ldr	r3, [r3, #32]
 8002e86:	4943      	ldr	r1, [pc, #268]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0302 	and.w	r3, r3, #2
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d00a      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e9a:	4b3e      	ldr	r3, [pc, #248]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ea0:	f023 020c 	bic.w	r2, r3, #12
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea8:	493a      	ldr	r1, [pc, #232]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0320 	and.w	r3, r3, #32
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d00a      	beq.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ebc:	4b35      	ldr	r3, [pc, #212]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ec2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eca:	4932      	ldr	r1, [pc, #200]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d00a      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ede:	4b2d      	ldr	r3, [pc, #180]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ee4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eec:	4929      	ldr	r1, [pc, #164]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d00a      	beq.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002f00:	4b24      	ldr	r3, [pc, #144]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f06:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f0e:	4921      	ldr	r1, [pc, #132]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00a      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f22:	4b1c      	ldr	r3, [pc, #112]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f28:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f30:	4918      	ldr	r1, [pc, #96]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d00a      	beq.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f44:	4b13      	ldr	r3, [pc, #76]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f4a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f52:	4910      	ldr	r1, [pc, #64]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d02c      	beq.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f66:	4b0b      	ldr	r3, [pc, #44]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f6c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f74:	4907      	ldr	r1, [pc, #28]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f84:	d10a      	bne.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f86:	4b03      	ldr	r3, [pc, #12]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	4a02      	ldr	r2, [pc, #8]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002f8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f90:	60d3      	str	r3, [r2, #12]
 8002f92:	e015      	b.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002f94:	40021000 	.word	0x40021000
 8002f98:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002fa4:	d10c      	bne.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x310>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	3304      	adds	r3, #4
 8002faa:	2101      	movs	r1, #1
 8002fac:	4618      	mov	r0, r3
 8002fae:	f000 f881 	bl	80030b4 <RCCEx_PLLSAI1_Config>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002fb6:	7cfb      	ldrb	r3, [r7, #19]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d001      	beq.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x310>
        {
          /* set overall return value */
          status = ret;
 8002fbc:	7cfb      	ldrb	r3, [r7, #19]
 8002fbe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d028      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002fcc:	4b30      	ldr	r3, [pc, #192]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fd2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fda:	492d      	ldr	r1, [pc, #180]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fe6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fea:	d106      	bne.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fec:	4b28      	ldr	r3, [pc, #160]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	4a27      	ldr	r2, [pc, #156]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ff2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ff6:	60d3      	str	r3, [r2, #12]
 8002ff8:	e011      	b.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ffe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003002:	d10c      	bne.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	3304      	adds	r3, #4
 8003008:	2101      	movs	r1, #1
 800300a:	4618      	mov	r0, r3
 800300c:	f000 f852 	bl	80030b4 <RCCEx_PLLSAI1_Config>
 8003010:	4603      	mov	r3, r0
 8003012:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003014:	7cfb      	ldrb	r3, [r7, #19]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d001      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x36e>
      {
        /* set overall return value */
        status = ret;
 800301a:	7cfb      	ldrb	r3, [r7, #19]
 800301c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d01c      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800302a:	4b19      	ldr	r3, [pc, #100]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800302c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003030:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003038:	4915      	ldr	r1, [pc, #84]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800303a:	4313      	orrs	r3, r2
 800303c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003044:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003048:	d10c      	bne.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	3304      	adds	r3, #4
 800304e:	2102      	movs	r1, #2
 8003050:	4618      	mov	r0, r3
 8003052:	f000 f82f 	bl	80030b4 <RCCEx_PLLSAI1_Config>
 8003056:	4603      	mov	r3, r0
 8003058:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800305a:	7cfb      	ldrb	r3, [r7, #19]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 8003060:	7cfb      	ldrb	r3, [r7, #19]
 8003062:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d00a      	beq.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003070:	4b07      	ldr	r3, [pc, #28]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003076:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800307e:	4904      	ldr	r1, [pc, #16]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003080:	4313      	orrs	r3, r2
 8003082:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003086:	7cbb      	ldrb	r3, [r7, #18]
}
 8003088:	4618      	mov	r0, r3
 800308a:	3718      	adds	r7, #24
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	40021000 	.word	0x40021000

08003094 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003094:	b480      	push	{r7}
 8003096:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003098:	4b05      	ldr	r3, [pc, #20]	; (80030b0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a04      	ldr	r2, [pc, #16]	; (80030b0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800309e:	f043 0304 	orr.w	r3, r3, #4
 80030a2:	6013      	str	r3, [r2, #0]
}
 80030a4:	bf00      	nop
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	40021000 	.word	0x40021000

080030b4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80030be:	2300      	movs	r3, #0
 80030c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80030c2:	4b73      	ldr	r3, [pc, #460]	; (8003290 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	f003 0303 	and.w	r3, r3, #3
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d018      	beq.n	8003100 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80030ce:	4b70      	ldr	r3, [pc, #448]	; (8003290 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	f003 0203 	and.w	r2, r3, #3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	429a      	cmp	r2, r3
 80030dc:	d10d      	bne.n	80030fa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
       ||
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d009      	beq.n	80030fa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80030e6:	4b6a      	ldr	r3, [pc, #424]	; (8003290 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	091b      	lsrs	r3, r3, #4
 80030ec:	f003 0307 	and.w	r3, r3, #7
 80030f0:	1c5a      	adds	r2, r3, #1
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
       ||
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d044      	beq.n	8003184 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	73fb      	strb	r3, [r7, #15]
 80030fe:	e041      	b.n	8003184 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2b02      	cmp	r3, #2
 8003106:	d00c      	beq.n	8003122 <RCCEx_PLLSAI1_Config+0x6e>
 8003108:	2b03      	cmp	r3, #3
 800310a:	d013      	beq.n	8003134 <RCCEx_PLLSAI1_Config+0x80>
 800310c:	2b01      	cmp	r3, #1
 800310e:	d120      	bne.n	8003152 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003110:	4b5f      	ldr	r3, [pc, #380]	; (8003290 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0302 	and.w	r3, r3, #2
 8003118:	2b00      	cmp	r3, #0
 800311a:	d11d      	bne.n	8003158 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003120:	e01a      	b.n	8003158 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003122:	4b5b      	ldr	r3, [pc, #364]	; (8003290 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800312a:	2b00      	cmp	r3, #0
 800312c:	d116      	bne.n	800315c <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003132:	e013      	b.n	800315c <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003134:	4b56      	ldr	r3, [pc, #344]	; (8003290 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d10f      	bne.n	8003160 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003140:	4b53      	ldr	r3, [pc, #332]	; (8003290 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003148:	2b00      	cmp	r3, #0
 800314a:	d109      	bne.n	8003160 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003150:	e006      	b.n	8003160 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	73fb      	strb	r3, [r7, #15]
      break;
 8003156:	e004      	b.n	8003162 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003158:	bf00      	nop
 800315a:	e002      	b.n	8003162 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800315c:	bf00      	nop
 800315e:	e000      	b.n	8003162 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003160:	bf00      	nop
    }

    if(status == HAL_OK)
 8003162:	7bfb      	ldrb	r3, [r7, #15]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d10d      	bne.n	8003184 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003168:	4b49      	ldr	r3, [pc, #292]	; (8003290 <RCCEx_PLLSAI1_Config+0x1dc>)
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6819      	ldr	r1, [r3, #0]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	3b01      	subs	r3, #1
 800317a:	011b      	lsls	r3, r3, #4
 800317c:	430b      	orrs	r3, r1
 800317e:	4944      	ldr	r1, [pc, #272]	; (8003290 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003180:	4313      	orrs	r3, r2
 8003182:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003184:	7bfb      	ldrb	r3, [r7, #15]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d17c      	bne.n	8003284 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800318a:	4b41      	ldr	r3, [pc, #260]	; (8003290 <RCCEx_PLLSAI1_Config+0x1dc>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a40      	ldr	r2, [pc, #256]	; (8003290 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003190:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003194:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003196:	f7fd fd71 	bl	8000c7c <HAL_GetTick>
 800319a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800319c:	e009      	b.n	80031b2 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800319e:	f7fd fd6d 	bl	8000c7c <HAL_GetTick>
 80031a2:	4602      	mov	r2, r0
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	d902      	bls.n	80031b2 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	73fb      	strb	r3, [r7, #15]
        break;
 80031b0:	e005      	b.n	80031be <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80031b2:	4b37      	ldr	r3, [pc, #220]	; (8003290 <RCCEx_PLLSAI1_Config+0x1dc>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d1ef      	bne.n	800319e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80031be:	7bfb      	ldrb	r3, [r7, #15]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d15f      	bne.n	8003284 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d110      	bne.n	80031ec <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031ca:	4b31      	ldr	r3, [pc, #196]	; (8003290 <RCCEx_PLLSAI1_Config+0x1dc>)
 80031cc:	691b      	ldr	r3, [r3, #16]
 80031ce:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80031d2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	6892      	ldr	r2, [r2, #8]
 80031da:	0211      	lsls	r1, r2, #8
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	68d2      	ldr	r2, [r2, #12]
 80031e0:	06d2      	lsls	r2, r2, #27
 80031e2:	430a      	orrs	r2, r1
 80031e4:	492a      	ldr	r1, [pc, #168]	; (8003290 <RCCEx_PLLSAI1_Config+0x1dc>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	610b      	str	r3, [r1, #16]
 80031ea:	e027      	b.n	800323c <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d112      	bne.n	8003218 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031f2:	4b27      	ldr	r3, [pc, #156]	; (8003290 <RCCEx_PLLSAI1_Config+0x1dc>)
 80031f4:	691b      	ldr	r3, [r3, #16]
 80031f6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80031fa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	6892      	ldr	r2, [r2, #8]
 8003202:	0211      	lsls	r1, r2, #8
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	6912      	ldr	r2, [r2, #16]
 8003208:	0852      	lsrs	r2, r2, #1
 800320a:	3a01      	subs	r2, #1
 800320c:	0552      	lsls	r2, r2, #21
 800320e:	430a      	orrs	r2, r1
 8003210:	491f      	ldr	r1, [pc, #124]	; (8003290 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003212:	4313      	orrs	r3, r2
 8003214:	610b      	str	r3, [r1, #16]
 8003216:	e011      	b.n	800323c <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003218:	4b1d      	ldr	r3, [pc, #116]	; (8003290 <RCCEx_PLLSAI1_Config+0x1dc>)
 800321a:	691b      	ldr	r3, [r3, #16]
 800321c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003220:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	6892      	ldr	r2, [r2, #8]
 8003228:	0211      	lsls	r1, r2, #8
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	6952      	ldr	r2, [r2, #20]
 800322e:	0852      	lsrs	r2, r2, #1
 8003230:	3a01      	subs	r2, #1
 8003232:	0652      	lsls	r2, r2, #25
 8003234:	430a      	orrs	r2, r1
 8003236:	4916      	ldr	r1, [pc, #88]	; (8003290 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003238:	4313      	orrs	r3, r2
 800323a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800323c:	4b14      	ldr	r3, [pc, #80]	; (8003290 <RCCEx_PLLSAI1_Config+0x1dc>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a13      	ldr	r2, [pc, #76]	; (8003290 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003242:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003246:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003248:	f7fd fd18 	bl	8000c7c <HAL_GetTick>
 800324c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800324e:	e009      	b.n	8003264 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003250:	f7fd fd14 	bl	8000c7c <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	2b02      	cmp	r3, #2
 800325c:	d902      	bls.n	8003264 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	73fb      	strb	r3, [r7, #15]
          break;
 8003262:	e005      	b.n	8003270 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003264:	4b0a      	ldr	r3, [pc, #40]	; (8003290 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d0ef      	beq.n	8003250 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8003270:	7bfb      	ldrb	r3, [r7, #15]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d106      	bne.n	8003284 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003276:	4b06      	ldr	r3, [pc, #24]	; (8003290 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003278:	691a      	ldr	r2, [r3, #16]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	699b      	ldr	r3, [r3, #24]
 800327e:	4904      	ldr	r1, [pc, #16]	; (8003290 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003280:	4313      	orrs	r3, r2
 8003282:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003284:	7bfb      	ldrb	r3, [r7, #15]
}
 8003286:	4618      	mov	r0, r3
 8003288:	3710      	adds	r7, #16
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	40021000 	.word	0x40021000

08003294 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d101      	bne.n	80032a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e040      	b.n	8003328 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d106      	bne.n	80032bc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f7fd fb9a 	bl	80009f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2224      	movs	r2, #36	; 0x24
 80032c0:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f022 0201 	bic.w	r2, r2, #1
 80032d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 f82c 	bl	8003330 <UART_SetConfig>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d101      	bne.n	80032e2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e022      	b.n	8003328 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d002      	beq.n	80032f0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f000 faea 	bl	80038c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	685a      	ldr	r2, [r3, #4]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	689a      	ldr	r2, [r3, #8]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800330e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f042 0201 	orr.w	r2, r2, #1
 800331e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f000 fb71 	bl	8003a08 <UART_CheckIdleState>
 8003326:	4603      	mov	r3, r0
}
 8003328:	4618      	mov	r0, r3
 800332a:	3708      	adds	r7, #8
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}

08003330 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003330:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003334:	b088      	sub	sp, #32
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800333a:	2300      	movs	r3, #0
 800333c:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 800333e:	2300      	movs	r3, #0
 8003340:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8003342:	2300      	movs	r3, #0
 8003344:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	689a      	ldr	r2, [r3, #8]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	431a      	orrs	r2, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	695b      	ldr	r3, [r3, #20]
 8003354:	431a      	orrs	r2, r3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	69db      	ldr	r3, [r3, #28]
 800335a:	4313      	orrs	r3, r2
 800335c:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	4bbc      	ldr	r3, [pc, #752]	; (8003658 <UART_SetConfig+0x328>)
 8003366:	4013      	ands	r3, r2
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	6812      	ldr	r2, [r2, #0]
 800336c:	69f9      	ldr	r1, [r7, #28]
 800336e:	430b      	orrs	r3, r1
 8003370:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	68da      	ldr	r2, [r3, #12]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	430a      	orrs	r2, r1
 8003386:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	699b      	ldr	r3, [r3, #24]
 800338c:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4ab2      	ldr	r2, [pc, #712]	; (800365c <UART_SetConfig+0x32c>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d004      	beq.n	80033a2 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a1b      	ldr	r3, [r3, #32]
 800339c:	69fa      	ldr	r2, [r7, #28]
 800339e:	4313      	orrs	r3, r2
 80033a0:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	69fa      	ldr	r2, [r7, #28]
 80033b2:	430a      	orrs	r2, r1
 80033b4:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4aa9      	ldr	r2, [pc, #676]	; (8003660 <UART_SetConfig+0x330>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d121      	bne.n	8003404 <UART_SetConfig+0xd4>
 80033c0:	4ba8      	ldr	r3, [pc, #672]	; (8003664 <UART_SetConfig+0x334>)
 80033c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033c6:	f003 0303 	and.w	r3, r3, #3
 80033ca:	2b03      	cmp	r3, #3
 80033cc:	d816      	bhi.n	80033fc <UART_SetConfig+0xcc>
 80033ce:	a201      	add	r2, pc, #4	; (adr r2, 80033d4 <UART_SetConfig+0xa4>)
 80033d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033d4:	080033e5 	.word	0x080033e5
 80033d8:	080033f1 	.word	0x080033f1
 80033dc:	080033eb 	.word	0x080033eb
 80033e0:	080033f7 	.word	0x080033f7
 80033e4:	2301      	movs	r3, #1
 80033e6:	76fb      	strb	r3, [r7, #27]
 80033e8:	e072      	b.n	80034d0 <UART_SetConfig+0x1a0>
 80033ea:	2302      	movs	r3, #2
 80033ec:	76fb      	strb	r3, [r7, #27]
 80033ee:	e06f      	b.n	80034d0 <UART_SetConfig+0x1a0>
 80033f0:	2304      	movs	r3, #4
 80033f2:	76fb      	strb	r3, [r7, #27]
 80033f4:	e06c      	b.n	80034d0 <UART_SetConfig+0x1a0>
 80033f6:	2308      	movs	r3, #8
 80033f8:	76fb      	strb	r3, [r7, #27]
 80033fa:	e069      	b.n	80034d0 <UART_SetConfig+0x1a0>
 80033fc:	2310      	movs	r3, #16
 80033fe:	76fb      	strb	r3, [r7, #27]
 8003400:	bf00      	nop
 8003402:	e065      	b.n	80034d0 <UART_SetConfig+0x1a0>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a97      	ldr	r2, [pc, #604]	; (8003668 <UART_SetConfig+0x338>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d134      	bne.n	8003478 <UART_SetConfig+0x148>
 800340e:	4b95      	ldr	r3, [pc, #596]	; (8003664 <UART_SetConfig+0x334>)
 8003410:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003414:	f003 030c 	and.w	r3, r3, #12
 8003418:	2b0c      	cmp	r3, #12
 800341a:	d829      	bhi.n	8003470 <UART_SetConfig+0x140>
 800341c:	a201      	add	r2, pc, #4	; (adr r2, 8003424 <UART_SetConfig+0xf4>)
 800341e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003422:	bf00      	nop
 8003424:	08003459 	.word	0x08003459
 8003428:	08003471 	.word	0x08003471
 800342c:	08003471 	.word	0x08003471
 8003430:	08003471 	.word	0x08003471
 8003434:	08003465 	.word	0x08003465
 8003438:	08003471 	.word	0x08003471
 800343c:	08003471 	.word	0x08003471
 8003440:	08003471 	.word	0x08003471
 8003444:	0800345f 	.word	0x0800345f
 8003448:	08003471 	.word	0x08003471
 800344c:	08003471 	.word	0x08003471
 8003450:	08003471 	.word	0x08003471
 8003454:	0800346b 	.word	0x0800346b
 8003458:	2300      	movs	r3, #0
 800345a:	76fb      	strb	r3, [r7, #27]
 800345c:	e038      	b.n	80034d0 <UART_SetConfig+0x1a0>
 800345e:	2302      	movs	r3, #2
 8003460:	76fb      	strb	r3, [r7, #27]
 8003462:	e035      	b.n	80034d0 <UART_SetConfig+0x1a0>
 8003464:	2304      	movs	r3, #4
 8003466:	76fb      	strb	r3, [r7, #27]
 8003468:	e032      	b.n	80034d0 <UART_SetConfig+0x1a0>
 800346a:	2308      	movs	r3, #8
 800346c:	76fb      	strb	r3, [r7, #27]
 800346e:	e02f      	b.n	80034d0 <UART_SetConfig+0x1a0>
 8003470:	2310      	movs	r3, #16
 8003472:	76fb      	strb	r3, [r7, #27]
 8003474:	bf00      	nop
 8003476:	e02b      	b.n	80034d0 <UART_SetConfig+0x1a0>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a77      	ldr	r2, [pc, #476]	; (800365c <UART_SetConfig+0x32c>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d124      	bne.n	80034cc <UART_SetConfig+0x19c>
 8003482:	4b78      	ldr	r3, [pc, #480]	; (8003664 <UART_SetConfig+0x334>)
 8003484:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003488:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800348c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003490:	d012      	beq.n	80034b8 <UART_SetConfig+0x188>
 8003492:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003496:	d802      	bhi.n	800349e <UART_SetConfig+0x16e>
 8003498:	2b00      	cmp	r3, #0
 800349a:	d007      	beq.n	80034ac <UART_SetConfig+0x17c>
 800349c:	e012      	b.n	80034c4 <UART_SetConfig+0x194>
 800349e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034a2:	d006      	beq.n	80034b2 <UART_SetConfig+0x182>
 80034a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80034a8:	d009      	beq.n	80034be <UART_SetConfig+0x18e>
 80034aa:	e00b      	b.n	80034c4 <UART_SetConfig+0x194>
 80034ac:	2300      	movs	r3, #0
 80034ae:	76fb      	strb	r3, [r7, #27]
 80034b0:	e00e      	b.n	80034d0 <UART_SetConfig+0x1a0>
 80034b2:	2302      	movs	r3, #2
 80034b4:	76fb      	strb	r3, [r7, #27]
 80034b6:	e00b      	b.n	80034d0 <UART_SetConfig+0x1a0>
 80034b8:	2304      	movs	r3, #4
 80034ba:	76fb      	strb	r3, [r7, #27]
 80034bc:	e008      	b.n	80034d0 <UART_SetConfig+0x1a0>
 80034be:	2308      	movs	r3, #8
 80034c0:	76fb      	strb	r3, [r7, #27]
 80034c2:	e005      	b.n	80034d0 <UART_SetConfig+0x1a0>
 80034c4:	2310      	movs	r3, #16
 80034c6:	76fb      	strb	r3, [r7, #27]
 80034c8:	bf00      	nop
 80034ca:	e001      	b.n	80034d0 <UART_SetConfig+0x1a0>
 80034cc:	2310      	movs	r3, #16
 80034ce:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a61      	ldr	r2, [pc, #388]	; (800365c <UART_SetConfig+0x32c>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	f040 80f4 	bne.w	80036c4 <UART_SetConfig+0x394>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80034dc:	7efb      	ldrb	r3, [r7, #27]
 80034de:	2b08      	cmp	r3, #8
 80034e0:	d823      	bhi.n	800352a <UART_SetConfig+0x1fa>
 80034e2:	a201      	add	r2, pc, #4	; (adr r2, 80034e8 <UART_SetConfig+0x1b8>)
 80034e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034e8:	0800350d 	.word	0x0800350d
 80034ec:	0800352b 	.word	0x0800352b
 80034f0:	08003515 	.word	0x08003515
 80034f4:	0800352b 	.word	0x0800352b
 80034f8:	0800351b 	.word	0x0800351b
 80034fc:	0800352b 	.word	0x0800352b
 8003500:	0800352b 	.word	0x0800352b
 8003504:	0800352b 	.word	0x0800352b
 8003508:	08003523 	.word	0x08003523
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800350c:	f7ff fb44 	bl	8002b98 <HAL_RCC_GetPCLK1Freq>
 8003510:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003512:	e00d      	b.n	8003530 <UART_SetConfig+0x200>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8003514:	4b55      	ldr	r3, [pc, #340]	; (800366c <UART_SetConfig+0x33c>)
 8003516:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003518:	e00a      	b.n	8003530 <UART_SetConfig+0x200>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800351a:	f7ff faa7 	bl	8002a6c <HAL_RCC_GetSysClockFreq>
 800351e:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003520:	e006      	b.n	8003530 <UART_SetConfig+0x200>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8003522:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003526:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003528:	e002      	b.n	8003530 <UART_SetConfig+0x200>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	74fb      	strb	r3, [r7, #19]
        break;
 800352e:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2b00      	cmp	r3, #0
 8003534:	f000 81b9 	beq.w	80038aa <UART_SetConfig+0x57a>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	685a      	ldr	r2, [r3, #4]
 800353c:	4613      	mov	r3, r2
 800353e:	005b      	lsls	r3, r3, #1
 8003540:	4413      	add	r3, r2
 8003542:	68fa      	ldr	r2, [r7, #12]
 8003544:	429a      	cmp	r2, r3
 8003546:	d305      	bcc.n	8003554 <UART_SetConfig+0x224>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800354e:	68fa      	ldr	r2, [r7, #12]
 8003550:	429a      	cmp	r2, r3
 8003552:	d902      	bls.n	800355a <UART_SetConfig+0x22a>
      {
        ret = HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	74fb      	strb	r3, [r7, #19]
 8003558:	e1a7      	b.n	80038aa <UART_SetConfig+0x57a>
      }
      else
      {
        switch (clocksource)
 800355a:	7efb      	ldrb	r3, [r7, #27]
 800355c:	2b08      	cmp	r3, #8
 800355e:	f200 809e 	bhi.w	800369e <UART_SetConfig+0x36e>
 8003562:	a201      	add	r2, pc, #4	; (adr r2, 8003568 <UART_SetConfig+0x238>)
 8003564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003568:	0800358d 	.word	0x0800358d
 800356c:	0800369f 	.word	0x0800369f
 8003570:	080035d9 	.word	0x080035d9
 8003574:	0800369f 	.word	0x0800369f
 8003578:	0800360d 	.word	0x0800360d
 800357c:	0800369f 	.word	0x0800369f
 8003580:	0800369f 	.word	0x0800369f
 8003584:	0800369f 	.word	0x0800369f
 8003588:	08003675 	.word	0x08003675
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800358c:	f7ff fb04 	bl	8002b98 <HAL_RCC_GetPCLK1Freq>
 8003590:	4603      	mov	r3, r0
 8003592:	4619      	mov	r1, r3
 8003594:	f04f 0200 	mov.w	r2, #0
 8003598:	f04f 0300 	mov.w	r3, #0
 800359c:	f04f 0400 	mov.w	r4, #0
 80035a0:	0214      	lsls	r4, r2, #8
 80035a2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80035a6:	020b      	lsls	r3, r1, #8
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	6852      	ldr	r2, [r2, #4]
 80035ac:	0852      	lsrs	r2, r2, #1
 80035ae:	4611      	mov	r1, r2
 80035b0:	f04f 0200 	mov.w	r2, #0
 80035b4:	eb13 0b01 	adds.w	fp, r3, r1
 80035b8:	eb44 0c02 	adc.w	ip, r4, r2
 80035bc:	4658      	mov	r0, fp
 80035be:	4661      	mov	r1, ip
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f04f 0400 	mov.w	r4, #0
 80035c8:	461a      	mov	r2, r3
 80035ca:	4623      	mov	r3, r4
 80035cc:	f7fc fdfe 	bl	80001cc <__aeabi_uldivmod>
 80035d0:	4603      	mov	r3, r0
 80035d2:	460c      	mov	r4, r1
 80035d4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80035d6:	e065      	b.n	80036a4 <UART_SetConfig+0x374>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	085b      	lsrs	r3, r3, #1
 80035de:	f04f 0400 	mov.w	r4, #0
 80035e2:	4923      	ldr	r1, [pc, #140]	; (8003670 <UART_SetConfig+0x340>)
 80035e4:	f04f 0200 	mov.w	r2, #0
 80035e8:	eb13 0b01 	adds.w	fp, r3, r1
 80035ec:	eb44 0c02 	adc.w	ip, r4, r2
 80035f0:	4658      	mov	r0, fp
 80035f2:	4661      	mov	r1, ip
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f04f 0400 	mov.w	r4, #0
 80035fc:	461a      	mov	r2, r3
 80035fe:	4623      	mov	r3, r4
 8003600:	f7fc fde4 	bl	80001cc <__aeabi_uldivmod>
 8003604:	4603      	mov	r3, r0
 8003606:	460c      	mov	r4, r1
 8003608:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800360a:	e04b      	b.n	80036a4 <UART_SetConfig+0x374>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800360c:	f7ff fa2e 	bl	8002a6c <HAL_RCC_GetSysClockFreq>
 8003610:	4603      	mov	r3, r0
 8003612:	4619      	mov	r1, r3
 8003614:	f04f 0200 	mov.w	r2, #0
 8003618:	f04f 0300 	mov.w	r3, #0
 800361c:	f04f 0400 	mov.w	r4, #0
 8003620:	0214      	lsls	r4, r2, #8
 8003622:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003626:	020b      	lsls	r3, r1, #8
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	6852      	ldr	r2, [r2, #4]
 800362c:	0852      	lsrs	r2, r2, #1
 800362e:	4611      	mov	r1, r2
 8003630:	f04f 0200 	mov.w	r2, #0
 8003634:	eb13 0b01 	adds.w	fp, r3, r1
 8003638:	eb44 0c02 	adc.w	ip, r4, r2
 800363c:	4658      	mov	r0, fp
 800363e:	4661      	mov	r1, ip
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f04f 0400 	mov.w	r4, #0
 8003648:	461a      	mov	r2, r3
 800364a:	4623      	mov	r3, r4
 800364c:	f7fc fdbe 	bl	80001cc <__aeabi_uldivmod>
 8003650:	4603      	mov	r3, r0
 8003652:	460c      	mov	r4, r1
 8003654:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003656:	e025      	b.n	80036a4 <UART_SetConfig+0x374>
 8003658:	efff69f3 	.word	0xefff69f3
 800365c:	40008000 	.word	0x40008000
 8003660:	40013800 	.word	0x40013800
 8003664:	40021000 	.word	0x40021000
 8003668:	40004400 	.word	0x40004400
 800366c:	00f42400 	.word	0x00f42400
 8003670:	f4240000 	.word	0xf4240000
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	085b      	lsrs	r3, r3, #1
 800367a:	f04f 0400 	mov.w	r4, #0
 800367e:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8003682:	f144 0100 	adc.w	r1, r4, #0
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	f04f 0400 	mov.w	r4, #0
 800368e:	461a      	mov	r2, r3
 8003690:	4623      	mov	r3, r4
 8003692:	f7fc fd9b 	bl	80001cc <__aeabi_uldivmod>
 8003696:	4603      	mov	r3, r0
 8003698:	460c      	mov	r4, r1
 800369a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800369c:	e002      	b.n	80036a4 <UART_SetConfig+0x374>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	74fb      	strb	r3, [r7, #19]
            break;
 80036a2:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036aa:	d308      	bcc.n	80036be <UART_SetConfig+0x38e>
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036b2:	d204      	bcs.n	80036be <UART_SetConfig+0x38e>
        {
          huart->Instance->BRR = usartdiv;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	697a      	ldr	r2, [r7, #20]
 80036ba:	60da      	str	r2, [r3, #12]
 80036bc:	e0f5      	b.n	80038aa <UART_SetConfig+0x57a>
        }
        else
        {
          ret = HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	74fb      	strb	r3, [r7, #19]
 80036c2:	e0f2      	b.n	80038aa <UART_SetConfig+0x57a>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	69db      	ldr	r3, [r3, #28]
 80036c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036cc:	d17f      	bne.n	80037ce <UART_SetConfig+0x49e>
  {
    switch (clocksource)
 80036ce:	7efb      	ldrb	r3, [r7, #27]
 80036d0:	2b08      	cmp	r3, #8
 80036d2:	d85c      	bhi.n	800378e <UART_SetConfig+0x45e>
 80036d4:	a201      	add	r2, pc, #4	; (adr r2, 80036dc <UART_SetConfig+0x3ac>)
 80036d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036da:	bf00      	nop
 80036dc:	08003701 	.word	0x08003701
 80036e0:	0800371f 	.word	0x0800371f
 80036e4:	0800373d 	.word	0x0800373d
 80036e8:	0800378f 	.word	0x0800378f
 80036ec:	08003759 	.word	0x08003759
 80036f0:	0800378f 	.word	0x0800378f
 80036f4:	0800378f 	.word	0x0800378f
 80036f8:	0800378f 	.word	0x0800378f
 80036fc:	08003777 	.word	0x08003777
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003700:	f7ff fa4a 	bl	8002b98 <HAL_RCC_GetPCLK1Freq>
 8003704:	4603      	mov	r3, r0
 8003706:	005a      	lsls	r2, r3, #1
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	085b      	lsrs	r3, r3, #1
 800370e:	441a      	add	r2, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	fbb2 f3f3 	udiv	r3, r2, r3
 8003718:	b29b      	uxth	r3, r3
 800371a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800371c:	e03a      	b.n	8003794 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800371e:	f7ff fa51 	bl	8002bc4 <HAL_RCC_GetPCLK2Freq>
 8003722:	4603      	mov	r3, r0
 8003724:	005a      	lsls	r2, r3, #1
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	085b      	lsrs	r3, r3, #1
 800372c:	441a      	add	r2, r3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	fbb2 f3f3 	udiv	r3, r2, r3
 8003736:	b29b      	uxth	r3, r3
 8003738:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800373a:	e02b      	b.n	8003794 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	085b      	lsrs	r3, r3, #1
 8003742:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8003746:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	6852      	ldr	r2, [r2, #4]
 800374e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003752:	b29b      	uxth	r3, r3
 8003754:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003756:	e01d      	b.n	8003794 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003758:	f7ff f988 	bl	8002a6c <HAL_RCC_GetSysClockFreq>
 800375c:	4603      	mov	r3, r0
 800375e:	005a      	lsls	r2, r3, #1
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	085b      	lsrs	r3, r3, #1
 8003766:	441a      	add	r2, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003770:	b29b      	uxth	r3, r3
 8003772:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003774:	e00e      	b.n	8003794 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	085b      	lsrs	r3, r3, #1
 800377c:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	fbb2 f3f3 	udiv	r3, r2, r3
 8003788:	b29b      	uxth	r3, r3
 800378a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800378c:	e002      	b.n	8003794 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	74fb      	strb	r3, [r7, #19]
        break;
 8003792:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	2b0f      	cmp	r3, #15
 8003798:	d916      	bls.n	80037c8 <UART_SetConfig+0x498>
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037a0:	d212      	bcs.n	80037c8 <UART_SetConfig+0x498>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	f023 030f 	bic.w	r3, r3, #15
 80037aa:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	085b      	lsrs	r3, r3, #1
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	f003 0307 	and.w	r3, r3, #7
 80037b6:	b29a      	uxth	r2, r3
 80037b8:	897b      	ldrh	r3, [r7, #10]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	897a      	ldrh	r2, [r7, #10]
 80037c4:	60da      	str	r2, [r3, #12]
 80037c6:	e070      	b.n	80038aa <UART_SetConfig+0x57a>
    }
    else
    {
      ret = HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	74fb      	strb	r3, [r7, #19]
 80037cc:	e06d      	b.n	80038aa <UART_SetConfig+0x57a>
    }
  }
  else
  {
    switch (clocksource)
 80037ce:	7efb      	ldrb	r3, [r7, #27]
 80037d0:	2b08      	cmp	r3, #8
 80037d2:	d859      	bhi.n	8003888 <UART_SetConfig+0x558>
 80037d4:	a201      	add	r2, pc, #4	; (adr r2, 80037dc <UART_SetConfig+0x4ac>)
 80037d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037da:	bf00      	nop
 80037dc:	08003801 	.word	0x08003801
 80037e0:	0800381d 	.word	0x0800381d
 80037e4:	08003839 	.word	0x08003839
 80037e8:	08003889 	.word	0x08003889
 80037ec:	08003855 	.word	0x08003855
 80037f0:	08003889 	.word	0x08003889
 80037f4:	08003889 	.word	0x08003889
 80037f8:	08003889 	.word	0x08003889
 80037fc:	08003871 	.word	0x08003871
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003800:	f7ff f9ca 	bl	8002b98 <HAL_RCC_GetPCLK1Freq>
 8003804:	4602      	mov	r2, r0
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	085b      	lsrs	r3, r3, #1
 800380c:	441a      	add	r2, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	fbb2 f3f3 	udiv	r3, r2, r3
 8003816:	b29b      	uxth	r3, r3
 8003818:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800381a:	e038      	b.n	800388e <UART_SetConfig+0x55e>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800381c:	f7ff f9d2 	bl	8002bc4 <HAL_RCC_GetPCLK2Freq>
 8003820:	4602      	mov	r2, r0
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	085b      	lsrs	r3, r3, #1
 8003828:	441a      	add	r2, r3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003832:	b29b      	uxth	r3, r3
 8003834:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003836:	e02a      	b.n	800388e <UART_SetConfig+0x55e>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	085b      	lsrs	r3, r3, #1
 800383e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8003842:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	6852      	ldr	r2, [r2, #4]
 800384a:	fbb3 f3f2 	udiv	r3, r3, r2
 800384e:	b29b      	uxth	r3, r3
 8003850:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003852:	e01c      	b.n	800388e <UART_SetConfig+0x55e>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003854:	f7ff f90a 	bl	8002a6c <HAL_RCC_GetSysClockFreq>
 8003858:	4602      	mov	r2, r0
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	085b      	lsrs	r3, r3, #1
 8003860:	441a      	add	r2, r3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	fbb2 f3f3 	udiv	r3, r2, r3
 800386a:	b29b      	uxth	r3, r3
 800386c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800386e:	e00e      	b.n	800388e <UART_SetConfig+0x55e>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	085b      	lsrs	r3, r3, #1
 8003876:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003882:	b29b      	uxth	r3, r3
 8003884:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003886:	e002      	b.n	800388e <UART_SetConfig+0x55e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	74fb      	strb	r3, [r7, #19]
        break;
 800388c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	2b0f      	cmp	r3, #15
 8003892:	d908      	bls.n	80038a6 <UART_SetConfig+0x576>
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800389a:	d204      	bcs.n	80038a6 <UART_SetConfig+0x576>
    {
      huart->Instance->BRR = usartdiv;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	697a      	ldr	r2, [r7, #20]
 80038a2:	60da      	str	r2, [r3, #12]
 80038a4:	e001      	b.n	80038aa <UART_SetConfig+0x57a>
    }
    else
    {
      ret = HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80038b6:	7cfb      	ldrb	r3, [r7, #19]
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3720      	adds	r7, #32
 80038bc:	46bd      	mov	sp, r7
 80038be:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80038c2:	bf00      	nop

080038c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d0:	f003 0301 	and.w	r3, r3, #1
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d00a      	beq.n	80038ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	430a      	orrs	r2, r1
 80038ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f2:	f003 0302 	and.w	r3, r3, #2
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d00a      	beq.n	8003910 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	430a      	orrs	r2, r1
 800390e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003914:	f003 0304 	and.w	r3, r3, #4
 8003918:	2b00      	cmp	r3, #0
 800391a:	d00a      	beq.n	8003932 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	430a      	orrs	r2, r1
 8003930:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003936:	f003 0308 	and.w	r3, r3, #8
 800393a:	2b00      	cmp	r3, #0
 800393c:	d00a      	beq.n	8003954 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	430a      	orrs	r2, r1
 8003952:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003958:	f003 0310 	and.w	r3, r3, #16
 800395c:	2b00      	cmp	r3, #0
 800395e:	d00a      	beq.n	8003976 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	430a      	orrs	r2, r1
 8003974:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397a:	f003 0320 	and.w	r3, r3, #32
 800397e:	2b00      	cmp	r3, #0
 8003980:	d00a      	beq.n	8003998 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	430a      	orrs	r2, r1
 8003996:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d01a      	beq.n	80039da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	430a      	orrs	r2, r1
 80039b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039c2:	d10a      	bne.n	80039da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	430a      	orrs	r2, r1
 80039d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00a      	beq.n	80039fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	430a      	orrs	r2, r1
 80039fa:	605a      	str	r2, [r3, #4]
  }
}
 80039fc:	bf00      	nop
 80039fe:	370c      	adds	r7, #12
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr

08003a08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b086      	sub	sp, #24
 8003a0c:	af02      	add	r7, sp, #8
 8003a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003a16:	f7fd f931 	bl	8000c7c <HAL_GetTick>
 8003a1a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0308 	and.w	r3, r3, #8
 8003a26:	2b08      	cmp	r3, #8
 8003a28:	d10e      	bne.n	8003a48 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a2a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a2e:	9300      	str	r3, [sp, #0]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f000 f82a 	bl	8003a92 <UART_WaitOnFlagUntilTimeout>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d001      	beq.n	8003a48 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a44:	2303      	movs	r3, #3
 8003a46:	e020      	b.n	8003a8a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0304 	and.w	r3, r3, #4
 8003a52:	2b04      	cmp	r3, #4
 8003a54:	d10e      	bne.n	8003a74 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a56:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a5a:	9300      	str	r3, [sp, #0]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f000 f814 	bl	8003a92 <UART_WaitOnFlagUntilTimeout>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d001      	beq.n	8003a74 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a70:	2303      	movs	r3, #3
 8003a72:	e00a      	b.n	8003a8a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2220      	movs	r2, #32
 8003a78:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2220      	movs	r2, #32
 8003a7e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003a88:	2300      	movs	r3, #0
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3710      	adds	r7, #16
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}

08003a92 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a92:	b580      	push	{r7, lr}
 8003a94:	b084      	sub	sp, #16
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	60f8      	str	r0, [r7, #12]
 8003a9a:	60b9      	str	r1, [r7, #8]
 8003a9c:	603b      	str	r3, [r7, #0]
 8003a9e:	4613      	mov	r3, r2
 8003aa0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003aa2:	e02a      	b.n	8003afa <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aaa:	d026      	beq.n	8003afa <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aac:	f7fd f8e6 	bl	8000c7c <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	69ba      	ldr	r2, [r7, #24]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d302      	bcc.n	8003ac2 <UART_WaitOnFlagUntilTimeout+0x30>
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d11b      	bne.n	8003afa <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003ad0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	689a      	ldr	r2, [r3, #8]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f022 0201 	bic.w	r2, r2, #1
 8003ae0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2220      	movs	r2, #32
 8003ae6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2220      	movs	r2, #32
 8003aec:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e00f      	b.n	8003b1a <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	69da      	ldr	r2, [r3, #28]
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	4013      	ands	r3, r2
 8003b04:	68ba      	ldr	r2, [r7, #8]
 8003b06:	429a      	cmp	r2, r3
 8003b08:	bf0c      	ite	eq
 8003b0a:	2301      	moveq	r3, #1
 8003b0c:	2300      	movne	r3, #0
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	461a      	mov	r2, r3
 8003b12:	79fb      	ldrb	r3, [r7, #7]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d0c5      	beq.n	8003aa4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b18:	2300      	movs	r3, #0
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3710      	adds	r7, #16
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
	...

08003b24 <__libc_init_array>:
 8003b24:	b570      	push	{r4, r5, r6, lr}
 8003b26:	4e0d      	ldr	r6, [pc, #52]	; (8003b5c <__libc_init_array+0x38>)
 8003b28:	4c0d      	ldr	r4, [pc, #52]	; (8003b60 <__libc_init_array+0x3c>)
 8003b2a:	1ba4      	subs	r4, r4, r6
 8003b2c:	10a4      	asrs	r4, r4, #2
 8003b2e:	2500      	movs	r5, #0
 8003b30:	42a5      	cmp	r5, r4
 8003b32:	d109      	bne.n	8003b48 <__libc_init_array+0x24>
 8003b34:	4e0b      	ldr	r6, [pc, #44]	; (8003b64 <__libc_init_array+0x40>)
 8003b36:	4c0c      	ldr	r4, [pc, #48]	; (8003b68 <__libc_init_array+0x44>)
 8003b38:	f000 f820 	bl	8003b7c <_init>
 8003b3c:	1ba4      	subs	r4, r4, r6
 8003b3e:	10a4      	asrs	r4, r4, #2
 8003b40:	2500      	movs	r5, #0
 8003b42:	42a5      	cmp	r5, r4
 8003b44:	d105      	bne.n	8003b52 <__libc_init_array+0x2e>
 8003b46:	bd70      	pop	{r4, r5, r6, pc}
 8003b48:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b4c:	4798      	blx	r3
 8003b4e:	3501      	adds	r5, #1
 8003b50:	e7ee      	b.n	8003b30 <__libc_init_array+0xc>
 8003b52:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b56:	4798      	blx	r3
 8003b58:	3501      	adds	r5, #1
 8003b5a:	e7f2      	b.n	8003b42 <__libc_init_array+0x1e>
 8003b5c:	08003be4 	.word	0x08003be4
 8003b60:	08003be4 	.word	0x08003be4
 8003b64:	08003be4 	.word	0x08003be4
 8003b68:	08003be8 	.word	0x08003be8

08003b6c <memset>:
 8003b6c:	4402      	add	r2, r0
 8003b6e:	4603      	mov	r3, r0
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d100      	bne.n	8003b76 <memset+0xa>
 8003b74:	4770      	bx	lr
 8003b76:	f803 1b01 	strb.w	r1, [r3], #1
 8003b7a:	e7f9      	b.n	8003b70 <memset+0x4>

08003b7c <_init>:
 8003b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b7e:	bf00      	nop
 8003b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b82:	bc08      	pop	{r3}
 8003b84:	469e      	mov	lr, r3
 8003b86:	4770      	bx	lr

08003b88 <_fini>:
 8003b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b8a:	bf00      	nop
 8003b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b8e:	bc08      	pop	{r3}
 8003b90:	469e      	mov	lr, r3
 8003b92:	4770      	bx	lr
